import{_ as s,o as a,c as n,a as e}from"./app.bfa9bd4b.js";const y=JSON.parse('{"title":"前端部署缓存问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"为vue项目中js、css文件加上时间戳的原理","slug":"为vue项目中js、css文件加上时间戳的原理","link":"#为vue项目中js、css文件加上时间戳的原理","children":[{"level":3,"title":"为vue项目中js、css文件加上时间戳不能解决index.html出现缓存","slug":"为vue项目中js、css文件加上时间戳不能解决index-html出现缓存","link":"#为vue项目中js、css文件加上时间戳不能解决index-html出现缓存","children":[]},{"level":3,"title":"缓存一个HTML页面时，页面引用的资源被更新或删除了会怎样？","slug":"缓存一个html页面时-页面引用的资源被更新或删除了会怎样","link":"#缓存一个html页面时-页面引用的资源被更新或删除了会怎样","children":[]}]},{"level":2,"title":"HTML 页面中使用 <meta> 标签能完全关闭缓存吗？","slug":"html-页面中使用-meta-标签能完全关闭缓存吗","link":"#html-页面中使用-meta-标签能完全关闭缓存吗","children":[{"level":3,"title":"参考issues：https://github.com/ant-design/ant-design-pro/issues/1365","slug":"参考issues-https-github-com-ant-design-ant-design-pro-issues-1365","link":"#参考issues-https-github-com-ant-design-ant-design-pro-issues-1365","children":[]},{"level":3,"title":"以下是gpt的回答，待验证正确性：","slug":"以下是gpt的回答-待验证正确性","link":"#以下是gpt的回答-待验证正确性","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"缓存策略是由后端/服务器端控制的","slug":"缓存策略是由后端-服务器端控制的","link":"#缓存策略是由后端-服务器端控制的","children":[{"level":3,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[]},{"level":3,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]}]},{"level":2,"title":"参考文章：揭秘浏览器的默认缓存行为","slug":"参考文章-揭秘浏览器的默认缓存行为","link":"#参考文章-揭秘浏览器的默认缓存行为","children":[]}],"relativePath":"1.基础/4.http/前端部署缓存问题.md","lastUpdated":1720835436686}'),l={name:"1.基础/4.http/前端部署缓存问题.md"},t=e(`<h1 id="前端部署缓存问题" tabindex="-1">前端部署缓存问题 <a class="header-anchor" href="#前端部署缓存问题" aria-hidden="true">#</a></h1><h2 id="为vue项目中js、css文件加上时间戳的原理" tabindex="-1">为vue项目中js、css文件加上时间戳的原理 <a class="header-anchor" href="#为vue项目中js、css文件加上时间戳的原理" aria-hidden="true">#</a></h2><p>这能解决html引用的js、css等资源文件出现缓存的问题。</p><p>确保在每次构建时文件的 URL 发生变化，从而防止使用缓存的旧文件。</p><p>实际上前端脚手架vue-cli、vite等一般支持更改文件内容后，相应文件打包后的文件名中hash值会产生变化，同时间戳是一个道理，很多时候是index.html出现缓存，这种情况即使加上时间戳也并没有效果，需要后端配置。</p><h3 id="为vue项目中js、css文件加上时间戳不能解决index-html出现缓存" tabindex="-1">为vue项目中js、css文件加上时间戳不能解决index.html出现缓存 <a class="header-anchor" href="#为vue项目中js、css文件加上时间戳不能解决index-html出现缓存" aria-hidden="true">#</a></h3><p>为vue项目中js、css文件加上时间戳，发现还是存在缓存问题，这往往是由于index.htm文件在服务器端存在缓存。</p><p>即使资源文件 URL 发生变化，但html请求的还是旧的html。</p><p>这就需要服务器端进行nginx配置来解决，让index.html不缓存：两个选择no-cache浏览器会缓存，但刷新页面或者重新打开时。 会请求服务器，服务器可以响应304，如果文件有改动就会响应200 。no-store浏览器不缓存，刷新页面需要重新下载页面。</p><p>只配置不缓存html，js,css等文件不做处理，是因为前端某个js或css有更新，会自动在文件名上加哈希值，这样一发新版时，只要客户端请求了新版的html，就会自动找到新的js、css，没有更新的js、css还会继续用缓存，这样既不会太大的影响网页的访问速度，也能保证更新的代码不走缓存。</p><h3 id="缓存一个html页面时-页面引用的资源被更新或删除了会怎样" tabindex="-1">缓存一个HTML页面时，页面引用的资源被更新或删除了会怎样？ <a class="header-anchor" href="#缓存一个html页面时-页面引用的资源被更新或删除了会怎样" aria-hidden="true">#</a></h3><p>从结果上看，是会缓存之前旧的引用资源，不会出现报错，所以从这一点上看，缓存html也会缓存页面引用的其他资源，例如 CSS、JavaScript 文件等。</p><h2 id="html-页面中使用-meta-标签能完全关闭缓存吗" tabindex="-1">HTML 页面中使用 <code>&lt;meta&gt;</code> 标签能完全关闭缓存吗？ <a class="header-anchor" href="#html-页面中使用-meta-标签能完全关闭缓存吗" aria-hidden="true">#</a></h2><p>在index.html中加入了这几行代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Expires&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Pragma&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;no-cache&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Cache-control&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;no-cache&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Cache&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;no-cache&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> http-equiv</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;Expires&quot;</span><span style="color:#B392F0;"> content</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;0&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> http-equiv</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;Pragma&quot;</span><span style="color:#B392F0;"> content</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;no-cache&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> http-equiv</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;Cache-control&quot;</span><span style="color:#B392F0;"> content</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;no-cache&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> http-equiv</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;Cache&quot;</span><span style="color:#B392F0;"> content</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;no-cache&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>Cache-control</code> 和 <code>Pragma</code> 是用于设置缓存策略的，而 <code>Expires</code> 是用于设置过期时间的。</p><h3 id="参考issues-https-github-com-ant-design-ant-design-pro-issues-1365" tabindex="-1">参考issues：<a href="https://github.com/ant-design/ant-design-pro/issues/1365" target="_blank" rel="noreferrer">https://github.com/ant-design/ant-design-pro/issues/1365</a> <a class="header-anchor" href="#参考issues-https-github-com-ant-design-ant-design-pro-issues-1365" aria-hidden="true">#</a></h3><p>在浏览器中，默认会对 html css js 等静态文件、以及重定向进行缓存，如果在HEAD头中指定：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">HEAD</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">METAHTTP-EQUIV=&quot;Pragma&quot;CONTENT=&quot;no-cache&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">METAHTTP-EQUIV=&quot;Cache-Control&quot;CONTENT=&quot;no-cache&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">METAHTTP-EQUIV=&quot;Expires&quot;CONTENT=&quot;0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">HEAD</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">HEAD</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">METAHTTP-EQUIV=&quot;Pragma&quot;CONTENT=&quot;no-cache&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">METAHTTP-EQUIV=&quot;Cache-Control&quot;CONTENT=&quot;no-cache&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">METAHTTP-EQUIV=&quot;Expires&quot;CONTENT=&quot;0&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#FFAB70;">HEAD</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>浏览器不会缓存html，但是还是会对重定向缓存，并且这种方式并不规范，可能有的浏览器不支持。</p><h3 id="以下是gpt的回答-待验证正确性" tabindex="-1">以下是gpt的回答，待验证正确性： <a class="header-anchor" href="#以下是gpt的回答-待验证正确性" aria-hidden="true">#</a></h3><p>在 HTML 页面中使用 <code>&lt;meta&gt;</code> 标签设置缓存策略可以影响浏览器的缓存行为，但并不能完全关闭缓存，而且其优先级通常较低于服务器端设置的头部信息。</p><p>然而，需要注意的是，这些设置在实际应用中的效果可能会因浏览器的具体实现而有所不同。一些浏览器可能会遵循这些设置，而另一些可能会忽略它们。此外，由于这些设置是在 HTML 页面内部进行的，用户可以通过修改页面内容来绕过这些设置。</p><p>为了更可靠地控制缓存，最好的做法是在服务器端设置相应的响应头部，如 <code>Cache-Control</code>、<code>Expires</code>、<code>Pragma</code> 等。服务器端设置的头部信息通常具有更高的优先级，并更可靠地影响浏览器的缓存行为。</p><p>使用 <code>&lt;meta&gt;</code> 标签设置缓存策略可以向浏览器发送一些建议，但不能完全关闭浏览器的缓存。具体而言，以下是一些因素：</p><ol><li><strong>优先级问题：</strong> 在设置缓存时，浏览器会考虑来自不同来源的头部信息的优先级。通常情况下，服务器端设置的缓存头部信息优先级更高。如果服务器设置了强制缓存的头部信息，浏览器通常会遵循这些设置而忽略 <code>&lt;meta&gt;</code> 标签的建议。</li><li><strong>HTML 页面已经被缓存：</strong> HTML 页面已经被缓存，则新添加的 <code>&lt;meta&gt;</code> 标签则并不能立刻生效，仍需要清缓存。</li><li><strong>不适用于所有浏览器：</strong> 不同的浏览器可能对 <code>&lt;meta&gt;</code> 标签的缓存设置有不同的实现，有些浏览器可能会忽略这些设置。因此，为了确保最佳的兼容性和可靠性，最好在服务器端设置缓存策略。</li></ol><p>总的来说，虽然使用 <code>&lt;meta&gt;</code> 标签可以提供一些控制浏览器缓存的能力，但为了更可靠地管理缓存，特别是在生产环境中，建议在服务器端配置适当的缓存头部信息。</p><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-hidden="true">#</a></h3><p>后端没有配置响应头的缓存策略时，不建议使用，流量请求大，影响网页速度</p><h2 id="缓存策略是由后端-服务器端控制的" tabindex="-1">缓存策略是由后端/服务器端控制的 <a class="header-anchor" href="#缓存策略是由后端-服务器端控制的" aria-hidden="true">#</a></h2><p>浏览器缓存分为强缓存和协商缓存</p><h3 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-hidden="true">#</a></h3><p>强缓存是通过设置响应头中的 <code>Expires</code> 或 <code>Cache-Control</code> 来实现的，这两个字段可以告诉浏览器在一定时间内直接使用本地缓存，而不向服务器发送请求</p><p>可以由这两个字段其中一个决定</p><ul><li><code>expires</code></li><li><code>cache-control(优先级更高)</code></li></ul><blockquote><p>cache-control是http1.1的头字段，expires是http1.0的头字段,如果expires和cache-control同时存在，cache-control会覆盖expires，建议两个都写。</p></blockquote><p>在时效时间内，不走服务端，只走本地缓存</p><h3 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a></h3><p>浏览器向服务器发送请求，服务器会根据这个请求的request header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response header通知浏览器从缓存中读取资源；</p><p>可以由这两对字段中的一对决定</p><ul><li><code>Last-Modified，If-Modified-Since</code></li><li><code>Etag，If-None-Match(优先级更高)</code></li></ul><h2 id="参考文章-揭秘浏览器的默认缓存行为" tabindex="-1">参考文章：<a href="https://juejin.cn/user/1328634938264686/posts" target="_blank" rel="noreferrer">揭秘浏览器的默认缓存行为</a> <a class="header-anchor" href="#参考文章-揭秘浏览器的默认缓存行为" aria-hidden="true">#</a></h2><p>浏览器存在默认缓存行为，任何资源会被默认缓存，用不用缓存取决于服务端和前端共同决定。</p><p>即便给html文件设置强缓存，也不会生效，每次请求都会请求服务端以确保html文件是最新的。</p><p>在http1.1版本中，给某资源响应头Cache-Control的值设置为no-store，可以禁止浏览器缓存该资源。</p>`,45),o=[t];function p(c,r,i,d,h,u){return a(),n("div",null,o)}const F=s(l,[["render",p]]);export{y as __pageData,F as default};
