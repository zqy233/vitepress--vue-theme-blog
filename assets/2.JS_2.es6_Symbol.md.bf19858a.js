import{_ as s,o as n,c as a,a as o}from"./app.bfa9bd4b.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Symbol.prototype.description","slug":"symbol-prototype-description","link":"#symbol-prototype-description","children":[]}],"relativePath":"2.JS/2.es6/Symbol.md","lastUpdated":1720835436690}'),l={name:"2.JS/2.es6/Symbol.md"},p=o(`<h2 id="symbol-prototype-description" tabindex="-1">Symbol.prototype.description <a class="header-anchor" href="#symbol-prototype-description" aria-hidden="true">#</a></h2><p>创建 Symbol 的时候，可以添加一个描述。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sym</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Symbol(</span><span style="color:#FFAB70;">&#39;foo&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码中，<code>sym</code>的描述就是字符串<code>foo</code>。</p><p>但是，读取这个描述需要将 Symbol 显式转为字符串，即下面的写法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sym</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// &quot;Symbol(foo)&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// &quot;Symbol(foo)&quot;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sym</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Symbol(</span><span style="color:#FFAB70;">&#39;foo&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">String(sym) </span><span style="color:#6B737C;">// &quot;Symbol(foo)&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">sym</span><span style="color:#B392F0;">.toString() </span><span style="color:#6B737C;">// &quot;Symbol(foo)&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面的用法不是很方便。<a href="https://github.com/tc39/proposal-Symbol-description" target="_blank" rel="noreferrer">ES2019</a> 提供了一个实例属性<code>description</code>，直接返回 Symbol 的描述。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">sym</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &quot;foo&quot;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sym</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Symbol(</span><span style="color:#FFAB70;">&#39;foo&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#79B8FF;">sym</span><span style="color:#B392F0;">.description </span><span style="color:#6B737C;">// &quot;foo&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,8),e=[p];function t(c,r,y,i,B,d){return n(),a("div",null,e)}const b=s(l,[["render",t]]);export{m as __pageData,b as default};
