import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const A=JSON.parse('{"title":"源码","description":"","frontmatter":{},"headers":[{"level":2,"title":"htmlTagNameRE：用于匹配 HTML 标签的名称的正则表达式","slug":"htmltagnamere-用于匹配-html-标签的名称的正则表达式","link":"#htmltagnamere-用于匹配-html-标签的名称的正则表达式","children":[]},{"level":2,"title":"htmlTagNameEmptyRE：匹配空标签的正则表达式","slug":"htmltagnameemptyre-匹配空标签的正则表达式","link":"#htmltagnameemptyre-匹配空标签的正则表达式","children":[]},{"level":2,"title":"创建一个快速的 HTML 扫描器，用于识别和扫描 HTML 文本中的不同记号","slug":"创建一个快速的-html-扫描器-用于识别和扫描-html-文本中的不同记号","link":"#创建一个快速的-html-扫描器-用于识别和扫描-html-文本中的不同记号","children":[]}],"relativePath":"6.源码阅读/vscode-auto-rename-tag/htmlScannerFast.md","lastUpdated":1720835436706}'),p={name:"6.源码阅读/vscode-auto-rename-tag/htmlScannerFast.md"},o=l(`<h1 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-hidden="true">#</a></h1><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">MultiLineStream</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./MultiLineStream&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * HTML tag name (explaining the regex)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * This regex is for the name of the html tag</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * E.g. we want to match &quot;div&quot; inside &quot;&lt;div&gt;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ^  ### start</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * [:\\w]  ### &quot;:&quot; or character or digit</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ((?![&gt;\\/])[\\S])  ### everything except closing brackets</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">htmlTagNameRE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;">[!:</span><span style="color:#E06C75;">\\w</span><span style="color:#56B6C2;">\\$</span><span style="color:#D19A66;">]</span><span style="color:#E06C75;">((?!</span><span style="color:#D19A66;">[&gt;</span><span style="color:#56B6C2;">\\/</span><span style="color:#D19A66;">]</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\S</span><span style="color:#D19A66;">]</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Empty html tag, e.g. \`&lt; &gt;&lt;/&gt;\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">htmlTagNameEmptyRE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Html attribute name (explaining the regex)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * This regex is for html attribute names,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * E.g. we want to match &quot;class&quot; in &quot;&lt;div class=&quot;center&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ^  ### start</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   [^\\s&quot;&#39;&gt;/=]*  ### any anything that isn&#39;t whitespace, &quot;, &#39;, &gt;, / or =</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">htmlAttributeNameRE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;">[</span><span style="color:#ABB2BF;">^</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">&quot;&#39;&gt;/=]*</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Html attribute value (explaining the regex)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ^  ### start</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   [^\\s&quot;&#39;\`=&lt;&gt;/]+  ### no whitespace, double quotes, single quotes, back quotes, &quot;=&quot;, &quot;&lt;&quot;, &quot;&gt;&quot; and &quot;/&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">htmlAttributeValueRE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;">[</span><span style="color:#ABB2BF;">^</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">&quot;&#39;\`=&lt;&gt;/]+</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">StartCommentTag</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;&lt;--&quot; part of &quot;&lt;!-- this is a comment --&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">Comment</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot; this is a comment &quot; part of &quot;&lt;!-- this is a comment --&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">EndCommentTag</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;--&gt;&quot; part of &quot;&lt;!-- this is a comment --&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">StartTagOpen</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;&lt;&quot; part of &quot;&lt;html&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">StartTagClose</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;&gt;&quot; part of &quot;&lt;html&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">StartTagSelfClose</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;/&gt;&quot; part of &quot;&lt;input /&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">StartTag</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;input&quot; part of &quot;&lt;input&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">EndTagOpen</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;&lt;&quot; part of &quot;&lt;/html&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">EndTagClose</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;&gt;&quot; part of &quot;&lt;/html&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">EndTag</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;html&quot; part of &lt;/html&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">AttributeName</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;class&quot; part of &quot;&lt;div class=&quot;center&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">AttributeValue</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;center&quot; part of &quot;&lt;div class=&quot;center&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">Content</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;this is text&quot; part of &quot;&lt;p&gt;this is text&lt;/p&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">EOS</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// end of stream</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">DelimiterAssign</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &quot;=&quot; part of &quot;&lt;div class=&quot;center&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">Unknown</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// anything that doesn&#39;t make sense, e.g. &quot;;&quot; in &quot;i &lt;length;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">WhiteSpace</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerFast</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">scan</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getTokenText</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">stream</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MultiLineStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">WithinContent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">AfterOpeningStartTag</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">AfterOpeningEndTag</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">WithinStartTag</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">WithinEndTag</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">WithinComment</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">AfterAttributeName</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">BeforeAttributeValue</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createScannerFast</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">initialOffset</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">initialState</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">matchingTagPairs</span></span>
<span class="line"><span style="color:#ABB2BF;">}: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">initialOffset</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">matchingTagPairs</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">][];</span></span>
<span class="line"><span style="color:#ABB2BF;">}): </span><span style="color:#E5C07B;">ScannerFast</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MultiLineStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initialOffset</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">matchingTagPairs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tokenOffset</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * Whether or not a space is after the starting tag name.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * E.g. &quot;&lt;div &gt;&quot; but not &quot;&lt;div&#39;&#39;&gt;&quot; and &quot;&lt;div class=&quot;center&quot; &gt;&quot; but not &quot;&lt;div class=&quot;center&quot;&gt;&quot;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * This is used to determine whether the following characters are attributes or just invalid</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nextElementName</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">advanceIfRegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">htmlTagNameRE</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">advanceIfRegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">htmlTagNameEmptyRE</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">lastTagName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// @ts-ignore</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">scan</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">tokenOffset</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eos</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">EOS</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">AfterOpeningEndTag</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">tagName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nextElementName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">tagName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinEndTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">EndTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peekRight</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&gt;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinEndTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">EndTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Unknown</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">AfterOpeningStartTag</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">lastTagName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nextElementName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">lastTagName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">lastTagName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">tokenOffset</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinStartTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">StartTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// this is a tag like &quot;&lt;&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peekRight</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&gt;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinStartTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">StartTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// At this point there is no tag name sign after the opening tag &quot;&lt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// E.g. &quot;&lt; div&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// So we just assume that it is text</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinContent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">scan</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">scan</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">stream</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">getTokenText</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSource</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tokenOffset</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">state</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">newState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { MultiLineStream } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./MultiLineStream&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * HTML tag name (explaining the regex)</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * This regex is for the name of the html tag</span></span>
<span class="line"><span style="color:#6B737C;"> * E.g. we want to match &quot;div&quot; inside &quot;&lt;div&gt;&quot;</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * ^  ### start</span></span>
<span class="line"><span style="color:#6B737C;"> * [:\\w]  ### &quot;:&quot; or character or digit</span></span>
<span class="line"><span style="color:#6B737C;"> * ((?![&gt;\\/])[\\S])  ### everything except closing brackets</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">htmlTagNameRE</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">/</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">[!:\\w\\$]((?![&gt;\\/])[\\S])</span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">/</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * Empty html tag, e.g. \`&lt; &gt;&lt;/&gt;\`</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">htmlTagNameEmptyRE</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#FFAB70;"> /</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">\\s</span><span style="color:#F97583;">+</span><span style="color:#FFAB70;">/</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * Html attribute name (explaining the regex)</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * This regex is for html attribute names,</span></span>
<span class="line"><span style="color:#6B737C;"> * E.g. we want to match &quot;class&quot; in &quot;&lt;div class=&quot;center&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * ^  ### start</span></span>
<span class="line"><span style="color:#6B737C;"> *   [^\\s&quot;&#39;&gt;/=]*  ### any anything that isn&#39;t whitespace, &quot;, &#39;, &gt;, / or =</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">htmlAttributeNameRE</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#FFAB70;"> /</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">[</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">\\s&quot;&#39;&gt;/=]</span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">/</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * Html attribute value (explaining the regex)</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * ^  ### start</span></span>
<span class="line"><span style="color:#6B737C;"> *   [^\\s&quot;&#39;\`=&lt;&gt;/]+  ### no whitespace, double quotes, single quotes, back quotes, &quot;=&quot;, &quot;&lt;&quot;, &quot;&gt;&quot; and &quot;/&quot;</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">htmlAttributeValueRE</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#FFAB70;"> /</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">[</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">\\s&quot;&#39;\`=&lt;&gt;/]</span><span style="color:#F97583;">+</span><span style="color:#FFAB70;">/</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">enum</span><span style="color:#B392F0;"> TokenTypeFast {</span></span>
<span class="line"><span style="color:#B392F0;">  StartCommentTag</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;&lt;--&quot; part of &quot;&lt;!-- this is a comment --&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  Comment</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot; this is a comment &quot; part of &quot;&lt;!-- this is a comment --&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  EndCommentTag</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;--&gt;&quot; part of &quot;&lt;!-- this is a comment --&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  StartTagOpen</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;&lt;&quot; part of &quot;&lt;html&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  StartTagClose</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;&gt;&quot; part of &quot;&lt;html&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  StartTagSelfClose</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;/&gt;&quot; part of &quot;&lt;input /&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  StartTag</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;input&quot; part of &quot;&lt;input&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  EndTagOpen</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;&lt;&quot; part of &quot;&lt;/html&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  EndTagClose</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;&gt;&quot; part of &quot;&lt;/html&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  EndTag</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;html&quot; part of &lt;/html&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  AttributeName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;class&quot; part of &quot;&lt;div class=&quot;center&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  AttributeValue</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;center&quot; part of &quot;&lt;div class=&quot;center&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  Content</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;this is text&quot; part of &quot;&lt;p&gt;this is text&lt;/p&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  EOS</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// end of stream</span></span>
<span class="line"><span style="color:#B392F0;">  DelimiterAssign</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// &quot;=&quot; part of &quot;&lt;div class=&quot;center&quot;&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  Unknown</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// anything that doesn&#39;t make sense, e.g. &quot;;&quot; in &quot;i &lt;length;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  WhiteSpace</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ScannerFast {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">readonly</span><span style="color:#B392F0;"> scan</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> TokenTypeFast;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">readonly</span><span style="color:#B392F0;"> getTokenText</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">readonly</span><span style="color:#B392F0;"> stream</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> MultiLineStream;</span></span>
<span class="line"><span style="color:#B392F0;">  state</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ScannerStateFast;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">enum</span><span style="color:#B392F0;"> ScannerStateFast {</span></span>
<span class="line"><span style="color:#B392F0;">  WithinContent</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  AfterOpeningStartTag</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  AfterOpeningEndTag</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  WithinStartTag</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  WithinEndTag</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  WithinComment</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  AfterAttributeName</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  BeforeAttributeValue</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createScannerFast({</span></span>
<span class="line"><span style="color:#B392F0;">  input</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  initialOffset</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  initialState</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  matchingTagPairs</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  initialOffset</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">number</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  initialState</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ScannerStateFast;</span></span>
<span class="line"><span style="color:#B392F0;">  matchingTagPairs</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">readonly</span><span style="color:#B392F0;"> [</span><span style="color:#79B8FF;">string</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">][];</span></span>
<span class="line"><span style="color:#B392F0;">})</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ScannerFast {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MultiLineStream(input</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> initialOffset</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> matchingTagPairs);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> state</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ScannerStateFast </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initialState;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tokenOffset</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">number</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;">   * Whether or not a space is after the starting tag name.</span></span>
<span class="line"><span style="color:#6B737C;">   * E.g. &quot;&lt;div &gt;&quot; but not &quot;&lt;div&#39;&#39;&gt;&quot; and &quot;&lt;div class=&quot;center&quot; &gt;&quot; but not &quot;&lt;div class=&quot;center&quot;&gt;&quot;&quot;</span></span>
<span class="line"><span style="color:#6B737C;">   * This is used to determine whether the following characters are attributes or just invalid</span></span>
<span class="line"><span style="color:#6B737C;">   */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> nextElementName()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> result </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.advanceIfRegExp(htmlTagNameRE);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (result </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.advanceIfRegExp(htmlTagNameEmptyRE)) {</span></span>
<span class="line"><span style="color:#B392F0;">        result </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> result;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> lastTagName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// @ts-ignore</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> scan()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> TokenTypeFast {</span></span>
<span class="line"><span style="color:#B392F0;">    tokenOffset </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.position;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.eos()) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">EOS</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">switch</span><span style="color:#B392F0;"> (state) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.AfterOpeningEndTag:</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">tagName</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> nextElementName();</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (tagName) {</span></span>
<span class="line"><span style="color:#B392F0;">          state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinEndTag;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.EndTag;</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.peekRight(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&gt;&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinEndTag;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.EndTag;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.Unknown;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.AfterOpeningStartTag:</span></span>
<span class="line"><span style="color:#B392F0;">        lastTagName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> nextElementName();</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (lastTagName </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (lastTagName </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            tokenOffset </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.position;</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">          state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinStartTag;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.StartTag;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// this is a tag like &quot;&lt;&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.peekRight() </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&gt;&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinStartTag;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.StartTag;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// At this point there is no tag name sign after the opening tag &quot;&lt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// E.g. &quot;&lt; div&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// So we just assume that it is text</span></span>
<span class="line"><span style="color:#B392F0;">        state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinContent;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> scan();</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">default</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    scan</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    stream</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    getTokenText() {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.getSource().slice(tokenOffset</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.position);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">set</span><span style="color:#B392F0;"> state(newState</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">any</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> newState;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br></div></div><h2 id="htmltagnamere-用于匹配-html-标签的名称的正则表达式" tabindex="-1">htmlTagNameRE：用于匹配 HTML 标签的名称的正则表达式 <a class="header-anchor" href="#htmltagnamere-用于匹配-html-标签的名称的正则表达式" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * HTML 标签名称（解释正则表达式）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 此正则表达式用于匹配 HTML 标签的名称，例如我们希望在 &quot;&lt;div&gt;&quot; 中匹配 &quot;div&quot;。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ^  ### 开始位置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * [:\\w]  ### &quot;:&quot; 或 字母或数字</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ((?![&gt;\\/])[\\S])*  ### 除了闭合括号之外的任意字符</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">htmlTagNameRE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;">[!:</span><span style="color:#E06C75;">\\w</span><span style="color:#56B6C2;">\\$</span><span style="color:#D19A66;">]</span><span style="color:#E06C75;">((?!</span><span style="color:#D19A66;">[&gt;</span><span style="color:#56B6C2;">\\/</span><span style="color:#D19A66;">]</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\S</span><span style="color:#D19A66;">]</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * HTML 标签名称（解释正则表达式）</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * 此正则表达式用于匹配 HTML 标签的名称，例如我们希望在 &quot;&lt;div&gt;&quot; 中匹配 &quot;div&quot;。</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * ^  ### 开始位置</span></span>
<span class="line"><span style="color:#6B737C;"> * [:\\w]  ### &quot;:&quot; 或 字母或数字</span></span>
<span class="line"><span style="color:#6B737C;"> * ((?![&gt;\\/])[\\S])*  ### 除了闭合括号之外的任意字符</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">htmlTagNameRE</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">/</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">[!:\\w\\$]((?![&gt;\\/])[\\S])</span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">/</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="htmltagnameemptyre-匹配空标签的正则表达式" tabindex="-1">htmlTagNameEmptyRE：匹配空标签的正则表达式 <a class="header-anchor" href="#htmltagnameemptyre-匹配空标签的正则表达式" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 空的 HTML 标签，例如 \`&lt; &gt;&lt;/&gt;\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">htmlTagNameEmptyRE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * 空的 HTML 标签，例如 \`&lt; &gt;&lt;/&gt;\`</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">htmlTagNameEmptyRE</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#FFAB70;"> /</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">\\s</span><span style="color:#F97583;">+</span><span style="color:#FFAB70;">/</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="创建一个快速的-html-扫描器-用于识别和扫描-html-文本中的不同记号" tabindex="-1">创建一个快速的 HTML 扫描器，用于识别和扫描 HTML 文本中的不同记号 <a class="header-anchor" href="#创建一个快速的-html-扫描器-用于识别和扫描-html-文本中的不同记号" aria-hidden="true">#</a></h2><p>这段代码是一个快速的 HTML 扫描器，用于识别和扫描 HTML 文本中的不同记号，如标签、属性、注释和内容文本等。快速扫描器利用了正则表达式进行快速匹配，从而提高了扫描的效率。其中，<code>ScannerFast</code> 和 <code>ScannerStateFast</code> 是相关的接口和枚举类型，用于描述扫描器的状态和行为。该扫描器适用于对 HTML 文本进行快速的记号识别和解析，以便在后续的语法解析和处理中使用。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 创建快速扫描器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{object}</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#7F848E;font-style:italic;"> - 创建扫描器所需的参数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{string}</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">params.input</span><span style="color:#7F848E;font-style:italic;"> - 输入文本</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{number}</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">params.initialOffset</span><span style="color:#7F848E;font-style:italic;"> - 初始偏移量</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{ScannerStateFast}</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">params.initialState</span><span style="color:#7F848E;font-style:italic;"> - 初始扫描状态</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{readonly [string, string][]}</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">params.matchingTagPairs</span><span style="color:#7F848E;font-style:italic;"> - 标签对列表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@returns</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{ScannerFast}</span><span style="color:#7F848E;font-style:italic;"> - 返回快速扫描器对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createScannerFast</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">initialOffset</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">initialState</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">matchingTagPairs</span></span>
<span class="line"><span style="color:#ABB2BF;">}: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">initialOffset</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">matchingTagPairs</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">][];</span></span>
<span class="line"><span style="color:#ABB2BF;">}): </span><span style="color:#E5C07B;">ScannerFast</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 创建 MultiLineStream 实例，用于处理多行文本流</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MultiLineStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initialOffset</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">matchingTagPairs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tokenOffset</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * 获取下一个元素名称（标签名或属性名）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@returns</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{string | undefined}</span><span style="color:#7F848E;font-style:italic;"> - 返回下一个元素名称，如果没有，则返回 undefined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nextElementName</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">advanceIfRegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">htmlTagNameRE</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">advanceIfRegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">htmlTagNameEmptyRE</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">lastTagName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 定义 scan 函数，用于扫描并返回记号类型</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">scan</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">tokenOffset</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eos</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">EOS</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">AfterOpeningEndTag</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">tagName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nextElementName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">tagName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinEndTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">EndTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peekRight</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&gt;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinEndTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">EndTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Unknown</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">AfterOpeningStartTag</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">lastTagName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nextElementName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">lastTagName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">lastTagName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">tokenOffset</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinStartTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">StartTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// this is a tag like &quot;&lt;&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peekRight</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&gt;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinStartTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TokenTypeFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">StartTag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// At this point there is no tag name sign after the opening tag &quot;&lt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// E.g. &quot;&lt; div&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// So we just assume that it is text</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ScannerStateFast</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WithinContent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">scan</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 返回 ScannerFast 对象</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">scan</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">stream</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">getTokenText</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSource</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tokenOffset</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stream</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">state</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">newState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * 创建快速扫描器</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{object}</span><span style="color:#6B737C;"> params - 创建扫描器所需的参数</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6B737C;"> params.input - 输入文本</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6B737C;"> params.initialOffset - 初始偏移量</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{ScannerStateFast}</span><span style="color:#6B737C;"> params.initialState - 初始扫描状态</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{readonly [string, string][]}</span><span style="color:#6B737C;"> params.matchingTagPairs - 标签对列表</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@returns</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{ScannerFast}</span><span style="color:#6B737C;"> - 返回快速扫描器对象</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createScannerFast({</span></span>
<span class="line"><span style="color:#B392F0;">  input</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  initialOffset</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  initialState</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  matchingTagPairs</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  initialOffset</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">number</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  initialState</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ScannerStateFast;</span></span>
<span class="line"><span style="color:#B392F0;">  matchingTagPairs</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">readonly</span><span style="color:#B392F0;"> [</span><span style="color:#79B8FF;">string</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">][];</span></span>
<span class="line"><span style="color:#B392F0;">})</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ScannerFast {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 创建 MultiLineStream 实例，用于处理多行文本流</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MultiLineStream(input</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> initialOffset</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> matchingTagPairs);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> state</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ScannerStateFast </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initialState;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tokenOffset</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">number</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;">   * 获取下一个元素名称（标签名或属性名）</span></span>
<span class="line"><span style="color:#6B737C;">   *</span></span>
<span class="line"><span style="color:#6B737C;">   * </span><span style="color:#F97583;">@returns</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{string | undefined}</span><span style="color:#6B737C;"> - 返回下一个元素名称，如果没有，则返回 undefined</span></span>
<span class="line"><span style="color:#6B737C;">   */</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> nextElementName()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> result </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.advanceIfRegExp(htmlTagNameRE);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (result </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.advanceIfRegExp(htmlTagNameEmptyRE)) {</span></span>
<span class="line"><span style="color:#B392F0;">        result </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> result;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> lastTagName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 定义 scan 函数，用于扫描并返回记号类型</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> scan()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> TokenTypeFast {</span></span>
<span class="line"><span style="color:#B392F0;">    tokenOffset </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.position;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.eos()) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">EOS</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">switch</span><span style="color:#B392F0;"> (state) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.AfterOpeningEndTag:</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">tagName</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> nextElementName();</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (tagName) {</span></span>
<span class="line"><span style="color:#B392F0;">          state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinEndTag;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.EndTag;</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.peekRight(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&gt;&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinEndTag;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.EndTag;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.Unknown;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.AfterOpeningStartTag:</span></span>
<span class="line"><span style="color:#B392F0;">        lastTagName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> nextElementName();</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (lastTagName </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (lastTagName </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            tokenOffset </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.position;</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">          state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinStartTag;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.StartTag;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// this is a tag like &quot;&lt;&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.peekRight() </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&gt;&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinStartTag;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">TokenTypeFast</span><span style="color:#B392F0;">.StartTag;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// At this point there is no tag name sign after the opening tag &quot;&lt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// E.g. &quot;&lt; div&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// So we just assume that it is text</span></span>
<span class="line"><span style="color:#B392F0;">        state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ScannerStateFast</span><span style="color:#B392F0;">.WithinContent;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> scan();</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">default</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 返回 ScannerFast 对象</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    scan</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    stream</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    getTokenText() {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.getSource().slice(tokenOffset</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#B392F0;">.position);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">set</span><span style="color:#B392F0;"> state(newState</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">any</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> newState;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br></div></div>`,9),e=[o];function t(c,r,B,y,F,i){return n(),a("div",null,e)}const m=s(p,[["render",t]]);export{A as __pageData,m as default};
