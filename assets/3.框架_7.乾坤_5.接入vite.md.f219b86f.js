import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"vite子应用vite.config.ts配置","slug":"vite子应用vite-config-ts配置","link":"#vite子应用vite-config-ts配置","children":[]},{"level":2,"title":"查看vite-plugin-qiankun相应源码","slug":"查看vite-plugin-qiankun相应源码","link":"#查看vite-plugin-qiankun相应源码","children":[]},{"level":2,"title":"htmlPluginh函数","slug":"htmlpluginh函数","link":"#htmlpluginh函数","children":[]},{"level":2,"title":"module2DynamicImport函数","slug":"module2dynamicimport函数","link":"#module2dynamicimport函数","children":[]},{"level":2,"title":"createImportFinallyResolve函数与createQiankunHelper函数","slug":"createimportfinallyresolve函数与createqiankunhelper函数","link":"#createimportfinallyresolve函数与createqiankunhelper函数","children":[]}],"relativePath":"3.框架/7.乾坤/5.接入vite.md","lastUpdated":1720835436698}'),p={name:"3.框架/7.乾坤/5.接入vite.md"},o=l(`<h2 id="vite子应用vite-config-ts配置" tabindex="-1">vite子应用vite.config.ts配置 <a class="header-anchor" href="#vite子应用vite-config-ts配置" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// vite.config.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">qiankun</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vite-plugin-qiankun&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 这里的 &#39;myMicroAppName&#39; 是子应用名，主应用注册时AppName需保持一致</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">qiankun</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;myMicroAppName&#39;</span><span style="color:#ABB2BF;">)],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 生产环境需要指定运行域名作为base</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;http://xxx.com/&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// vite.config.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> qiankun </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;vite-plugin-qiankun&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 这里的 &#39;myMicroAppName&#39; 是子应用名，主应用注册时AppName需保持一致</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [qiankun(</span><span style="color:#FFAB70;">&#39;myMicroAppName&#39;</span><span style="color:#B392F0;">)]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 生产环境需要指定运行域名作为base</span></span>
<span class="line"><span style="color:#B392F0;">  base</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;http://xxx.com/&#39;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="查看vite-plugin-qiankun相应源码" tabindex="-1">查看vite-plugin-qiankun相应源码 <a class="header-anchor" href="#查看vite-plugin-qiankun相应源码" aria-hidden="true">#</a></h2><p>大致浏览下即可，下面会逐步解析</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">cheerio</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">CheerioAPI</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Element</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;cheerio&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">PluginOption</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createQiankunHelper</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">qiankunName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">  const createDeffer = (hookName) =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">    const d = new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy &amp;&amp; (window.proxy[</span><span style="color:#56B6C2;">\\\`</span><span style="color:#98C379;">vite</span><span style="color:#56B6C2;">\\$</span><span style="color:#98C379;">{hookName}</span><span style="color:#56B6C2;">\\\`</span><span style="color:#98C379;">] = resolve)</span></span>
<span class="line"><span style="color:#98C379;">    })</span></span>
<span class="line"><span style="color:#98C379;">    return props =&gt; d.then(fn =&gt; fn(props));</span></span>
<span class="line"><span style="color:#98C379;">  }</span></span>
<span class="line"><span style="color:#98C379;">  const bootstrap = createDeffer(&#39;bootstrap&#39;);</span></span>
<span class="line"><span style="color:#98C379;">  const mount = createDeffer(&#39;mount&#39;);</span></span>
<span class="line"><span style="color:#98C379;">  const unmount = createDeffer(&#39;unmount&#39;);</span></span>
<span class="line"><span style="color:#98C379;">  const update = createDeffer(&#39;update&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">  ;(global =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">    global.qiankunName = &#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">qiankunName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;;</span></span>
<span class="line"><span style="color:#98C379;">    global[&#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">qiankunName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;] = {</span></span>
<span class="line"><span style="color:#98C379;">      bootstrap,</span></span>
<span class="line"><span style="color:#98C379;">      mount,</span></span>
<span class="line"><span style="color:#98C379;">      unmount,</span></span>
<span class="line"><span style="color:#98C379;">      update</span></span>
<span class="line"><span style="color:#98C379;">    };</span></span>
<span class="line"><span style="color:#98C379;">  })(window);</span></span>
<span class="line"><span style="color:#98C379;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// eslint-disable-next-line no-unused-vars</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">replaceSomeScript</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">$</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CheerioAPI</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">findStr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">replaceStr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;script&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">each</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">()?.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">findStr</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">replaceStr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createImportFinallyResolve</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">qiankunName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">    const qiankunLifeCycle = window.moudleQiankunAppLifeCycles &amp;&amp; window.moudleQiankunAppLifeCycles[&#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">qiankunName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;];</span></span>
<span class="line"><span style="color:#98C379;">    if (qiankunLifeCycle) {</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy.vitemount((props) =&gt; qiankunLifeCycle.mount(props));</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy.viteunmount((props) =&gt; qiankunLifeCycle.unmount(props));</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy.vitebootstrap(() =&gt; qiankunLifeCycle.bootstrap());</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy.viteupdate((props) =&gt; qiankunLifeCycle.update(props));</span></span>
<span class="line"><span style="color:#98C379;">    }</span></span>
<span class="line"><span style="color:#98C379;">  \`</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MicroOption</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">useDevMode</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">PluginFn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">qiankunName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">microOption</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MicroOption</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">PluginOption</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">htmlPlugin</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PluginFn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">qiankunName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">microOption</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">module2DynamicImport</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">$</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CheerioAPI</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">scriptTag</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Element</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">scriptTag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scriptTag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">moduleSrc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;src&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">appendBase</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">microOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">useDevMode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">appendBase</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;(window.proxy ? (window.proxy.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ + </span><span style="color:#56B6C2;">\\&#39;</span><span style="color:#98C379;">..</span><span style="color:#56B6C2;">\\&#39;</span><span style="color:#98C379;">) : </span><span style="color:#56B6C2;">\\&#39;\\&#39;</span><span style="color:#98C379;">) + &#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAttr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;src&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAttr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;type&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`import(</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">appendBase</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">moduleSrc</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;)\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">script$</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;qiankun-html-transform&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">configResolved</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;build&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isProduction</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">configureServer</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">server</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">server</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">middlewares</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">microOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">useDevMode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">end</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">end</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">htmlStr</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">args</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">htmlStr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;string&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cheerio</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">htmlStr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#61AFEF;">module2DynamicImport</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`script[src=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">base</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">@vite/client]\`</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E06C75;">htmlStr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">htmlStr</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">transformIndexHtml</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">html</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cheerio</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">moduleTags</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;body script[type=module], head script[crossorigin=&quot;&quot;]&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">moduleTags</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">moduleTags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">len</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">moduleTags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">moduleTags</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">each</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">moduleTag</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">module2DynamicImport</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">moduleTag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">?.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.finally(() =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">            </span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">createImportFinallyResolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">qiankunName</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">          })\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;body&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`&lt;script&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">createQiankunHelper</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">qiankunName</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/script&gt;\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">output</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">output</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">htmlPlugin</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> cheerio</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { CheerioAPI</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> Element } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;cheerio&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { PluginOption } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> createQiankunHelper </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (qiankunName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">  const createDeffer = (hookName) =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">    const d = new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy &amp;&amp; (window.proxy[\\\`vite\\\${hookName}\\\`] = resolve)</span></span>
<span class="line"><span style="color:#FFAB70;">    })</span></span>
<span class="line"><span style="color:#FFAB70;">    return props =&gt; d.then(fn =&gt; fn(props));</span></span>
<span class="line"><span style="color:#FFAB70;">  }</span></span>
<span class="line"><span style="color:#FFAB70;">  const bootstrap = createDeffer(&#39;bootstrap&#39;);</span></span>
<span class="line"><span style="color:#FFAB70;">  const mount = createDeffer(&#39;mount&#39;);</span></span>
<span class="line"><span style="color:#FFAB70;">  const unmount = createDeffer(&#39;unmount&#39;);</span></span>
<span class="line"><span style="color:#FFAB70;">  const update = createDeffer(&#39;update&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">  ;(global =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">    global.qiankunName = &#39;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">qiankunName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;;</span></span>
<span class="line"><span style="color:#FFAB70;">    global[&#39;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">qiankunName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;] = {</span></span>
<span class="line"><span style="color:#FFAB70;">      bootstrap,</span></span>
<span class="line"><span style="color:#FFAB70;">      mount,</span></span>
<span class="line"><span style="color:#FFAB70;">      unmount,</span></span>
<span class="line"><span style="color:#FFAB70;">      update</span></span>
<span class="line"><span style="color:#FFAB70;">    };</span></span>
<span class="line"><span style="color:#FFAB70;">  })(window);</span></span>
<span class="line"><span style="color:#FFAB70;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// eslint-disable-next-line no-unused-vars</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> replaceSomeScript </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ($</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> CheerioAPI</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> findStr</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> replaceStr</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  $(</span><span style="color:#FFAB70;">&#39;script&#39;</span><span style="color:#B392F0;">).each((i</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> el) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> ($(el).html()?.includes(findStr)) {</span></span>
<span class="line"><span style="color:#B392F0;">      $(el).html(replaceStr)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  })</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> createImportFinallyResolve </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (qiankunName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">    const qiankunLifeCycle = window.moudleQiankunAppLifeCycles &amp;&amp; window.moudleQiankunAppLifeCycles[&#39;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">qiankunName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;];</span></span>
<span class="line"><span style="color:#FFAB70;">    if (qiankunLifeCycle) {</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy.vitemount((props) =&gt; qiankunLifeCycle.mount(props));</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy.viteunmount((props) =&gt; qiankunLifeCycle.unmount(props));</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy.vitebootstrap(() =&gt; qiankunLifeCycle.bootstrap());</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy.viteupdate((props) =&gt; qiankunLifeCycle.update(props));</span></span>
<span class="line"><span style="color:#FFAB70;">    }</span></span>
<span class="line"><span style="color:#FFAB70;">  \`</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">type</span><span style="color:#B392F0;"> MicroOption </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  useDevMode</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">boolean</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> PluginFn </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (qiankunName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> microOption</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> MicroOption) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> PluginOption;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> htmlPlugin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> PluginFn </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (qiankunName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> microOption </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> isProduction</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">boolean</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> base </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> module2DynamicImport </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ($</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> CheerioAPI</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> scriptTag</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Element) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">scriptTag) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $(scriptTag)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">moduleSrc</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.attr(</span><span style="color:#FFAB70;">&#39;src&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> appendBase </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">microOption</span><span style="color:#B392F0;">.useDevMode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isProduction) {</span></span>
<span class="line"><span style="color:#B392F0;">      appendBase </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;(window.proxy ? (window.proxy.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ + \\&#39;..\\&#39;) : \\&#39;\\&#39;) + &#39;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.removeAttr(</span><span style="color:#FFAB70;">&#39;src&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.removeAttr(</span><span style="color:#FFAB70;">&#39;type&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.html(</span><span style="color:#FFAB70;">\`import(</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">appendBase</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">moduleSrc</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;)\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> script$</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;qiankun-html-transform&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    configResolved (config) {</span></span>
<span class="line"><span style="color:#B392F0;">      isProduction </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.command </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;build&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.isProduction</span></span>
<span class="line"><span style="color:#B392F0;">      base </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.base</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    configureServer (server) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">server</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">middlewares</span><span style="color:#B392F0;">.use((req</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> res</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (isProduction </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">microOption</span><span style="color:#B392F0;">.useDevMode) {</span></span>
<span class="line"><span style="color:#B392F0;">            next()</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">end</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">res</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">end</span><span style="color:#B392F0;">.bind(res)</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">res</span><span style="color:#B392F0;">.end </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">args</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">any</span><span style="color:#B392F0;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> [htmlStr</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">rest] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> args</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> htmlStr </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;string&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">$</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cheerio</span><span style="color:#B392F0;">.load(htmlStr)</span></span>
<span class="line"><span style="color:#B392F0;">              module2DynamicImport($</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> $(</span><span style="color:#FFAB70;">\`script[src=</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">base</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">@vite/client]\`</span><span style="color:#B392F0;">).get(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">))</span></span>
<span class="line"><span style="color:#B392F0;">              htmlStr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">$</span><span style="color:#B392F0;">.html()</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">            end(htmlStr</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">rest)</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">          next()</span></span>
<span class="line"><span style="color:#B392F0;">        })</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    transformIndexHtml (html</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">$</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cheerio</span><span style="color:#B392F0;">.load(html)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">moduleTags</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $(</span><span style="color:#FFAB70;">&#39;body script[type=module], head script[crossorigin=&quot;&quot;]&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">moduleTags </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">moduleTags</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">len</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">moduleTags</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">moduleTags</span><span style="color:#B392F0;">.each((i</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> moduleTag) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> module2DynamicImport($</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> moduleTag)</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (len </span><span style="color:#F97583;">-</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> i) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">?.html(</span><span style="color:#FFAB70;">\`</span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.html()</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">.finally(() =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">            </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">createImportFinallyResolve(qiankunName)</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#FFAB70;">          })\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      $(</span><span style="color:#FFAB70;">&#39;body&#39;</span><span style="color:#B392F0;">).append(</span><span style="color:#FFAB70;">\`&lt;script&gt;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">createQiankunHelper(qiankunName)</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&lt;/script&gt;\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">output</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">$</span><span style="color:#B392F0;">.html()</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> output</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> htmlPlugin</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br></div></div><h2 id="htmlpluginh函数" tabindex="-1"><code>htmlPluginh</code>函数 <a class="header-anchor" href="#htmlpluginh函数" aria-hidden="true">#</a></h2><p>可以看到子应用调用的<code>qiankun</code>函数就是<code>htmlPlugin</code>函数。</p><p><code>transformIndexHtml</code>是vite插件钩子，传入的是vite启动项目的html页面代码</p><p>插件中传入的<code>qiankunName</code>字段用于<code>createImportFinallyResolve</code>和<code>createQiankunHelper</code>函数使用</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">transformIndexHtml</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cheerio</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">moduleTags</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;body script[type=module], head script[crossorigin=&quot;&quot;]&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">moduleTags</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">moduleTags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">len</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">moduleTags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">moduleTags</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">each</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">moduleTag</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">module2DynamicImport</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">moduleTag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">?.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.finally(() =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">            </span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">createImportFinallyResolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">qiankunName</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">          })\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;body&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`&lt;script&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">createQiankunHelper</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">qiankunName</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/script&gt;\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">output</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">output</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;"> transformIndexHtml (html: string) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">$</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cheerio</span><span style="color:#B392F0;">.load(html)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">moduleTags</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $(</span><span style="color:#FFAB70;">&#39;body script[type=module], head script[crossorigin=&quot;&quot;]&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">moduleTags </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">moduleTags</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">len</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">moduleTags</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">moduleTags</span><span style="color:#B392F0;">.each((i</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> moduleTag) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> module2DynamicImport($</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> moduleTag)</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (len </span><span style="color:#F97583;">-</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> i) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">?.html(</span><span style="color:#FFAB70;">\`</span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.html()</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">.finally(() =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">            </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">createImportFinallyResolve(qiankunName)</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#FFAB70;">          })\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      $(</span><span style="color:#FFAB70;">&#39;body&#39;</span><span style="color:#B392F0;">).append(</span><span style="color:#FFAB70;">\`&lt;script&gt;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">createQiankunHelper(qiankunName)</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&lt;/script&gt;\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">output</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">$</span><span style="color:#B392F0;">.html()</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> output</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>可以看到主要功能是往vite的script中插入了代码，<code>&#39;body script[type=module], head script[crossorigin=&quot;&quot;]&#39;</code>这一部分可以会随着vite源码变化而变化，后面有时间看看vite源码相应部分</p><h2 id="module2dynamicimport函数" tabindex="-1"><code>module2DynamicImport</code>函数 <a class="header-anchor" href="#module2dynamicimport函数" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">module2DynamicImport</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">$</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CheerioAPI</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">scriptTag</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Element</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">scriptTag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scriptTag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">moduleSrc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;src&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">appendBase</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">microOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">useDevMode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">appendBase</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;(window.proxy ? (window.proxy.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ + </span><span style="color:#56B6C2;">\\&#39;</span><span style="color:#98C379;">..</span><span style="color:#56B6C2;">\\&#39;</span><span style="color:#98C379;">) : </span><span style="color:#56B6C2;">\\&#39;\\&#39;</span><span style="color:#98C379;">) + &#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAttr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;src&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAttr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;type&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">script$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`import(</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">appendBase</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">moduleSrc</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;)\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">script$</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> module2DynamicImport </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ($</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> CheerioAPI</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> scriptTag</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Element) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">scriptTag) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $(scriptTag)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">moduleSrc</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.attr(</span><span style="color:#FFAB70;">&#39;src&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> appendBase </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">microOption</span><span style="color:#B392F0;">.useDevMode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isProduction) {</span></span>
<span class="line"><span style="color:#B392F0;">      appendBase </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;(window.proxy ? (window.proxy.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ + \\&#39;..\\&#39;) : \\&#39;\\&#39;) + &#39;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.removeAttr(</span><span style="color:#FFAB70;">&#39;src&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.removeAttr(</span><span style="color:#FFAB70;">&#39;type&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">script$</span><span style="color:#B392F0;">.html(</span><span style="color:#FFAB70;">\`import(</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">appendBase</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">moduleSrc</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;)\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> script$</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>module2DynamicImport</code>函数作用是对传入的 HTML 文档中的 <code>&lt;script&gt;</code> 标签进行处理。函数接受两个参数：<code>$</code> 是 Cheerio 库的实例，用于在 HTML 中进行选择和操作；<code>scriptTag</code> 是要处理的 <code>&lt;script&gt;</code> 标签元素。</p><p>获取了 <code>scriptTag</code> 的 <code>src</code> 属性值，即脚本文件的 URL 地址。根据代码中的条件判断，如果 <code>microOption.useDevMode</code> 为真且非生产环境，则在 URL 地址前添加一个相对路径，这个相对路径会根据当前环境中的 <code>window.proxy.__INJECTED_PUBLIC_PATH_BY_QIANKUN__</code> 的值进行动态注入。</p><p>这一步的目的是在开发模式下加载脚本时，根据 Qiankun 微前端框架的注入公共路径来处理脚本的路径。</p><p>接着，函数移除了 <code>scriptTag</code> 的 <code>src</code> 和 <code>type</code> 属性，然后将其内容重新设置为一个动态 <code>import()</code> 语句，用于按需动态加载脚本。在 <code>import()</code> 函数中，会根据 <code>appendBase</code> 变量拼接出完整的脚本路径，并进行动态加载。</p><p>最后，函数返回处理后的 <code>script$</code> 对象，即经过修改后的 <code>&lt;script&gt;</code> 标签的 jQuery 对象。</p><h2 id="createimportfinallyresolve函数与createqiankunhelper函数" tabindex="-1"><code>createImportFinallyResolve</code>函数与<code>createQiankunHelper</code>函数 <a class="header-anchor" href="#createimportfinallyresolve函数与createqiankunhelper函数" aria-hidden="true">#</a></h2><p>将<code>window.moudleQiankunAppLifeCycles</code>上对应的子应用中注册的生命周期函数，挂载到<code> window.proxy</code>上</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createImportFinallyResolve</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">qiankunName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">    const qiankunLifeCycle = window.moudleQiankunAppLifeCycles &amp;&amp; window.moudleQiankunAppLifeCycles[&#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">qiankunName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;];</span></span>
<span class="line"><span style="color:#98C379;">    if (qiankunLifeCycle) {</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy.vitemount((props) =&gt; qiankunLifeCycle.mount(props));</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy.viteunmount((props) =&gt; qiankunLifeCycle.unmount(props));</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy.vitebootstrap(() =&gt; qiankunLifeCycle.bootstrap());</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy.viteupdate((props) =&gt; qiankunLifeCycle.update(props));</span></span>
<span class="line"><span style="color:#98C379;">    }</span></span>
<span class="line"><span style="color:#98C379;">  \`</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> createImportFinallyResolve </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (qiankunName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">    const qiankunLifeCycle = window.moudleQiankunAppLifeCycles &amp;&amp; window.moudleQiankunAppLifeCycles[&#39;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">qiankunName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;];</span></span>
<span class="line"><span style="color:#FFAB70;">    if (qiankunLifeCycle) {</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy.vitemount((props) =&gt; qiankunLifeCycle.mount(props));</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy.viteunmount((props) =&gt; qiankunLifeCycle.unmount(props));</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy.vitebootstrap(() =&gt; qiankunLifeCycle.bootstrap());</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy.viteupdate((props) =&gt; qiankunLifeCycle.update(props));</span></span>
<span class="line"><span style="color:#FFAB70;">    }</span></span>
<span class="line"><span style="color:#FFAB70;">  \`</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>立即执行函数表达式（Immediately Invoked Function Expression，IIFE），也称为自执行函数。该函数在定义后立即执行，不需要通过函数名调用，常用于创建私有作用域，避免污染全局命名空间。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createQiankunHelper</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">qiankunName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">  const createDeffer = (hookName) =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">    const d = new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">      window.proxy &amp;&amp; (window.proxy[</span><span style="color:#56B6C2;">\\\`</span><span style="color:#98C379;">vite</span><span style="color:#56B6C2;">\\$</span><span style="color:#98C379;">{hookName}</span><span style="color:#56B6C2;">\\\`</span><span style="color:#98C379;">] = resolve)</span></span>
<span class="line"><span style="color:#98C379;">    })</span></span>
<span class="line"><span style="color:#98C379;">    return props =&gt; d.then(fn =&gt; fn(props));</span></span>
<span class="line"><span style="color:#98C379;">  }</span></span>
<span class="line"><span style="color:#98C379;">  const bootstrap = createDeffer(&#39;bootstrap&#39;);</span></span>
<span class="line"><span style="color:#98C379;">  const mount = createDeffer(&#39;mount&#39;);</span></span>
<span class="line"><span style="color:#98C379;">  const unmount = createDeffer(&#39;unmount&#39;);</span></span>
<span class="line"><span style="color:#98C379;">  const update = createDeffer(&#39;update&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">  ;(global =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">    global.qiankunName = &#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">qiankunName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;;</span></span>
<span class="line"><span style="color:#98C379;">    global[&#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">qiankunName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;] = {</span></span>
<span class="line"><span style="color:#98C379;">      bootstrap,</span></span>
<span class="line"><span style="color:#98C379;">      mount,</span></span>
<span class="line"><span style="color:#98C379;">      unmount,</span></span>
<span class="line"><span style="color:#98C379;">      update</span></span>
<span class="line"><span style="color:#98C379;">    };</span></span>
<span class="line"><span style="color:#98C379;">  })(window);</span></span>
<span class="line"><span style="color:#98C379;">\`</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> createQiankunHelper </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (qiankunName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">  const createDeffer = (hookName) =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">    const d = new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">      window.proxy &amp;&amp; (window.proxy[\\\`vite\\\${hookName}\\\`] = resolve)</span></span>
<span class="line"><span style="color:#FFAB70;">    })</span></span>
<span class="line"><span style="color:#FFAB70;">    return props =&gt; d.then(fn =&gt; fn(props));</span></span>
<span class="line"><span style="color:#FFAB70;">  }</span></span>
<span class="line"><span style="color:#FFAB70;">  const bootstrap = createDeffer(&#39;bootstrap&#39;);</span></span>
<span class="line"><span style="color:#FFAB70;">  const mount = createDeffer(&#39;mount&#39;);</span></span>
<span class="line"><span style="color:#FFAB70;">  const unmount = createDeffer(&#39;unmount&#39;);</span></span>
<span class="line"><span style="color:#FFAB70;">  const update = createDeffer(&#39;update&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">  ;(global =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">    global.qiankunName = &#39;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">qiankunName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;;</span></span>
<span class="line"><span style="color:#FFAB70;">    global[&#39;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">qiankunName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&#39;] = {</span></span>
<span class="line"><span style="color:#FFAB70;">      bootstrap,</span></span>
<span class="line"><span style="color:#FFAB70;">      mount,</span></span>
<span class="line"><span style="color:#FFAB70;">      unmount,</span></span>
<span class="line"><span style="color:#FFAB70;">      update</span></span>
<span class="line"><span style="color:#FFAB70;">    };</span></span>
<span class="line"><span style="color:#FFAB70;">  })(window);</span></span>
<span class="line"><span style="color:#FFAB70;">\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,23),e=[o];function c(r,t,B,y,F,i){return n(),a("div",null,e)}const m=s(p,[["render",c]]);export{u as __pageData,m as default};
