import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"过滤空值","slug":"过滤空值","link":"#过滤空值","children":[]},{"level":2,"title":"判断是否是数组","slug":"判断是否是数组","link":"#判断是否是数组","children":[]},{"level":2,"title":"字符串数组转数字数组","slug":"字符串数组转数字数组","link":"#字符串数组转数字数组","children":[]},{"level":2,"title":"对树形数组根据某一属性进行过滤","slug":"对树形数组根据某一属性进行过滤","link":"#对树形数组根据某一属性进行过滤","children":[]},{"level":2,"title":"树结构数组转扁平数组","slug":"树结构数组转扁平数组","link":"#树结构数组转扁平数组","children":[]},{"level":2,"title":"为每个节点添加id字段","slug":"为每个节点添加id字段","link":"#为每个节点添加id字段","children":[]}],"relativePath":"2.JS/3.工具函数/数组操作.md","lastUpdated":1720835436690}'),p={name:"2.JS/3.工具函数/数组操作.md"},o=l(`<h2 id="过滤空值" tabindex="-1">过滤空值 <a class="header-anchor" href="#过滤空值" aria-hidden="true">#</a></h2><p>在 JavaScript 中，有一些值被认为是 <code>false</code>，也就是在条件语句中被视为 false 值，这些值包括：</p><ul><li><code>false</code></li><li><code>0</code> （数字零）</li><li><code>&quot;&quot;</code> （空字符串）</li><li><code>null</code></li><li><code>undefined</code></li><li><code>NaN</code>（非数值）</li></ul><p>除了上述值，其他所有值都被视为 <code>true</code></p><p>Boolean函数可以判断是true和false，直接把该函数传给filter，就可以快速过滤空值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Boolean</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;">.filter(Boolean)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="判断是否是数组" tabindex="-1">判断是否是数组 <a class="header-anchor" href="#判断是否是数组" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">Array</span><span style="color:#B392F0;">.isArray(arr)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="字符串数组转数字数组" tabindex="-1">字符串数组转数字数组 <a class="header-anchor" href="#字符串数组转数字数组" aria-hidden="true">#</a></h2><p>Number函数可以将字符串转换成数字，直接把该函数传给map，就可以快速把字符串数组转数字数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;">.map(Number)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="对树形数组根据某一属性进行过滤" tabindex="-1">对树形数组根据某一属性进行过滤 <a class="header-anchor" href="#对树形数组根据某一属性进行过滤" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 递归过滤节点，生成新的树结构</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{Node[]}</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">nodes</span><span style="color:#7F848E;font-style:italic;"> 要过滤的节点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{node =&gt; boolean}</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">predicate</span><span style="color:#7F848E;font-style:italic;"> 过滤条件，符合条件的节点保留</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> 过滤后的节点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">nodes</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">predicate</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 如果已经没有节点了，结束递归</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nodes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">nodes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">newChildren</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nodes</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">predicate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 如果节点符合条件，直接加入新的节点集</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">newChildren</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">predicate</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 如果当前节点不符合条件，递归过滤子节点，</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 把符合条件的子节点提升上来，并入新节点集</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">newChildren</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(...</span><span style="color:#61AFEF;">deal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">predicate</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">newChildren</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">resName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * 递归过滤节点，生成新的树结构</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{Node[]}</span><span style="color:#6B737C;"> nodes 要过滤的节点</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{node =&gt; boolean}</span><span style="color:#6B737C;"> predicate 过滤条件，符合条件的节点保留</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6B737C;"> 过滤后的节点</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> deal(nodes</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> predicate) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 如果已经没有节点了，结束递归</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">(nodes </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">nodes</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">)) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> []</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">newChildren</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> []</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> nodes) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (predicate(node)) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">// 如果节点符合条件，直接加入新的节点集</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">newChildren</span><span style="color:#B392F0;">.push(node)</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.children </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> deal(</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.children</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> predicate)</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">// 如果当前节点不符合条件，递归过滤子节点，</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">// 把符合条件的子节点提升上来，并入新节点集</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">newChildren</span><span style="color:#B392F0;">.push(</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">deal(</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.children</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> predicate))</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> newChildren</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">result</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> deal(data</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> node </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">resName</span><span style="color:#B392F0;">.includes(</span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.stringify(result</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="树结构数组转扁平数组" tabindex="-1">树结构数组转扁平数组 <a class="header-anchor" href="#树结构数组转扁平数组" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">treeToArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">tree</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">recursiveFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">tree</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">tree</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tree</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">tree</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tree</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">recursiveFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tree</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">recursiveFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tree</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> treeToArray(tree) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [];</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> recursiveFunction(tree) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> i </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">tree</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">; i</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;">.push(tree[i]);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (tree[i].children </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> tree[i].</span><span style="color:#79B8FF;">children</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        recursiveFunction(tree[i].children);</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  recursiveFunction(tree);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> arr;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="为每个节点添加id字段" tabindex="-1">为每个节点添加id字段 <a class="header-anchor" href="#为每个节点添加id字段" aria-hidden="true">#</a></h2><p>数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addIdField</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">nodes</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parentId</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">nodes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">currentId</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parentId</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">parentId</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">,</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">currentId</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">addIdField</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">currentId</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nodes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          };</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;"> </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> addIdField </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (nodes</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> parentId </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">nodes</span><span style="color:#B392F0;">.forEach(node </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">currentId</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> parentId </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">parentId</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">,</span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.name</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.name;</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.id </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> currentId;</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">Children</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                addIdField(</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.Children</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> currentId);</span></span>
<span class="line"><span style="color:#B392F0;">              }</span></span>
<span class="line"><span style="color:#B392F0;">            });</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> nodes;</span></span>
<span class="line"><span style="color:#B392F0;">          };</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addIdToTree</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">tree</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addIdToNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parentId</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parentId</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parentId</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;,&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">newNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Children</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">newNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Children</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addIdToNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">newNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            };</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addIdToNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tree</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> addIdToTree(tree) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> addIdToNode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (node</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> parentId) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">id</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> parentId </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> parentId </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;,&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.name;</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">newNode</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> { </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">node</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> id };</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.Children </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">Children</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">newNode</span><span style="color:#B392F0;">.Children </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">Children</span><span style="color:#B392F0;">.map(child </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> addIdToNode(child</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> id));</span></span>
<span class="line"><span style="color:#B392F0;">              }</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> newNode;</span></span>
<span class="line"><span style="color:#B392F0;">            };</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> addIdToNode(tree</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,20),e=[o];function r(c,t,B,y,F,i){return n(),a("div",null,e)}const C=s(p,[["render",r]]);export{A as __pageData,C as default};
