import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const b=JSON.parse('{"title":"vue源码阅读","description":"","frontmatter":{},"headers":[{"level":2,"title":"vue初始化","slug":"vue初始化","link":"#vue初始化","children":[]},{"level":2,"title":"this instanceof Vue","slug":"this-instanceof-vue","link":"#this-instanceof-vue","children":[{"level":3,"title":"this","slug":"this","link":"#this","children":[]},{"level":3,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":3,"title":"this instanceof Vue相当于this.__proto__和Vue.prototype","slug":"this-instanceof-vue相当于this-proto-和vue-prototype","link":"#this-instanceof-vue相当于this-proto-和vue-prototype","children":[]}]},{"level":2,"title":"initMixin","slug":"initmixin","link":"#initmixin","children":[]},{"level":2,"title":"Snabbdom","slug":"snabbdom","link":"#snabbdom","children":[{"level":3,"title":"什么是虚拟DOM","slug":"什么是虚拟dom","link":"#什么是虚拟dom","children":[]},{"level":3,"title":"为什么需要虚拟DOM","slug":"为什么需要虚拟dom","link":"#为什么需要虚拟dom","children":[]},{"level":3,"title":"Snabbdom的核心","slug":"snabbdom的核心","link":"#snabbdom的核心","children":[]},{"level":3,"title":"VNode","slug":"vnode","link":"#vnode","children":[]}]},{"level":2,"title":"nextTick","slug":"nexttick","link":"#nexttick","children":[]},{"level":2,"title":"v-model","slug":"v-model","link":"#v-model","children":[]}],"relativePath":"3.框架/1.vue/15.源码阅读.md","lastUpdated":1720835436690}'),p={name:"3.框架/1.vue/15.源码阅读.md"},o=l(`<h1 id="vue源码阅读" tabindex="-1">vue源码阅读 <a class="header-anchor" href="#vue源码阅读" aria-hidden="true">#</a></h1><blockquote><p>基于2.6.14版本源码学习，打开源码，会发现js文件中有大量类似ts语法的代码</p><p>实际上这是使用flow的语法，vue2使用flow来提供类型支持</p><p>flow是facebook 出品的 JavaScript 静态类型检查工具</p></blockquote><p>Vue本质是将标签当成字符串来处理的，借助mustache模板解析来对模板字符串进行处理，是将模板字符串转为AST语法树，最后AST变成渲染函数，然后渲染函数生成虚拟节点，虚拟节点再进行diff算法，将虚拟DOM转为真实DOM，而成渲染到界面</p><h2 id="vue初始化" tabindex="-1">vue初始化 <a class="header-anchor" href="#vue初始化" aria-hidden="true">#</a></h2><p><code>src/core/instance/index.js</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">initMixin</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./init&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">stateMixin</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./state&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">renderMixin</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./render&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">eventsMixin</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./events&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">lifecycleMixin</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./lifecycle&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">warn</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;../util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Vue</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 不是生产环境并且没有用new关键词调用Vue</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;production&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  ) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Vue is a constructor and should be called with the \`new\` keyword&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_init</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">initMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">stateMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">eventsMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">lifecycleMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">renderMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Vue</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { initMixin } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./init&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { stateMixin } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./state&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { renderMixin } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./render&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { eventsMixin } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./events&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { lifecycleMixin } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./lifecycle&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { warn } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;../util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> Vue (options) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 不是生产环境并且没有用new关键词调用Vue</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">process</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">env</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;production&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> Vue)</span></span>
<span class="line"><span style="color:#B392F0;">  ) {</span></span>
<span class="line"><span style="color:#B392F0;">    warn(</span><span style="color:#FFAB70;">&#39;Vue is a constructor and should be called with the \`new\` keyword&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">._init(options)</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">initMixin(Vue)</span></span>
<span class="line"><span style="color:#B392F0;">stateMixin(Vue)</span></span>
<span class="line"><span style="color:#B392F0;">eventsMixin(Vue)</span></span>
<span class="line"><span style="color:#B392F0;">lifecycleMixin(Vue)</span></span>
<span class="line"><span style="color:#B392F0;">renderMixin(Vue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> Vue</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>可以看到源码中，通过<code>this instanceof Vue</code>来判断有没有用new关键词调用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;production&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Vue is a constructor and should be called with the \`new\` keyword&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">process</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">env</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;production&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F97583;">!</span><span style="color:#B392F0;">(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> Vue)</span></span>
<span class="line"><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    warn(</span><span style="color:#FFAB70;">&#39;Vue is a constructor and should be called with the \`new\` keyword&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="this-instanceof-vue" tabindex="-1">this instanceof Vue <a class="header-anchor" href="#this-instanceof-vue" aria-hidden="true">#</a></h2><h3 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-hidden="true">#</a></h3><p>在 JavaScript 中，this 是动态绑定，或称为运行期绑定的，它可以是全局对象、当前对象或者任意对象，这取决于函数的调用方式。函数的调用有以下几种方式：作为对象方法调用，作为函数调用，作为构造函数调用，和使用 apply 或 call 调用</p><h4 id="_1、作为对象方法调用" tabindex="-1">1、作为对象方法调用 <a class="header-anchor" href="#_1、作为对象方法调用" aria-hidden="true">#</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">point</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">moveTo</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">point</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">moveTo</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> point </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  x</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  y</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  moveTo</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (x</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> y) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.x </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.x </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> x;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.y </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.y </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> y;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">point</span><span style="color:#B392F0;">.moveTo());</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>point.moveTo(1, 1)</code> this 绑定到当前对象，即 point 对象</p><p><strong>2、作为函数调用</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">makeNoSense</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;">} </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">makeNoSense</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">// 调用函数的对象是window,所以x 已经成为一个值为 5 的全局变量</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> makeNoSense(y) { </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.x </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> y; </span></span>
<span class="line"><span style="color:#B392F0;">} </span></span>
<span class="line"><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#B392F0;">makeNoSense(</span><span style="color:#F8F8F8;">5</span><span style="color:#B392F0;">); </span></span>
<span class="line"><span style="color:#B392F0;">x;</span><span style="color:#6B737C;">// 调用函数的对象是window,所以x 已经成为一个值为 5 的全局变量</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>下面，我们看另一种情况</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">point</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">x </span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">y </span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">moveTo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 内部函数</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">moveX</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//this 绑定到了哪里？</span></span>
<span class="line"><span style="color:#ABB2BF;">       }; </span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#7F848E;font-style:italic;">// 内部函数</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">moveY</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//this 绑定到了哪里？</span></span>
<span class="line"><span style="color:#ABB2BF;">       }; </span></span>
<span class="line"><span style="color:#ABB2BF;">     </span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#61AFEF;">moveX</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#61AFEF;">moveY</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#ABB2BF;">       } </span></span>
<span class="line"><span style="color:#ABB2BF;">}; </span></span>
<span class="line"><span style="color:#E5C07B;">point</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">moveTo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#E5C07B;">point</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//==&gt;0 </span></span>
<span class="line"><span style="color:#E5C07B;">point</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//==&gt;0 </span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//==&gt;1 </span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//==&gt;1</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> point </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> { </span></span>
<span class="line"><span style="color:#B392F0;">    x </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#B392F0;">    y </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#B392F0;">    moveTo </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(x</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> y) { </span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 内部函数</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> moveX </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(x) { </span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.x </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> x;</span><span style="color:#6B737C;">//this 绑定到了哪里？</span></span>
<span class="line"><span style="color:#B392F0;">       }; </span></span>
<span class="line"><span style="color:#B392F0;">       </span><span style="color:#6B737C;">// 内部函数</span></span>
<span class="line"><span style="color:#B392F0;">       </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> moveY </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(y) { </span></span>
<span class="line"><span style="color:#B392F0;">       </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.y </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> y;</span><span style="color:#6B737C;">//this 绑定到了哪里？</span></span>
<span class="line"><span style="color:#B392F0;">       }; </span></span>
<span class="line"><span style="color:#B392F0;">     </span></span>
<span class="line"><span style="color:#B392F0;">       moveX(x); </span></span>
<span class="line"><span style="color:#B392F0;">       moveY(y); </span></span>
<span class="line"><span style="color:#B392F0;">       } </span></span>
<span class="line"><span style="color:#B392F0;">}; </span></span>
<span class="line"><span style="color:#79B8FF;">point</span><span style="color:#B392F0;">.moveTo(</span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">); </span></span>
<span class="line"><span style="color:#79B8FF;">point</span><span style="color:#B392F0;">.x; </span><span style="color:#6B737C;">//==&gt;0 </span></span>
<span class="line"><span style="color:#79B8FF;">point</span><span style="color:#B392F0;">.y; </span><span style="color:#6B737C;">//==&gt;0 </span></span>
<span class="line"><span style="color:#B392F0;">x; </span><span style="color:#6B737C;">//==&gt;1 </span></span>
<span class="line"><span style="color:#B392F0;">y; </span><span style="color:#6B737C;">//==&gt;1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>this除了指向它的直接调用者外，还有一种情况就是如果没有明确的调用对象的时候，将对函数的this使用默认绑定：绑定到全局的window对象。</p><p>3、作为构造函数调用</p><p>我们需要理解的是，new运算符做了什么：</p><p>第一步: 创建一个空的对象，{}。 第二步: 链接该对象（即设置该对象的构造函数）到另一个对象，即o._<em>proto</em>_ == Point.prototype。 第三步: 将步骤1新创建的对象作为this的上下文 第四步: 如果该函数没有返回对象，则返回this</p><p>4、使用 apply 或 call 调用</p><p>apply和call可以切换函数执行的上下文环境（context）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">del</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">add</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">del</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 4</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> add(x</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> y) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(x </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> y)</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> del(x</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> y) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(x </span><span style="color:#F97583;">-</span><span style="color:#B392F0;"> y)</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">add</span><span style="color:#B392F0;">.call(del</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">3</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">) </span><span style="color:#6B737C;">// 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-hidden="true">#</a></h3><p>1、通常来讲，使用 instanceof 就是判断一个实例是否属于某种类型，比如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 判断 foo 是否是 Foo 类的实例</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Foo</span><span style="color:#ABB2BF;">(){} </span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Foo</span><span style="color:#ABB2BF;">(); </span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Foo</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// 判断 foo 是否是 Foo 类的实例</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> Foo(){} </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> foo </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Foo(); </span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(foo </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> Foo) </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>2、另外，更重要的一点是 instanceof 可以在继承关系中用来判断一个实例是否属于它的父类型。例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 判断 foo 是否是 Foo 类的实例 , 并且是否是其父类型的实例</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Aoo</span><span style="color:#ABB2BF;">(){} </span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Foo</span><span style="color:#ABB2BF;">(){} </span></span>
<span class="line"><span style="color:#E5C07B;">Foo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Aoo</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//JavaScript 原型继承</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Foo</span><span style="color:#ABB2BF;">(); </span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Foo</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//true </span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Aoo</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// 判断 foo 是否是 Foo 类的实例 , 并且是否是其父类型的实例</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> Aoo(){} </span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> Foo(){} </span></span>
<span class="line"><span style="color:#79B8FF;">Foo</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Aoo(); </span><span style="color:#6B737C;">//JavaScript 原型继承</span></span>
<span class="line"><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> foo </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Foo(); </span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(foo </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> Foo)</span><span style="color:#6B737C;">//true </span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(foo </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> Aoo)</span><span style="color:#6B737C;">//true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面的代码中是判断了一层继承关系中的父类，在多层继承关系中，instanceof 运算符同样适用</p><p>3、ECMAScript 中 <code>instanceof</code> 的定义</p><blockquote><p>11.8.6 The instanceof operator The production RelationalExpression:</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E06C75;">RelationalExpression</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ShiftExpression</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">evaluated</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">follows</span><span style="color:#ABB2BF;">: </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Evaluate</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">RelationalExpression</span><span style="color:#ABB2BF;">. </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Call</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetValue</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Result</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)).</span><span style="color:#7F848E;font-style:italic;">// 调用 GetValue 方法得到 Result(1) 的值，设为 Result(2) </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Evaluate</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">ShiftExpression</span><span style="color:#ABB2BF;">. </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Call</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetValue</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Result</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)).</span><span style="color:#7F848E;font-style:italic;">// 同理，这里设为 Result(4) </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">If</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Result</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">an</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">TypeError</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">exception</span><span style="color:#ABB2BF;">.</span><span style="color:#7F848E;font-style:italic;">// 如果 Result(4) 不是 object，</span></span>
<span class="line"><span style="color:#ABB2BF;">                                                                </span><span style="color:#7F848E;font-style:italic;">//抛出异常</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">/* 如果 Result(4) 没有 [[HasInstance]] 方法，抛出异常。规范中的所有 [[...]] 方法或者属性都是内部的，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">在 JavaScript 中不能直接使用。并且规范中说明，只有 Function 对象实现了 [[HasInstance]] 方法。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">所以这里可以简单的理解为：如果 Result(4) 不是 Function 对象，抛出异常 */</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">If</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Result</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">does</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">have</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> [[</span><span style="color:#E06C75;">HasInstance</span><span style="color:#ABB2BF;">]] </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">TypeError</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">exception</span><span style="color:#ABB2BF;">. </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 相当于这样调用：Result(4).[[HasInstance]](Result(2)) </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">7.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Call</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">the</span><span style="color:#ABB2BF;"> [[</span><span style="color:#E06C75;">HasInstance</span><span style="color:#ABB2BF;">]] </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Result</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parameter</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Result</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">). </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Result</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">). </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 相关的 HasInstance 方法定义</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">15.3</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5.3</span><span style="color:#ABB2BF;"> [[</span><span style="color:#E06C75;">HasInstance</span><span style="color:#ABB2BF;">]] (</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Assume</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Function</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">.</span><span style="color:#7F848E;font-style:italic;">// 这里 F 就是上面的 Result(4)，V 是 Result(2) </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">When</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">the</span><span style="color:#ABB2BF;"> [[</span><span style="color:#E06C75;">HasInstance</span><span style="color:#ABB2BF;">]] </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">called</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#E06C75;">the</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">following</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">steps</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">are</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">taken</span><span style="color:#ABB2BF;">: </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">If</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">an</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">false</span><span style="color:#ABB2BF;">.</span><span style="color:#7F848E;font-style:italic;">// 如果 V 不是 object，直接返回 false </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Call</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">the</span><span style="color:#ABB2BF;"> [[</span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;">]] </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;prototype&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#7F848E;font-style:italic;">// 用 [[Get]] 方法取 </span></span>
<span class="line"><span style="color:#ABB2BF;">                                                                </span><span style="color:#7F848E;font-style:italic;">// F 的 prototype 属性</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Let</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">O</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">be</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Result</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">).</span><span style="color:#7F848E;font-style:italic;">//O = F.[[Get]](&quot;prototype&quot;) </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">If</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">O</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">an</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">TypeError</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">exception</span><span style="color:#ABB2BF;">. </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Let</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">be</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">the</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">the</span><span style="color:#ABB2BF;"> [[</span><span style="color:#E06C75;">Prototype</span><span style="color:#ABB2BF;">]] </span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">.</span><span style="color:#7F848E;font-style:italic;">//V = V.[[Prototype]] </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">If</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">false</span><span style="color:#ABB2BF;">. </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 这里是关键，如果 O 和 V 引用的是同一个对象，则返回 true；否则，到 Step 8 返回 Step 5 继续循环</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">7.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">If</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">O</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">and</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">refer</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">the</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">same</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">or</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">they</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">refer</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">objects</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#E06C75;">joined</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">each</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">other</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">section</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">13.1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">true</span><span style="color:#ABB2BF;">. </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8.</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Go</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">step</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5.</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">RelationalExpression </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> ShiftExpression is evaluated as follows: </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1.</span><span style="color:#B392F0;"> Evaluate RelationalExpression. </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2.</span><span style="color:#B392F0;"> Call GetValue(Result(</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">)).</span><span style="color:#6B737C;">// 调用 GetValue 方法得到 Result(1) 的值，设为 Result(2) </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">3.</span><span style="color:#B392F0;"> Evaluate ShiftExpression. </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">4.</span><span style="color:#B392F0;"> Call GetValue(Result(</span><span style="color:#F8F8F8;">3</span><span style="color:#B392F0;">)).</span><span style="color:#6B737C;">// 同理，这里设为 Result(4) </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">5.</span><span style="color:#B392F0;"> If Result(</span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">) is not an object</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> a TypeError exception.</span><span style="color:#6B737C;">// 如果 Result(4) 不是 object，</span></span>
<span class="line"><span style="color:#B392F0;">                                                                </span><span style="color:#6B737C;">//抛出异常</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#6B737C;">/* 如果 Result(4) 没有 [[HasInstance]] 方法，抛出异常。规范中的所有 [[...]] 方法或者属性都是内部的，</span></span>
<span class="line"><span style="color:#6B737C;">在 JavaScript 中不能直接使用。并且规范中说明，只有 Function 对象实现了 [[HasInstance]] 方法。</span></span>
<span class="line"><span style="color:#6B737C;">所以这里可以简单的理解为：如果 Result(4) 不是 Function 对象，抛出异常 */</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">6.</span><span style="color:#B392F0;"> If Result(</span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">) does not have a [[HasInstance]] method</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> a TypeError exception. </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 相当于这样调用：Result(4).[[HasInstance]](Result(2)) </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">7.</span><span style="color:#B392F0;"> Call the [[HasInstance]] method </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> Result(</span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">with</span><span style="color:#B392F0;"> parameter Result(</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">). </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">8.</span><span style="color:#B392F0;"> Return Result(</span><span style="color:#F8F8F8;">7</span><span style="color:#B392F0;">). </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 相关的 HasInstance 方法定义</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">15.3</span><span style="color:#B392F0;">.</span><span style="color:#F8F8F8;">5.3</span><span style="color:#B392F0;"> [[HasInstance]] (</span><span style="color:#79B8FF;">V</span><span style="color:#B392F0;">) </span></span>
<span class="line"><span style="color:#B392F0;"> Assume </span><span style="color:#79B8FF;">F</span><span style="color:#B392F0;"> is a Function object.</span><span style="color:#6B737C;">// 这里 F 就是上面的 Result(4)，V 是 Result(2) </span></span>
<span class="line"><span style="color:#B392F0;"> When the [[HasInstance]] method </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">F</span><span style="color:#B392F0;"> is called </span><span style="color:#F97583;">with</span><span style="color:#B392F0;"> value </span><span style="color:#79B8FF;">V</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#B392F0;">     the following steps are taken</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1.</span><span style="color:#B392F0;"> If </span><span style="color:#79B8FF;">V</span><span style="color:#B392F0;"> is not an object</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> false.</span><span style="color:#6B737C;">// 如果 V 不是 object，直接返回 false </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2.</span><span style="color:#B392F0;"> Call the [[Get]] method </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">F</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">with</span><span style="color:#B392F0;"> property name </span><span style="color:#FFAB70;">&quot;prototype&quot;</span><span style="color:#B392F0;">.</span><span style="color:#6B737C;">// 用 [[Get]] 方法取 </span></span>
<span class="line"><span style="color:#B392F0;">                                                                </span><span style="color:#6B737C;">// F 的 prototype 属性</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">3.</span><span style="color:#B392F0;"> Let </span><span style="color:#79B8FF;">O</span><span style="color:#B392F0;"> be Result(</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">).</span><span style="color:#6B737C;">//O = F.[[Get]](&quot;prototype&quot;) </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">4.</span><span style="color:#B392F0;"> If </span><span style="color:#79B8FF;">O</span><span style="color:#B392F0;"> is not an object</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> a TypeError exception. </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">5.</span><span style="color:#B392F0;"> Let </span><span style="color:#79B8FF;">V</span><span style="color:#B392F0;"> be the value </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> the [[Prototype]] property </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">V</span><span style="color:#B392F0;">.</span><span style="color:#6B737C;">//V = V.[[Prototype]] </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">6.</span><span style="color:#B392F0;"> If </span><span style="color:#79B8FF;">V</span><span style="color:#B392F0;"> is </span><span style="color:#79B8FF;">null</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> false. </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这里是关键，如果 O 和 V 引用的是同一个对象，则返回 true；否则，到 Step 8 返回 Step 5 继续循环</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">7.</span><span style="color:#B392F0;"> If </span><span style="color:#79B8FF;">O</span><span style="color:#B392F0;"> and </span><span style="color:#79B8FF;">V</span><span style="color:#B392F0;"> refer to the same object or </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> they refer to objects </span></span>
<span class="line"><span style="color:#B392F0;">   joined to each other (section </span><span style="color:#F8F8F8;">13.1</span><span style="color:#B392F0;">.</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> true. </span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">8.</span><span style="color:#B392F0;"> Go to step </span><span style="color:#F8F8F8;">5.</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>翻译成 JavaScript 代码如下所示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">instance_of</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">L</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">R</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">// L 表示左表达式，R 表示右表达式</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">O</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;	</span><span style="color:#7F848E;font-style:italic;">// 取 R 的显示原型</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">L</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">L</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">;		</span><span style="color:#7F848E;font-style:italic;">// 取 L 的隐式原型</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">L</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">O</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">L</span><span style="color:#ABB2BF;">)	</span><span style="color:#7F848E;font-style:italic;">// 这里重点：当 O 严格等于 L 时，返回 true </span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#E5C07B;">L</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">L</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;"> } </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> instance_of(L</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> R) {  </span><span style="color:#6B737C;">// L 表示左表达式，R 表示右表达式</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">O</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">R</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">;	</span><span style="color:#6B737C;">// 取 R 的显示原型</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">L</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">L</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">;		</span><span style="color:#6B737C;">// 取 L 的隐式原型</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#F97583;">while</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">) { </span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">L</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">) </span></span>
<span class="line"><span style="color:#B392F0;">     </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">; </span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">O</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">L</span><span style="color:#B392F0;">)	</span><span style="color:#6B737C;">// 这里重点：当 O 严格等于 L 时，返回 true </span></span>
<span class="line"><span style="color:#B392F0;">     </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">; </span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#79B8FF;">L</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">L</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">; </span></span>
<span class="line"><span style="color:#B392F0;"> } </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>从代码中我们可以看到，instanceof 是比较左侧的 <strong>proto</strong> (隐式原型)和右侧的 prototype (显示原型)是否相等，如果不相等，取左侧 <strong>proto</strong> 的 <strong>proto</strong> ，依次循环比较，直到取到 Object.prototype.<strong>proto</strong> 即 null 为止</p><h3 id="this-instanceof-vue相当于this-proto-和vue-prototype" tabindex="-1">this instanceof Vue相当于this.__proto__和Vue.prototype <a class="header-anchor" href="#this-instanceof-vue相当于this-proto-和vue-prototype" aria-hidden="true">#</a></h3><p><strong>我们可以这么分解：</strong></p><ul><li>没有使用new</li></ul><p>this指向window，结果为false</p><ul><li>使用了new</li></ul><p>回到上面作为构造函数调用：</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">    第一步: </span><span style="color:#E5C07B;">创建一个空的对象</span><span style="color:#ABB2BF;">，vat o </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">    第二步: </span><span style="color:#E5C07B;">链接该对象</span><span style="color:#ABB2BF;">（即设置该对象的构造函数）到另一个对象，即o.__proto__ </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> Vue.prototype</span></span>
<span class="line"><span style="color:#ABB2BF;">    第三步: </span><span style="color:#E5C07B;">将步骤1新创建的对象作为this的上下文</span></span>
<span class="line"><span style="color:#ABB2BF;">    第四步: </span><span style="color:#E5C07B;">如果该函数没有返回对象</span><span style="color:#ABB2BF;">，则返回this</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">    第一步: 创建一个空的对象，vat o </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {}</span></span>
<span class="line"><span style="color:#B392F0;">    第二步: 链接该对象（即设置该对象的构造函数）到另一个对象，即o.__proto__ </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> Vue.prototype</span></span>
<span class="line"><span style="color:#B392F0;">    第三步: 将步骤1新创建的对象作为this的上下文</span></span>
<span class="line"><span style="color:#B392F0;">    第四步: 如果该函数没有返回对象，则返回this</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>所以，结果可以看做这样：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">o</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">  </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>所以如果用new操作符的话，this instanceof Vue结果为true</p><h2 id="initmixin" tabindex="-1">initMixin <a class="header-anchor" href="#initmixin" aria-hidden="true">#</a></h2><blockquote><p>打开源码src/core/instance/init.js</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* @flow */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;../config&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">initProxy</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./proxy&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">initState</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./state&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">initRender</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./render&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">initEvents</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./events&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">mark</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">measure</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;../util/perf&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">initLifecycle</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">callHook</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./lifecycle&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">initProvide</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initInjections</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./inject&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">extend</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mergeOptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">formatComponentName</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;../util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">uid</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initMixin</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_init</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// a uid</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_uid</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">uid</span><span style="color:#56B6C2;">++</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">startTag</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">endTag</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;production&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">performance</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mark</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">startTag</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`vue-perf-start:</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_uid</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">endTag</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`vue-perf-end:</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_uid</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">mark</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">startTag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// a flag to avoid this being observed</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_isVue</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// merge options</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_isComponent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// optimize internal component instantiation</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// since dynamic options merging is pretty slow, and none of the</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// internal component options needs special treatment.</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">initInternalComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeOptions</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">resolveConstructorOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">vm</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/* istanbul ignore else */</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;production&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">initProxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_renderProxy</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">vm</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// expose real self</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_self</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">vm</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">initLifecycle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">initEvents</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">initRender</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;beforeCreate&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">initInjections</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">initState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">initProvide</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;created&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;production&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">performance</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mark</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">formatComponentName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">mark</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">endTag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">measure</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`vue </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> init\`</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">startTag</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">endTag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$mount</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initInternalComponent</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">InternalComponentOptions</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// doing this because it&#39;s faster than dynamic enumeration.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">parentVnode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_parentVnode</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_parentVnode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parentVnode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vnodeComponentOptions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">parentVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">componentOptions</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">propsData</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vnodeComponentOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">propsData</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_parentListeners</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vnodeComponentOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">listeners</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_renderChildren</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vnodeComponentOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_componentTag</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vnodeComponentOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">staticRenderFns</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">staticRenderFns</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resolveConstructorOptions</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">Ctor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">super</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">superOptions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resolveConstructorOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">super</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cachedSuperOptions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">superOptions</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">superOptions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">cachedSuperOptions</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// super option changed,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// need to resolve new options.</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">superOptions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">superOptions</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// check if there are any late-modified/attached options (#4976)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">modifiedOptions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resolveModifiedOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// update base extend options</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">modifiedOptions</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extendOptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">modifiedOptions</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">superOptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extendOptions</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">components</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Ctor</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">options</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resolveModifiedOptions</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">Ctor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt;): </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">modified</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">latest</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sealed</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sealedOptions</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">latest</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">latest</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">sealed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">modified</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">modified</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">modified</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">latest</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">modified</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">/* @flow */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> config </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;../config&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { initProxy } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./proxy&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { initState } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./state&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { initRender } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./render&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { initEvents } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./events&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { mark</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> measure } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;../util/perf&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { initLifecycle</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> callHook } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./lifecycle&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { initProvide</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> initInjections } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./inject&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { extend</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> mergeOptions</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> formatComponentName } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;../util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> uid </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> initMixin (Vue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Class&lt;Component&gt;) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">._init </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Object) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Component </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// a uid</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">._uid </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> uid</span><span style="color:#F97583;">++</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> startTag</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> endTag</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">process</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">env</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;production&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.performance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> mark) {</span></span>
<span class="line"><span style="color:#B392F0;">      startTag </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`vue-perf-start:</span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">._uid</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#B392F0;">      endTag </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`vue-perf-end:</span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">._uid</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#B392F0;">      mark(startTag)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// a flag to avoid this being observed</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">._isVue </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// merge options</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (options </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">._isComponent) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// optimize internal component instantiation</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// since dynamic options merging is pretty slow, and none of the</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// internal component options needs special treatment.</span></span>
<span class="line"><span style="color:#B392F0;">      initInternalComponent(vm</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> options)</span></span>
<span class="line"><span style="color:#B392F0;">    } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">.$options </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mergeOptions(</span></span>
<span class="line"><span style="color:#B392F0;">        resolveConstructorOptions(</span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        options </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> {}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        vm</span></span>
<span class="line"><span style="color:#B392F0;">      )</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">/* istanbul ignore else */</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">process</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">env</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;production&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      initProxy(vm)</span></span>
<span class="line"><span style="color:#B392F0;">    } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">._renderProxy </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> vm</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// expose real self</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">._self </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> vm</span></span>
<span class="line"><span style="color:#B392F0;">    initLifecycle(vm)</span></span>
<span class="line"><span style="color:#B392F0;">    initEvents(vm)</span></span>
<span class="line"><span style="color:#B392F0;">    initRender(vm)</span></span>
<span class="line"><span style="color:#B392F0;">    callHook(vm</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;beforeCreate&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    initInjections(vm) </span><span style="color:#6B737C;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#B392F0;">    initState(vm)</span></span>
<span class="line"><span style="color:#B392F0;">    initProvide(vm) </span><span style="color:#6B737C;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#B392F0;">    callHook(vm</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;created&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">process</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">env</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;production&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.performance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> mark) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">._name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> formatComponentName(vm</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">      mark(endTag)</span></span>
<span class="line"><span style="color:#B392F0;">      measure(</span><span style="color:#FFAB70;">\`vue </span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">._name</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;"> init\`</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> startTag</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> endTag)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">$options</span><span style="color:#B392F0;">.el) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">.$mount(</span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">$options</span><span style="color:#B392F0;">.el)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> initInternalComponent (vm</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Component</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> options</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InternalComponentOptions) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">.$options </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.create(</span><span style="color:#79B8FF;">vm</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;">.options)</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// doing this because it&#39;s faster than dynamic enumeration.</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">parentVnode</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">._parentVnode</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">.parent </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.parent</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">._parentVnode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> parentVnode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">vnodeComponentOptions</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">parentVnode</span><span style="color:#B392F0;">.componentOptions</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">.propsData </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">vnodeComponentOptions</span><span style="color:#B392F0;">.propsData</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">._parentListeners </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">vnodeComponentOptions</span><span style="color:#B392F0;">.listeners</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">._renderChildren </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">vnodeComponentOptions</span><span style="color:#B392F0;">.children</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">._componentTag </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">vnodeComponentOptions</span><span style="color:#B392F0;">.tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.render) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">.render </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.render</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">.staticRenderFns </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.staticRenderFns</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> resolveConstructorOptions (Ctor</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Class&lt;Component&gt;) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> options </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.options</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.super) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">superOptions</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> resolveConstructorOptions(</span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.super)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cachedSuperOptions</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.superOptions</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (superOptions </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> cachedSuperOptions) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// super option changed,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// need to resolve new options.</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.superOptions </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> superOptions</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// check if there are any late-modified/attached options (#4976)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">modifiedOptions</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> resolveModifiedOptions(Ctor)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// update base extend options</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (modifiedOptions) {</span></span>
<span class="line"><span style="color:#B392F0;">        extend(</span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.extendOptions</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> modifiedOptions)</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">      options </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.options </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mergeOptions(superOptions</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.extendOptions)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.name) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.components[</span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.name] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Ctor</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> options</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> resolveModifiedOptions (Ctor</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Class&lt;Component&gt;)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Object {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> modified</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">latest</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.options</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sealed</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Ctor</span><span style="color:#B392F0;">.sealedOptions</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">key</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> latest) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (latest[key] </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> sealed[key]) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">modified) modified </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {}</span></span>
<span class="line"><span style="color:#B392F0;">      modified[key] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> latest[key]</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> modified</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br></div></div><h2 id="snabbdom" tabindex="-1">Snabbdom <a class="header-anchor" href="#snabbdom" aria-hidden="true">#</a></h2><blockquote><p><code>Vue</code>中的虚拟DOM是改造<code>Snabbdom</code>实现的</p></blockquote><h3 id="什么是虚拟dom" tabindex="-1">什么是虚拟DOM <a class="header-anchor" href="#什么是虚拟dom" aria-hidden="true">#</a></h3><p>是一层对真实<code>DOM</code>的抽象，以<code>JavaScript</code> 对象 (<code>VNode</code> 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上</p><p>在<code>Javascript</code>对象中，虚拟<code>DOM</code> 表现为一个 <code>Object</code>对象。并且最少包含标签名 (<code>tag</code>)、属性 (<code>attrs</code>) 和子元素对象 (<code>children</code>) 三个属性，不同框架对这三个属性的命名可能会有差别</p><p>创建虚拟<code>DOM</code>就是为了更好将虚拟的节点渲染到页面视图中，所以虚拟<code>DOM</code>对象的节点与真实<code>DOM</code>的属性一一照应</p><p>通过<code>VNode</code>，<code>vue</code>可以对这颗抽象树进行创建节点,删除节点以及修改节点的操作， 经过<code>diff</code>算法得出一些需要修改的最小单位,再更新视图，减少了<code>dom</code>操作，提高了性能</p><h3 id="为什么需要虚拟dom" tabindex="-1">为什么需要虚拟DOM <a class="header-anchor" href="#为什么需要虚拟dom" aria-hidden="true">#</a></h3><p><code>DOM</code>是很慢的，其元素非常庞大，页面的性能问题，大部分都是由<code>DOM</code>操作引起的</p><p>真实的<code>DOM</code>节点，哪怕一个最简单的<code>div</code>也包含着很多属性</p><p>由此可见，操作<code>DOM</code>的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户的体验</p><p><strong>举个例子：</strong></p><p>用传统的原生<code>api</code>或<code>jQuery</code>去操作<code>DOM</code>时，浏览器会从构建<code>DOM</code>树开始从头到尾执行一遍流程</p><p>当你在一次操作时，需要更新10个<code>DOM</code>节点，浏览器没这么智能，收到第一个更新<code>DOM</code>请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程</p><p>而通过<code>VNode</code>，同样更新10个<code>DOM</code>节点，虚拟<code>DOM</code>不会立即操作<code>DOM</code>，而是将这10次更新的<code>diff</code>内容保存到本地的一个<code>js</code>对象中，最终将这个<code>js</code>对象一次性<code>attach</code>到<code>DOM</code>树上，避免大量的无谓计算</p><blockquote><p>很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。虽然这是一个虚拟 DOM 带来的一个优势，但并不是全部。虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种GUI</p></blockquote><h3 id="snabbdom的核心" tabindex="-1">Snabbdom的核心 <a class="header-anchor" href="#snabbdom的核心" aria-hidden="true">#</a></h3><ul><li><code>init</code> 函数 设置模块，创建 <code>patch</code> 函数</li><li>使用 <code>h</code> 函数创建 <code>JavaScript</code>对象(<code>VNode</code>)描述真实DOM</li><li><code>patch</code>函数比较新旧两个 <code>VNode</code></li><li>把变化的内容更新到真实<code>DOM</code>树中</li></ul><h3 id="vnode" tabindex="-1">VNode <a class="header-anchor" href="#vnode" aria-hidden="true">#</a></h3><h4 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-hidden="true">#</a></h4><p>在vue.js中存在一个VNode类，使用它可以实例化不同类型的vnode实例，而不同类型的vnode实例各自表示不同类型的DOM元素</p><p>例如，DOM元素有元素节点，文本节点，注释节点等，vnode实例也会对应着有元素节点和文本节点和注释节点</p><p>本质上来说就是一个普通的JavaScript对象，是从VNode类实例化的对象。用这个JavaScript对象来描述一个真实DOM元素，么该DOM元素上的所有属性在VNode这个对象上都存在对应得属性。 简单来说，vnode可以理解成节点描述对象，他描述了应该怎样去创建真实的DOM节点</p><p>例如，tag表示一个元素节点的名称，text表示一个文本节点的文本，children表示子节点等。vnode表示一个真实的DOM元素，所有真实的DOM节点都是用vnode创建并插入到页面中</p><p>图中展示了使用vnode创建真实的DOM并渲染到视图的过程。可以得知，vnode和视图是一一对应的。我们可以把vnode理解成JavaScript对象版本的DOM元素。 渲染视图的过程是先创建vnode，然后在使用vnode去生成真实的DOM元素，最后插入到页面渲染视图</p><h4 id="有啥作用" tabindex="-1">有啥作用 <a class="header-anchor" href="#有啥作用" aria-hidden="true">#</a></h4><p>由于每次渲染视图时都是先创建vnode，然后使用它创建的真实DOM插入到页面中，所以可以将上一次渲染视图时先所创建的vnode先缓存起来，之后每当需要重新渲染视图时，将新创建的vnode和上一次缓存的vnode对比，查看他们之间有哪些不一样的地方，找出不一样的地方并基于此去修改真实的DOM。 Vue.js目前对状态的侦测策略采用了中等粒度。当状态发生变化时，只通知到组件级别，然后组件内使用虚拟DOM来渲染视图。 如图下所示，当某个状态发生变化时，只通知使用了这个状态的组件。也就是说，只要组件使用的众多状态中有一个发生了变化，那么整个组件就要重新渲染，如果组件只有一个节点发生了变化，那么重新渲染整个组件的所有节点，很明显会造成很大的性能浪费。因此，对vnode进行缓存，并将上一次的缓存和当前创建的vnode对比，只更新有差异的节点就变得很重要。这也是vnode最重要的一个作用</p><h4 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-hidden="true">#</a></h4><ul><li>注释节点</li><li>文本节点</li><li>元素节点</li><li>组件节点</li><li>函数式节点</li><li>克隆节点</li></ul><h2 id="nexttick" tabindex="-1">nextTick <a class="header-anchor" href="#nexttick" aria-hidden="true">#</a></h2><blockquote><p>src/core/util/next-tick.js</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* @flow */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* globals MutationObserver */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">noop</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;shared/util&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">handleError</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./error&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">isIE</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isIOS</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isNative</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./env&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">isUsingMicroTask</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">callbacks</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">pending</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">flushCallbacks</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">pending</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">copies</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">copies</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">copies</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Here we have async deferring wrappers using microtasks.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// In 2.5 we used (macro) tasks (in combination with microtasks).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// However, it has subtle problems when state is changed right before repaint</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (e.g. #6813, out-in transitions).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Also, using (macro) tasks in event handler would cause some weird behaviors</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// So we now use microtasks everywhere, again.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// A major drawback of this tradeoff is that there are some scenarios</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// where microtasks have too high a priority and fire in between supposedly</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// sequential events (e.g. #4521, #6690, which have workarounds)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// or even between bubbling of the same event (#6566).</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">timerFunc</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// The nextTick behavior leverages the microtask queue, which can be accessed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// via either native Promise.then or MutationObserver.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// MutationObserver has wider support, however it is seriously bugged in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// completely stops working after triggering a few times... so, if native</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Promise is available, we will use it:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* istanbul ignore next, $flow-disable-line */</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;undefined&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">timerFunc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// In problematic UIWebViews, Promise.then doesn&#39;t completely break, but</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// it can get stuck in a weird state where callbacks are pushed into the</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// microtask queue but the queue isn&#39;t being flushed, until the browser</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isIOS</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">noop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">isUsingMicroTask</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isIE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">MutationObserver</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;undefined&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#61AFEF;">isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">MutationObserver</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// PhantomJS and iOS 7.x</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">MutationObserver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;[object MutationObserverConstructor]&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Use MutationObserver where native Promise is not available,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// e.g. PhantomJS, iOS7, Android 4.4</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// (#6466 MutationObserver is unreliable in IE11)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MutationObserver</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">textNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createTextNode</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">textNode</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">characterData</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">timerFunc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">textNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">isUsingMicroTask</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">setImmediate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;undefined&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">setImmediate</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Fallback to setImmediate.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Technically it leverages the (macro) task queue,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// but it is still a better choice than setTimeout.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">timerFunc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setImmediate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Fallback to setTimeout.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">timerFunc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 接收一个回调，一个上下文</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cb</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">_resolve</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">cb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">handleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;nextTick&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 上一个promise的resolve</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_resolve</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">_resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">pending</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">pending</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">timerFunc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// $flow-disable-line</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">cb</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;undefined&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">_resolve</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">/* @flow */</span></span>
<span class="line"><span style="color:#6B737C;">/* globals MutationObserver */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { noop } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;shared/util&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { handleError } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./error&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { isIE</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> isIOS</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> isNative } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./env&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> isUsingMicroTask </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">callbacks</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> pending </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> flushCallbacks() {</span></span>
<span class="line"><span style="color:#B392F0;">  pending </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">copies</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">callbacks</span><span style="color:#B392F0;">.slice(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">callbacks</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> i </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">copies</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">; i</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    copies[i]();</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Here we have async deferring wrappers using microtasks.</span></span>
<span class="line"><span style="color:#6B737C;">// In 2.5 we used (macro) tasks (in combination with microtasks).</span></span>
<span class="line"><span style="color:#6B737C;">// However, it has subtle problems when state is changed right before repaint</span></span>
<span class="line"><span style="color:#6B737C;">// (e.g. #6813, out-in transitions).</span></span>
<span class="line"><span style="color:#6B737C;">// Also, using (macro) tasks in event handler would cause some weird behaviors</span></span>
<span class="line"><span style="color:#6B737C;">// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).</span></span>
<span class="line"><span style="color:#6B737C;">// So we now use microtasks everywhere, again.</span></span>
<span class="line"><span style="color:#6B737C;">// A major drawback of this tradeoff is that there are some scenarios</span></span>
<span class="line"><span style="color:#6B737C;">// where microtasks have too high a priority and fire in between supposedly</span></span>
<span class="line"><span style="color:#6B737C;">// sequential events (e.g. #4521, #6690, which have workarounds)</span></span>
<span class="line"><span style="color:#6B737C;">// or even between bubbling of the same event (#6566).</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> timerFunc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// The nextTick behavior leverages the microtask queue, which can be accessed</span></span>
<span class="line"><span style="color:#6B737C;">// via either native Promise.then or MutationObserver.</span></span>
<span class="line"><span style="color:#6B737C;">// MutationObserver has wider support, however it is seriously bugged in</span></span>
<span class="line"><span style="color:#6B737C;">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span>
<span class="line"><span style="color:#6B737C;">// completely stops working after triggering a few times... so, if native</span></span>
<span class="line"><span style="color:#6B737C;">// Promise is available, we will use it:</span></span>
<span class="line"><span style="color:#6B737C;">/* istanbul ignore next, $flow-disable-line */</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;undefined&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> isNative(</span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">)) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">.resolve();</span></span>
<span class="line"><span style="color:#B392F0;">  timerFunc </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.then(flushCallbacks);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// In problematic UIWebViews, Promise.then doesn&#39;t completely break, but</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// it can get stuck in a weird state where callbacks are pushed into the</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// microtask queue but the queue isn&#39;t being flushed, until the browser</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (isIOS) setTimeout(noop);</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">  isUsingMicroTask </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">} </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isIE </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> MutationObserver </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;undefined&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">  (isNative(MutationObserver) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// PhantomJS and iOS 7.x</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">MutationObserver</span><span style="color:#B392F0;">.toString() </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;[object MutationObserverConstructor]&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Use MutationObserver where native Promise is not available,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// e.g. PhantomJS, iOS7, Android 4.4</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// (#6466 MutationObserver is unreliable in IE11)</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> counter </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">observer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MutationObserver(flushCallbacks);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">textNode</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.createTextNode(String(counter));</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">observer</span><span style="color:#B392F0;">.observe(textNode</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    characterData</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">  timerFunc </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    counter </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (counter </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">%</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">textNode</span><span style="color:#B392F0;">.data </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> String(counter);</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">  isUsingMicroTask </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">} </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> setImmediate </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;undefined&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> isNative(setImmediate)) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Fallback to setImmediate.</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Technically it leverages the (macro) task queue,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// but it is still a better choice than setTimeout.</span></span>
<span class="line"><span style="color:#B392F0;">  timerFunc </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    setImmediate(flushCallbacks);</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">} </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Fallback to setTimeout.</span></span>
<span class="line"><span style="color:#B392F0;">  timerFunc </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    setTimeout(flushCallbacks</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 接收一个回调，一个上下文</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> nextTick(cb</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Function</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Object) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> _resolve;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">callbacks</span><span style="color:#B392F0;">.push(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (cb) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">cb</span><span style="color:#B392F0;">.call(ctx);</span></span>
<span class="line"><span style="color:#B392F0;">      } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">        handleError(e</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;nextTick&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 上一个promise的resolve</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (_resolve) {</span></span>
<span class="line"><span style="color:#B392F0;">      _resolve(ctx);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">pending) {</span></span>
<span class="line"><span style="color:#B392F0;">    pending </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    timerFunc();</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// $flow-disable-line</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">cb </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;undefined&quot;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      _resolve </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> resolve;</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br></div></div><h2 id="v-model" tabindex="-1">v-model <a class="header-anchor" href="#v-model" aria-hidden="true">#</a></h2><blockquote><p>src\\platforms\\web\\compiler\\directives\\model.js</p></blockquote>`,84),e=[o];function t(c,r,B,y,F,i){return n(),a("div",null,e)}const C=s(p,[["render",t]]);export{b as __pageData,C as default};
