import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"基于物理的渲染和照明","slug":"基于物理的渲染和照明","link":"#基于物理的渲染和照明","children":[]},{"level":2,"title":"介绍DirectionalLight","slug":"介绍directionallight","link":"#介绍directionallight","children":[{"level":3,"title":"添加一个DirectionalLight到我们的场景","slug":"添加一个directionallight到我们的场景","link":"#添加一个directionallight到我们的场景","children":[]},{"level":3,"title":"创建一个DirectionalLight","slug":"创建一个directionallight","link":"#创建一个directionallight","children":[]},{"level":3,"title":"定位灯光","slug":"定位灯光","link":"#定位灯光","children":[]}]},{"level":2,"title":"动画循环","slug":"动画循环","link":"#动画循环","children":[]},{"level":2,"title":"与游戏循环的相似之处","slug":"与游戏循环的相似之处","link":"#与游戏循环的相似之处","children":[]},{"level":2,"title":"用three.js创建一个动画循环","slug":"用three-js创建一个动画循环","link":"#用three-js创建一个动画循环","children":[{"level":3,"title":"Loop.js 模块","slug":"loop-js-模块","link":"#loop-js-模块","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"relativePath":"4.库/threejs/three.js的实战手册2.md","lastUpdated":1720835436702}'),e={name:"4.库/threejs/three.js的实战手册2.md"},p=l(`<h2 id="基于物理的渲染和照明" tabindex="-1">基于物理的渲染和照明 <a class="header-anchor" href="#基于物理的渲染和照明" aria-hidden="true">#</a></h2><p>最近， <a href="https://en.wikipedia.org/wiki/Physically_based_rendering" target="_blank" rel="noreferrer"><strong>基于物理的渲染</strong></a> （PBR）已成为渲染实时和电影 3D 场景的行业标准方法。顾名思义，这种渲染技术使用真实世界的物理学来计算表面对光的反应方式，从而避免在场景中设置材质和照明时进行猜测。</p><p>PBR 是迪士尼为其长篇动画创建的，也用于现代游戏引擎，如 Unreal 和 Frostbite。令人惊讶的是，微小的（压缩后为 600kb）three.js 内核允许我们使用与这些行业领先巨头相同的物理正确渲染技术，不仅如此，我们甚至可以在智能手机等低功耗设备上运行这些技术。就在几年前，这是一项需要大量功能强大的计算机的尖端技术，而现在我们可以在任何地方的网络浏览器中运行它。</p><p>在 three.js 中使用 PBR 就像切换我们使用的材质并添加光源一样简单。我们将在下面介绍最重要的 three.js PBR 材料，即<code>MeshStandardMaterial</code>。我们不会在本书中深入探讨基于物理渲染的技术细节，但如果您有兴趣了解更多信息，请阅读这本出色的奥斯卡获奖书（是的，他们显然将奥斯卡奖授予书籍） <a href="http://www.pbr-book.org/" target="_blank" rel="noreferrer">基于物理的渲染：从理论到实现</a>是完全免费的</p><h2 id="介绍directionallight" tabindex="-1">介绍<code>DirectionalLight</code> <a class="header-anchor" href="#介绍directionallight" aria-hidden="true">#</a></h2><p><a href="https://threejs.org/docs/#api/lights/DirectionalLight" target="_blank" rel="noreferrer"><code>DirectionalLight</code></a>设计的目的是模仿遥远的光源，例如太阳。来自<code>DirectionalLight</code>的光线不会随着距离而消失。<strong>场景中的所有对象都将被同样明亮地照亮，无论它们放在哪里——即使是在灯光后面</strong>。</p><p><code>DirectionalLight</code>的光线是平行的，从一个位置照向一个目标。默认情况下，目标放置在我们场景的中心（点(0,0,0))，所以当我们移动周围的光线时，它总是会向中心照射。</p><h3 id="添加一个directionallight到我们的场景" tabindex="-1">添加一个<code>DirectionalLight</code>到我们的场景 <a class="header-anchor" href="#添加一个directionallight到我们的场景" aria-hidden="true">#</a></h3><p>说得够多了，让我们在场景中添加一个<code>DirectionalLight</code>。打开或创建 <em><strong>components/lights.js</strong></em> 模块，该模块将遵循与此文件夹中其他组件相同的模式。首先，我们将导入<code>DirectionalLight</code>类，然后我们将设置一个<code>createLights</code>函数，最后，我们将导出该函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">DirectionalLight</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createLights</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">light</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">light</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createLights</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { DirectionalLight } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;three&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createLights() {</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">light</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">; </span><span style="color:#6B737C;">// TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#B392F0;"> light;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> { createLights };</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="创建一个directionallight" tabindex="-1">创建一个<code>DirectionalLight</code> <a class="header-anchor" href="#创建一个directionallight" aria-hidden="true">#</a></h3><p><a href="https://threejs.org/docs/#api/en/lights/DirectionalLight" target="_blank" rel="noreferrer"><code>DirectionalLight</code></a>构造函数有两个参数，颜色<strong>color</strong>和强度<strong>intensity</strong>。在这里，我们创建一个强度为 8 的纯白光</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createLights</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Create a directional light</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">light</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">DirectionalLight</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;white&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">light</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createLights() {</span></span>
<span class="line"><span style="color:#6B737C;">// Create a directional light</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">light</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> DirectionalLight(</span><span style="color:#FFAB70;">&#39;white&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">8</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#B392F0;"> light;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>所有 three.js 灯都有颜色和强度设置，继承自 <a href="https://threejs.org/docs/#api/en/lights/Light.intensity" target="_blank" rel="noreferrer"><code>Light</code>基类</a>。</p><h3 id="定位灯光" tabindex="-1">定位灯光 <a class="header-anchor" href="#定位灯光" aria-hidden="true">#</a></h3><p><code>DirectionalLight</code>从<code>light.position</code>照向<code>light.target.position</code>。正如我们上面提到的，灯光和目标的默认位置都是我们场景的中心，(0,0,0)。这意味着光线当前正在从(0,0,0)照向(0,0,0)。 这确实有效，但看起来不太好。我们可以通过调整<code>light.position</code>来改善灯光的外观。我们将通过将位置设置为(10,10,10)来达到向左、向上和朝向我们移动它的效果。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">DirectionalLight</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createLights</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Create a directional light</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">light</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">DirectionalLight</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;white&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// move the light right, up, and towards us</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">light</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">position</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">light</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createLights</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { DirectionalLight } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;three&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createLights() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Create a directional light</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">light</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> DirectionalLight(</span><span style="color:#FFAB70;">&#39;white&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">8</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// move the light right, up, and towards us</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">light</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">position</span><span style="color:#B392F0;">.set(</span><span style="color:#F8F8F8;">10</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> light;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> { createLights };</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>现在灯光从(10,10,10)照向(0,0,0)。</p><h2 id="动画循环" tabindex="-1">动画循环 <a class="header-anchor" href="#动画循环" aria-hidden="true">#</a></h2><p>在过去的几章中，我们的应用程序取得了惊人的进步。我们有灯光、颜色、物理上正确的渲染、抗锯齿、自动调整大小，我们知道如何在3D空间中移动对象，而且我们的代码干净、模块化且结构良好。但是我们的场景缺少一个重要的元素：<strong>运动！</strong></p><p>我们正在使用该<code>renderer.render</code>方法来绘制场景。此方法将场景和相机作为输入，并将单个静止图像输出到HTML<code>&lt;canvas&gt;</code>元素。输出是您可以在上面看到的不动的紫色盒子。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// draw a single frame</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">renderer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scene</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">camera</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">render() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// draw a single frame</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">renderer</span><span style="color:#B392F0;">.render(scene</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> camera);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在本章中，我们将为立方体添加一个简单的旋转动画。我们将这样做：</p><ul><li><strong>调用<code>renderer.render(...)</code></strong></li><li><strong>等待。。。直到是时候画下一帧</strong></li><li><strong>稍微旋转立方体一点</strong></li><li><strong>调用<code>renderer.render(...)</code></strong></li><li><strong>等待。。。直到是时候画下一帧</strong></li><li><strong>稍微旋转立方体一点</strong></li><li><strong>调用<code>renderer.render(...)</code></strong></li><li><strong>等待。。。直到是时候画下一帧</strong></li><li><strong>稍微旋转立方体一点</strong></li><li>…</li></ul><p>……等等在一个称为<strong>动画循环</strong>的无限循环中。设置这个循环很简单，因为three.js通过<code>renderer.setAnimationLoop</code>方法为我们完成了所有困难的工作。</p><p>我们还将在本章中介绍three.js的<code>Clock</code>，一个简单的秒表类，我们可以使用它来保持动画同步。我们将在本章中处理小于一秒的时间值，因此我们将使用毫秒 (ms)，即千分之一秒。</p><p>一旦我们设置了循环，我们的目标就是以每秒60帧(60FPS)的速率生成稳定的帧流，这意味着我们需要大约每16毫秒调用一次<code>.render</code>。换句话说，我们需要确保我们在一帧中所做的所有处理的花费都少于16毫秒（这有时被称为<strong>frame budget - 帧预算</strong>）。这意味着我们需要更新动画，执行任何其他需要跨帧计算的任务（例如物理），并在我们打算支持的最低规格硬件上在不到16毫秒的时间内渲染帧。在本章的其余部分，当我们设置循环并为立方体创建一个简单的旋转动画时，我们将讨论如何最好地实现这一点。</p><h2 id="与游戏循环的相似之处" tabindex="-1">与游戏循环的相似之处 <a class="header-anchor" href="#与游戏循环的相似之处" aria-hidden="true">#</a></h2><p>大多数游戏引擎使用每帧运行一次的<strong>游戏循环</strong>的概念，用于更新和渲染游戏。一个基本的游戏循环可能包含以下四个任务：</p><ol><li><strong>获取用户输入</strong></li><li><strong>计算物理</strong></li><li><strong>更新动画</strong></li><li><strong>渲染一帧</strong></li></ol><p>尽管three.js不是游戏引擎并且我们将循环称为<strong>动画循环</strong>，但我们的目标非常相似。这意味着，我们可以从游戏引擎设计中借鉴一些久经考验且值得信赖的想法，而不是从头开始。我们在本章中创建的循环非常简单，但是如果您以后发现自己需要一个更复杂的循环，可能以与渲染场景不同的速率更新动画和物理，您可以参考 <a href="https://gameprogrammingpatterns.com/game-loop.html" target="_blank" rel="noreferrer">一本关于游戏开发的书</a>了解更多信息信息。</p><p>稍后，我们将使我们的场景具有交互性。幸运的是，由于有了 <a href="https://discoverthreejs.com/zh/book/appendix/dom-api-reference/#listening-for-events" target="_blank" rel="noreferrer"><code>addEventListener</code></a>，在浏览器中处理用户输入很容易，所以我们不需要在循环中处理这个任务。此外，我们暂时不会进行任何物理计算（尽管有几个很棒的物理库能和three.js一起使用），所以我们可以跳过物理步骤。渲染已经被<code>renderer.render</code>处理。这给我们留下了本章中的两个任务：设置循环本身，然后创建一个更新动画的系统。</p><p>我们将首先设置循环以生成帧流，然后设置动画系统。</p><h2 id="用three-js创建一个动画循环" tabindex="-1">用three.js创建一个动画循环 <a class="header-anchor" href="#用three-js创建一个动画循环" aria-hidden="true">#</a></h2><h3 id="loop-js-模块" tabindex="-1"><em><strong>Loop.js</strong></em> 模块 <a class="header-anchor" href="#loop-js-模块" aria-hidden="true">#</a></h3><p>打开（或创建）<em><strong>systems/Loop.js</strong></em> 模块并在其中创建一个新<code>Loop</code>类。这个类将处理所有的循环逻辑和动画系统。您会注意到我们已经导入<code>Clock</code>了 ，我们将在下面使用它来保持动画同步。接下来，由于我们将使用<code>renderer.render(scene, camera)</code>生成帧，因此可以肯定的是，我们需要在<code>Loop</code>类中使用<code>camera</code>、<code>scene</code>和<code>renderer</code>，因此需要将它们传递给构造函数并将它们保存为实例变量。最后，创建我们以后可以用来启动/停止循环的方法：<code>.start</code>和<code>.stop</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Clock</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;three&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Loop</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">camera</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">scene</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">renderer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">camera</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">camera</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scene</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">scene</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">renderer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">renderer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">stop</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Loop</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { Clock } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;three&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> Loop {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">constructor</span><span style="color:#B392F0;">(camera</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> scene</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> renderer) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.camera </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> camera;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.scene </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> scene;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.renderer </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> renderer;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  start() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  stop() {}</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> { Loop };</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,38),o=[p];function r(t,c,i,B,y,d){return n(),a("div",null,o)}const g=s(e,[["render",r]]);export{h as __pageData,g as default};
