import{_ as s,o as n,c as a,a as p}from"./app.bfa9bd4b.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"updateProjectionMatrix","slug":"updateprojectionmatrix","link":"#updateprojectionmatrix","children":[]}],"relativePath":"4.库/threejs/相机.md","lastUpdated":1720835436702}'),e={name:"4.库/threejs/相机.md"},l=p(`<h2 id="updateprojectionmatrix" tabindex="-1"><code>updateProjectionMatrix</code> <a class="header-anchor" href="#updateprojectionmatrix" aria-hidden="true">#</a></h2><p>更新透视投影矩阵<code>.updateProjectionMatrix()</code></p><p>在Three.js内部，渲染期间，透视投影矩阵threejs并不会始终读取相机的参数，计算，这样太浪费CPU计算资源了，为了性能考虑，threejs默认就是计算一次生成投影矩阵的值，所以如果你因为某种需要，改变了相机的相关参数，就要执行<code>.updateProjectionMatrix()</code>告诉threejs重新合成透视投影矩阵的值<code>.projectionMatrix</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// onresize 事件会在窗口被调整大小时发生</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onresize</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 重置渲染器输出画布canvas尺寸</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">renderer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setSize</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHeight</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 全屏情况下：设置观察范围长宽比aspect为窗口宽高比</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">camera</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">aspect</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHeight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">camera</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateProjectionMatrix</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// onresize 事件会在窗口被调整大小时发生</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.onresize </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 重置渲染器输出画布canvas尺寸</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">renderer</span><span style="color:#B392F0;">.setSize(</span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.innerWidth</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.innerHeight);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 全屏情况下：设置观察范围长宽比aspect为窗口宽高比</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">camera</span><span style="color:#B392F0;">.aspect </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.innerWidth </span><span style="color:#F97583;">/</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.innerHeight;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">camera</span><span style="color:#B392F0;">.updateProjectionMatrix();</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,4),o=[l];function t(r,c,B,i,y,F){return n(),a("div",null,o)}const A=s(e,[["render",t]]);export{u as __pageData,A as default};
