import{_ as e,o as a,c as n,a as i}from"./app.bfa9bd4b.js";const l="/zqy-blog/assets/image-20220612132800347.d7ec7a57.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"maven","slug":"maven","link":"#maven","children":[{"level":3,"title":"idea使用maven","slug":"idea使用maven","link":"#idea使用maven","children":[]},{"level":3,"title":"maven坐标","slug":"maven坐标","link":"#maven坐标","children":[]}]},{"level":2,"title":"Maven 的 POM 文件类似前端 package.json 文件","slug":"maven-的-pom-文件类似前端-package-json-文件","link":"#maven-的-pom-文件类似前端-package-json-文件","children":[]}],"relativePath":"1.基础/5.java/maven.md","lastUpdated":1720835436686}'),o={name:"1.基础/5.java/maven.md"},t=i('<h2 id="maven" tabindex="-1">maven <a class="header-anchor" href="#maven" aria-hidden="true">#</a></h2><blockquote><p>专门用于管理和构建java项目的工具</p><ul><li>提供一套标准化的项目结构，所有ide使用maven构建的项目结构完全一样，所有ide构建的maven项目可以通用</li><li>提供一套标准化的构建流程（编译，测试，打包，发布... ）</li><li>提供一套依赖管理机制</li></ul><p>基于项目对象模型（pom）的概念，通过一小段描述信息来管理项目的构建，报告和文档</p></blockquote><h3 id="idea使用maven" tabindex="-1">idea使用maven <a class="header-anchor" href="#idea使用maven" aria-hidden="true">#</a></h3><ol><li><p>idea选择File&gt;Settings</p></li><li><p>搜索maven，idea内置有maven，但也可以配置本地安装的maven的路径，并修改配置文件路径</p></li></ol><p><img src="'+l+'" alt="image-20220612132800347"></p><h3 id="maven坐标" tabindex="-1">maven坐标 <a class="header-anchor" href="#maven坐标" aria-hidden="true">#</a></h3><p>maven坐标是资源的唯一标识</p><p>使用坐标来定义项目或引入项目中需要的依赖</p><p>主要组成</p><ul><li>groupId：定义当前maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前maven项目名称（通常是模块名称，例如order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul><h2 id="maven-的-pom-文件类似前端-package-json-文件" tabindex="-1">Maven 的 POM 文件类似前端 package.json 文件 <a class="header-anchor" href="#maven-的-pom-文件类似前端-package-json-文件" aria-hidden="true">#</a></h2><p>Maven 的 POM 文件类似于前端的 npm 中的 package.json 文件。它们都是用于描述项目的配置和依赖关系的文件。下面是它们之间的一些相似之处：</p><ol><li>项目配置：POM 文件和 package.json 文件都用于配置项目的基本信息，例如项目名称、版本号、作者等。</li><li>依赖管理：两者都用于管理项目的依赖项。POM 文件中使用 <code>&lt;dependencies&gt;</code> 元素来指定项目所需的依赖项，而 package.json 文件使用 <code>&quot;dependencies&quot;</code> 键来定义项目的依赖项。</li><li>版本控制：POM 文件和 package.json 文件都允许指定依赖项的版本范围。这使得可以在更新依赖项时灵活地控制版本。</li><li>构建脚本：package.json 文件中的 <code>&quot;scripts&quot;</code> 键允许定义各种自定义脚本，用于执行项目的构建任务、测试等。类似地，POM 文件中的 <code>&lt;build&gt;</code> 元素允许定义构建过程中的自定义操作和插件配置。</li></ol><p>尽管 Maven 和 npm 有一些相似之处，但它们也有一些不同之处，因为它们针对不同的技术栈和语言。Maven 主要用于 Java 项目的构建和管理，而 npm 则是面向 JavaScript 生态系统的包管理工具。</p>',14),d=[t];function c(s,p,m,r,v,h){return a(),n("div",null,d)}const u=e(o,[["render",c]]);export{g as __pageData,u as default};
