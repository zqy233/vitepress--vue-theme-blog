import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const A=JSON.parse('{"title":"scripts","description":"","frontmatter":{},"headers":[{"level":2,"title":"pretest","slug":"pretest","link":"#pretest","children":[]},{"level":2,"title":"scripts/snapshot.mjs","slug":"scripts-snapshot-mjs","link":"#scripts-snapshot-mjs","children":[{"level":3,"title":"删除模板项目命令（修复在windows上无法使用的问题）","slug":"删除模板项目命令-修复在windows上无法使用的问题","link":"#删除模板项目命令-修复在windows上无法使用的问题","children":[]},{"level":3,"title":"项目命令解决方法（修复在windows上无法使用的问题）","slug":"项目命令解决方法-修复在windows上无法使用的问题","link":"#项目命令解决方法-修复在windows上无法使用的问题","children":[]}]},{"level":2,"title":"scripts/prepublish.mjs","slug":"scripts-prepublish-mjs","link":"#scripts-prepublish-mjs","children":[{"level":3,"title":"脚本流程：","slug":"脚本流程","link":"#脚本流程","children":[]},{"level":3,"title":"修复windows不能正常运行的问题","slug":"修复windows不能正常运行的问题","link":"#修复windows不能正常运行的问题","children":[]},{"level":3,"title":"完整代码","slug":"完整代码","link":"#完整代码","children":[]}]},{"level":2,"title":"scripts/test.mjs","slug":"scripts-test-mjs","link":"#scripts-test-mjs","children":[]}],"relativePath":"6.源码阅读/create-vue/2.scripts.md","lastUpdated":1720835436706}'),p={name:"6.源码阅读/create-vue/2.scripts.md"},o=l(`<h1 id="scripts" tabindex="-1">scripts <a class="header-anchor" href="#scripts" aria-hidden="true">#</a></h1><h2 id="pretest" tabindex="-1">pretest <a class="header-anchor" href="#pretest" aria-hidden="true">#</a></h2><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky install&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;format&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;prettier --write .&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;build&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zx ./scripts/build.mjs&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;snapshot&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zx ./scripts/snapshot.mjs&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;pretest&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;run-s build snapshot&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;test&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zx ./scripts/test.mjs&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;prepublishOnly&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zx ./scripts/prepublish.mjs&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;scripts&quot;</span><span style="color:#B392F0;">: {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;prepare&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;husky install&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;format&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;prettier --write .&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;build&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;zx ./scripts/build.mjs&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;snapshot&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;zx ./scripts/snapshot.mjs&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;pretest&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;run-s build snapshot&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;test&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;zx ./scripts/test.mjs&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;prepublishOnly&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;zx ./scripts/prepublish.mjs&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  },</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>run-s是npm-run-all包的命令，表示同时运行多个命令，上方代码表示同时执行build和pretest命令</p><h2 id="scripts-snapshot-mjs" tabindex="-1">scripts/snapshot.mjs <a class="header-anchor" href="#scripts-snapshot-mjs" aria-hidden="true">#</a></h2><p>源码使用了 Node.js 和 <code>zx</code> 库来生成一系列项目的快照。在运行过程中，它会使用特性标记（feature flags）的不同组合，通过命令行参数的方式来控制每个项目的特性。在循环中，它会创建一个新的项目目录，并将该目录中的文件复制到指定的文件夹中。这段代码中还包含了一些注释来解释具体的实现细节，包括使用了一个函数来生成特性标记的所有组合，并使用 <code>path</code> 和 <code>cd</code> 方法来操作文件路径和进入目录等</p><h3 id="删除模板项目命令-修复在windows上无法使用的问题" tabindex="-1">删除模板项目命令（修复在windows上无法使用的问题） <a class="header-anchor" href="#删除模板项目命令-修复在windows上无法使用的问题" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`rm -rf </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">projectName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`rm -rf </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">projectName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 Windows 环境下，使用 <code>$</code> 模板字符串的方式执行 shell 命令时，该命令无法正常工作。可以改写为使用 Node.js 的 <code>fs</code> 模块来删除文件夹。以下是一个可能的实现：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">fs</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;fs/promises&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Removing previously generated project </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">projectName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">rm</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">projectName</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">recursive</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">force</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> fs </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;fs/promises&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`Removing previously generated project </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">projectName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#B392F0;">.rm(projectName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { recursive</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> force</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;"> });</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>们使用 Node.js 的 <code>fs.rm()</code> 方法来递归地删除指定的目录，其中 <code>{ recursive: true, force: true }</code> 参数用于确保删除目录及其所有内容。请注意，这种方式删除目录时不会打印与 <code>rm</code> 命令类似的信息，如果需要输出信息，可以自行添加 <code>console.log</code></p><h3 id="项目命令解决方法-修复在windows上无法使用的问题" tabindex="-1">项目命令解决方法（修复在windows上无法使用的问题） <a class="header-anchor" href="#项目命令解决方法-修复在windows上无法使用的问题" aria-hidden="true">#</a></h3><p>另一种解决方法是使用 <code>child_process</code> 模块的 <code>spawn</code> 或 <code>exec</code> 方法来执行命令，这样可以避免对命令行字符串的拼接和处理。以下是使用 <code>child_process.spawn</code> 方法的示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">spawn</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;child_process&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">command</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">bin</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">projectName</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E5C07B;">flags</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">flag</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`--</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">flag</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">), </span><span style="color:#98C379;">&#39;--force&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">command</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;node&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">stdio</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;inherit&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { spawn } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;child_process&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">command</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [bin</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> projectName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">flags</span><span style="color:#B392F0;">.map((flag) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`--</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">flag</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;--force&#39;</span><span style="color:#B392F0;">];</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">command</span><span style="color:#B392F0;">.join(</span><span style="color:#FFAB70;">&#39; &#39;</span><span style="color:#B392F0;">));</span></span>
<span class="line"><span style="color:#B392F0;">spawn(</span><span style="color:#FFAB70;">&#39;node&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> command</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { stdio</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;inherit&#39;</span><span style="color:#B392F0;"> });</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这里，我们首先使用模板字符串构造了一个命令行字符串，然后使用 <code>console.log</code> 打印该字符串以进行调试。最后，我们使用 <code>child_process.spawn</code> 方法来执行该命令，并将 <code>stdio</code> 参数设置为 <code>inherit</code>，以便将命令行的输出重定向到当前进程的标准输出。请注意，这种方式可以避免对命令行字符串的拼接和处理，但是需要手动处理命令行参数的转义和处理，否则可能会导致命令行注入等安全问题。</p><h2 id="scripts-prepublish-mjs" tabindex="-1">scripts/prepublish.mjs <a class="header-anchor" href="#scripts-prepublish-mjs" aria-hidden="true">#</a></h2><h3 id="脚本流程" tabindex="-1">脚本流程： <a class="header-anchor" href="#脚本流程" aria-hidden="true">#</a></h3><ol><li>pnpm build生成<code>outfile.cjs</code></li><li>pnpm snapshot使用<code>outfile.cjs</code>在playground文件夹下生成所有模板</li><li>cd进入playground文件夹</li><li>pnpm install</li><li>git add -A .</li><li>git commit提交快照</li><li>git tag打上版本标签</li><li>git push提交快照</li></ol><h3 id="修复windows不能正常运行的问题" tabindex="-1">修复windows不能正常运行的问题 <a class="header-anchor" href="#修复windows不能正常运行的问题" aria-hidden="true">#</a></h3><p>顶部需要加入这两行</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">shell</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;powershell.exe&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prefix</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">$</span><span style="color:#B392F0;">.shell </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;powershell.exe&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">$</span><span style="color:#B392F0;">.prefix </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="完整代码" tabindex="-1">完整代码 <a class="header-anchor" href="#完整代码" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env zx</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;zx/globals&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">shell</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;powershell.exe&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prefix</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`pnpm build\`</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`pnpm snapshot\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./package.json&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">playgroundDir</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../playground/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">cd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">playgroundDir</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`pnpm install\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// git add -A 的意思是将工作区中所有变动（包括新增、修改、删除）的文件提交到暂存区，即把所有变化的文件都加入到Git的暂存区，以便下一步提交。其中，-A 是 --all 的缩写，表示添加所有文件。</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`git add -A .\`</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`git commit -m &quot;version </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">version</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> snapshot&quot;\`</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stdout</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;nothing to commit&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">e</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`git tag -m &quot;v</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">version</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot; v</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">version</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// git push --follow-tags 是一个将本地代码和标签一起推送到远程仓库的命令。具体来说，它会将本地所有的提交以及与这些提交相关联的标签一起推送到远程仓库</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果你在本地创建了一个新的标签，而你想要将这个标签与之前提交的代码一起推送到远程仓库，那么使用 git push --follow-tags 命令就可以自动将标签推送到远程仓库</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 需要注意的是，--follow-tags 参数只在推送的时候有效，它并不会自动为你打标签。如果你想要打标签，请使用 git tag 命令</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`git push --follow-tags\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 提交完快照后回到项目目录，提交下更新快照的commit文本</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">projectRoot</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">cd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">projectRoot</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`git add playground\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// --allow-empty允许提交空的commit，commit文本为更新快照</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`git commit -m &#39;chore: update snapshot&#39; --allow-empty\`</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`git push --follow-tags\`</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">#!/usr/bin/env zx</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;zx/globals&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">$</span><span style="color:#B392F0;">.shell </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;powershell.exe&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">$</span><span style="color:#B392F0;">.prefix </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`pnpm build\`</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`pnpm snapshot\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> { version } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.parse(</span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#B392F0;">.readFile(</span><span style="color:#FFAB70;">&#39;./package.json&#39;</span><span style="color:#B392F0;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">playgroundDir</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;../playground/&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">cd(playgroundDir)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`pnpm install\`</span></span>
<span class="line"><span style="color:#6B737C;">// git add -A 的意思是将工作区中所有变动（包括新增、修改、删除）的文件提交到暂存区，即把所有变化的文件都加入到Git的暂存区，以便下一步提交。其中，-A 是 --all 的缩写，表示添加所有文件。</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`git add -A .\`</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`git commit -m &quot;version </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">version</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;"> snapshot&quot;\`</span></span>
<span class="line"><span style="color:#B392F0;">} </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">e</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">stdout</span><span style="color:#B392F0;">.includes(</span><span style="color:#FFAB70;">&#39;nothing to commit&#39;</span><span style="color:#B392F0;">)) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> e</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`git tag -m &quot;v</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">version</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&quot; v</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">version</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#6B737C;">// git push --follow-tags 是一个将本地代码和标签一起推送到远程仓库的命令。具体来说，它会将本地所有的提交以及与这些提交相关联的标签一起推送到远程仓库</span></span>
<span class="line"><span style="color:#6B737C;">// 如果你在本地创建了一个新的标签，而你想要将这个标签与之前提交的代码一起推送到远程仓库，那么使用 git push --follow-tags 命令就可以自动将标签推送到远程仓库</span></span>
<span class="line"><span style="color:#6B737C;">// 需要注意的是，--follow-tags 参数只在推送的时候有效，它并不会自动为你打标签。如果你想要打标签，请使用 git tag 命令</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`git push --follow-tags\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 提交完快照后回到项目目录，提交下更新快照的commit文本</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">projectRoot</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;../&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">cd(projectRoot)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`git add playground\`</span></span>
<span class="line"><span style="color:#6B737C;">// --allow-empty允许提交空的commit，commit文本为更新快照</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`git commit -m &#39;chore: update snapshot&#39; --allow-empty\`</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`git push --follow-tags\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="scripts-test-mjs" tabindex="-1">scripts/test.mjs <a class="header-anchor" href="#scripts-test-mjs" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env zx</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;zx/globals&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Vitest would otherwise enable watch mode by default.</span></span>
<span class="line"><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">CI</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">playgroundDir</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../playground/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">projects</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">fs</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">readdirSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">playgroundDir</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">withFileTypes</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">dirent</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">dirent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isDirectory</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">dirent</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">dirent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;node_modules&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]) </span><span style="color:#E06C75;">projects</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">projects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">project</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">project</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">cd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">playgroundDir</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Installing playground dependencies&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`pnpm install\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">projectName</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">projects</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">cd</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">playgroundDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">projectName</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">packageJSON</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">playgroundDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">projectName</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;package.json&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Building </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">projectName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`pnpm build\`</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&#39;@playwright/test&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">packageJSON</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">devDependencies</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`pnpm playwright install --with-deps\`</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&#39;test:e2e&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">packageJSON</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scripts</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Running e2e tests in </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">projectName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`pnpm test:e2e\`</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&#39;test:unit&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">packageJSON</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scripts</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Running unit tests in </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">projectName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#98C379;">\`pnpm test:unit\`</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">#!/usr/bin/env zx</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;zx/globals&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Vitest would otherwise enable watch mode by default.</span></span>
<span class="line"><span style="color:#79B8FF;">process</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">env</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">CI</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;1&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">playgroundDir</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;../playground/&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> projects </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> fs</span></span>
<span class="line"><span style="color:#B392F0;">  .readdirSync(playgroundDir</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { withFileTypes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;"> })</span></span>
<span class="line"><span style="color:#B392F0;">  .filter((dirent) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">dirent</span><span style="color:#B392F0;">.isDirectory())</span></span>
<span class="line"><span style="color:#B392F0;">  .map((dirent) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">dirent</span><span style="color:#B392F0;">.name)</span></span>
<span class="line"><span style="color:#B392F0;">  .filter((name) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">name</span><span style="color:#B392F0;">.startsWith(</span><span style="color:#FFAB70;">&#39;.&#39;</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> name </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node_modules&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">process</span><span style="color:#B392F0;">.argv[</span><span style="color:#F8F8F8;">3</span><span style="color:#B392F0;">]) projects </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">projects</span><span style="color:#B392F0;">.filter((project) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">project</span><span style="color:#B392F0;">.includes(</span><span style="color:#79B8FF;">process</span><span style="color:#B392F0;">.argv[</span><span style="color:#F8F8F8;">3</span><span style="color:#B392F0;">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">cd(playgroundDir)</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;Installing playground dependencies&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`pnpm install\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">projectName</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> projects) {</span></span>
<span class="line"><span style="color:#B392F0;">  cd(</span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(playgroundDir</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> projectName))</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">packageJSON</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(playgroundDir</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> projectName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;package.json&#39;</span><span style="color:#B392F0;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`Building </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">projectName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`pnpm build\`</span></span>
<span class="line"><span style="color:#B392F0;">  </span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#FFAB70;">&#39;@playwright/test&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">packageJSON</span><span style="color:#B392F0;">.devDependencies) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`pnpm playwright install --with-deps\`</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#FFAB70;">&#39;test:e2e&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">packageJSON</span><span style="color:#B392F0;">.scripts) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`Running e2e tests in </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">projectName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`pnpm test:e2e\`</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#FFAB70;">&#39;test:unit&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">packageJSON</span><span style="color:#B392F0;">.scripts) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`Running unit tests in </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">projectName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> $</span><span style="color:#FFAB70;">\`pnpm test:unit\`</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>这段代码使用了 zx 库来执行命令行命令。主要作用是自动化地对某个目录下的多个项目进行构建和测试。</p><p>具体实现过程如下：</p><ul><li>获取 playground 目录下的所有子目录作为项目名称。</li><li>遍历每个项目，进入该项目目录。</li><li>执行 <code>pnpm install</code> 安装该项目的依赖。</li><li>执行 <code>pnpm build</code> 构建该项目。</li><li>如果该项目中安装了 Playwright，则执行 <code>pnpm playwright install --with-deps</code> 安装 Playwright 依赖。</li><li>如果该项目中有定义 <code>test:e2e</code>，则执行 <code>pnpm test:e2e</code> 进行 e2e 测试。</li><li>如果该项目中有定义 <code>test:unit</code>，则执行 <code>pnpm test:unit</code> 进行单元测试。</li></ul><p>这段代码的主要目的是为了自动化测试和构建多个项目，方便开发人员进行快速测试和部署。</p>`,29),e=[o];function c(r,t,B,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{A as __pageData,u as default};
