import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const d=JSON.parse('{"title":"事件循环","description":"","frontmatter":{},"headers":[{"level":2,"title":"任务/同步异步","slug":"任务-同步异步","link":"#任务-同步异步","children":[]},{"level":2,"title":"宏任务(macro task)与微任务(micro task)","slug":"宏任务-macro-task-与微任务-micro-task","link":"#宏任务-macro-task-与微任务-micro-task","children":[]},{"level":2,"title":"宏任务（macro task）","slug":"宏任务-macro-task","link":"#宏任务-macro-task","children":[]},{"level":2,"title":"如何理解script（整体代码）是宏任务","slug":"如何理解script-整体代码-是宏任务","link":"#如何理解script-整体代码-是宏任务","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"微任务","slug":"微任务","link":"#微任务","children":[]},{"level":2,"title":"在宏任务执行过程中产生的新的宏任务和微任务的执行顺序","slug":"在宏任务执行过程中产生的新的宏任务和微任务的执行顺序","link":"#在宏任务执行过程中产生的新的宏任务和微任务的执行顺序","children":[]},{"level":2,"title":"事件循环","slug":"事件循环-1","link":"#事件循环-1","children":[{"level":3,"title":"示例-首先处理微任务队列中的所有任务，然后再从宏任务队列中取出一个任务进行执行","slug":"示例-首先处理微任务队列中的所有任务-然后再从宏任务队列中取出一个任务进行执行","link":"#示例-首先处理微任务队列中的所有任务-然后再从宏任务队列中取出一个任务进行执行","children":[]},{"level":3,"title":"示例-当一个宏任务产生了多个新的微任务时","slug":"示例-当一个宏任务产生了多个新的微任务时","link":"#示例-当一个宏任务产生了多个新的微任务时","children":[]}]},{"level":2,"title":"如何理解setTimeout(func, 0)","slug":"如何理解settimeout-func-0","link":"#如何理解settimeout-func-0","children":[{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"示例-setTimeout在指定的时间后向任务队列中添加一个新的宏任务","slug":"示例-settimeout在指定的时间后向任务队列中添加一个新的宏任务","link":"#示例-settimeout在指定的时间后向任务队列中添加一个新的宏任务","children":[]}]},{"level":2,"title":"Event Table是什么","slug":"event-table是什么","link":"#event-table是什么","children":[]}],"relativePath":"2.JS/1.基础/事件循环.md","lastUpdated":1720835436686}'),p={name:"2.JS/1.基础/事件循环.md"},o=l(`<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-hidden="true">#</a></h1><p>事件循环(Event Loop)是 JavaScript 的一种执行机制，它是 JavaScript 实现异步编程的核心机制之一。</p><p>JavaScript 是一门单线程语言，它在主线程上执行代码，遇到同步代码就立即执行，遇到异步代码则将其加入到任务队列中，等待主线程空闲时执行。事件循环负责监听任务队列，当主线程执行完同步代码后，会去任务队列中查找是否有任务需要执行，如果有，就会将任务取出来执行，如果没有，就等待新的任务加入。</p><p>事件循环通常包括以下几个阶段：</p><ol><li>执行完同步代码，查看任务队列是否有待执行的宏任务，如果有，则进入宏任务执行阶段；</li><li>执行完一个宏任务后，查看微任务队列是否有待执行的任务，如果有，则依次执行微任务，直到微任务队列为空；</li><li>如果宏任务执行过程中产生了新的宏任务，则将其加入到任务队列中；</li><li>重复执行上述步骤，直到任务队列和微任务队列中都没有待执行的任务。</li></ol><p>由于 JavaScript 是单线程执行的，事件循环机制就是通过异步回调函数的方式来模拟多线程的执行效果，从而实现异步编程。</p><h2 id="任务-同步异步" tabindex="-1">任务/同步异步 <a class="header-anchor" href="#任务-同步异步" aria-hidden="true">#</a></h2><p>在JavaScript中，任务是指需要执行的一段代码。任务可以分为同步任务和异步任务。</p><p>同步任务是指在主线程上排队执行的任务，必须等到前面的任务执行完成才能执行下一个任务。例如，赋值操作、函数调用、算术运算等操作都是同步任务。</p><p>异步任务是指不进入主线程，而进入“任务队列”（task queue）的任务，只有等主线程上的同步任务执行完成后，才会去执行异步任务。异步任务包括定时器函数（setTimeout/setInterval）、Ajax 请求、DOM 事件处理函数、Promise 等。</p><p>异步任务可以分为宏任务和微任务，它们的区别在于执行顺序和执行时机的不同。宏任务执行的优先级低于微任务，所以当有宏任务和微任务同时存在时，微任务会先执行完毕。常见的宏任务有：setTimeout/setInterval、Ajax 请求、DOM 事件处理函数、requestAnimationFrame、setImmediate（Node.js 环境）。常见的微任务有：Promise.then/catch/finally、process.nextTick（Node.js 环境）、MutationObserver、Object.observe（已废弃，被 Proxy 对象替代）。</p><p>宏任务和微任务的区别在于它们被推入执行队列的时机和执行顺序。在事件循环中，宏任务被推入宏任务队列，微任务被推入微任务队列，当主线程执行完一个宏任务后，会先执行微任务队列中的任务，然后再执行宏任务队列中的任务。这个过程就是事件循环。</p><h2 id="宏任务-macro-task-与微任务-micro-task" tabindex="-1">宏任务(macro task)与微任务(micro task) <a class="header-anchor" href="#宏任务-macro-task-与微任务-micro-task" aria-hidden="true">#</a></h2><p>在 JavaScript 中，任务（task）是指要执行的一段代码，而事件循环（event loop）则是用来处理任务的机制。在事件循环中，任务可以分为两种类型：宏任务（macro task）和微任务（micro task）。</p><h2 id="宏任务-macro-task" tabindex="-1">宏任务（macro task） <a class="header-anchor" href="#宏任务-macro-task" aria-hidden="true">#</a></h2><p>包括以下几种：</p><ol><li>Script（整体代码）：指整个 JavaScript 代码块，从头到尾顺序执行。</li><li>setTimeout 和 setInterval：通过定时器 API 提交的任务，分别在指定的时间后或每隔一定时间执行。</li><li>setImmediate（Node.js 独有）：在 I/O 事件的回调函数执行完毕之后立即执行的任务，优先级高于 setTimeout。</li><li>requestAnimationFrame（浏览器独有）：在浏览器重绘之前执行的任务，通常用于实现动画效果。</li><li>I/O：包括网络请求、文件读写等 I/O 操作。</li><li>UI rendering（浏览器独有）：在浏览器进行页面渲染之前执行的任务，通常与 DOM 相关。</li></ol><p>当执行一个宏任务时，JavaScript 引擎会把它放在任务队列的尾部。当事件循环开始下一轮时，它会从任务队列中取出队首的任务，然后执行它。</p><h2 id="如何理解script-整体代码-是宏任务" tabindex="-1">如何理解script（整体代码）是宏任务 <a class="header-anchor" href="#如何理解script-整体代码-是宏任务" aria-hidden="true">#</a></h2><p>宏任务指的是 JavaScript 引擎中的一些大型操作，例如 script 脚本执行、setTimeout/setInterval 定时器回调等。而微任务指的是一些较小的任务，例如 Promise 的回调函数、MutationObserver 的回调函数等。</p><p>对于 script（整体代码），它是一个宏任务，也就是说它会被作为一个整体来执行。当浏览器加载一个 HTML 页面时，它会将页面中的所有 script 标签中的代码都放到一个宏任务队列中，并按照顺序依次执行。也就是说，在一个宏任务中执行的所有代码都会被视为一个整体，并且在宏任务结束后才会执行下一个宏任务。</p><p>需要注意的是，即使是在一个 script 标签中的代码，也可以通过 Promise 等机制来创建微任务。这些微任务会在当前宏任务执行结束后立即执行。所以，当我们在 script 标签中写代码时，需要注意微任务和宏任务的执行顺序，以免出现不符合预期的结果。</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!</span><span style="color:#E5C07B;">DOCTYPE</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">html</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">lang</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">charset</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">http-equiv</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">content</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">content</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      console.log(1);</span></span>
<span class="line"><span style="color:#ABB2BF;">      setTimeout(() =&gt; </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">, 100);</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      setTimeout(() =&gt; </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">, 0);</span></span>
<span class="line"><span style="color:#ABB2BF;">      console.log(3);</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">&lt;!</span><span style="color:#79B8FF;">DOCTYPE</span><span style="color:#B392F0;"> html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">html</span><span style="color:#B392F0;"> lang</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;en&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">head</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> charset</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;UTF-8&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> http-equiv</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;X-UA-Compatible&quot;</span><span style="color:#B392F0;"> content</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;IE=edge&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> name</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;viewport&quot;</span><span style="color:#B392F0;"> content</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">title</span><span style="color:#B392F0;">&gt;Document&lt;/</span><span style="color:#FFAB70;">title</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;/</span><span style="color:#FFAB70;">head</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">body</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">script</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">      console.log(1);</span></span>
<span class="line"><span style="color:#B392F0;">      setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">      }, 100);</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;/</span><span style="color:#FFAB70;">script</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">script</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">      setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">      }, 0);</span></span>
<span class="line"><span style="color:#B392F0;">      console.log(3);</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;/</span><span style="color:#FFAB70;">script</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;/</span><span style="color:#FFAB70;">body</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#FFAB70;">html</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>输出结果<code>1342</code></p><h2 id="微任务" tabindex="-1">微任务 <a class="header-anchor" href="#微任务" aria-hidden="true">#</a></h2><p>（micro task）包括以下几种：</p><ol><li>Promise.then：通过 Promise API 创建的任务，在 Promise 对象的状态变为 resolved 或 rejected 时执行。</li><li>MutationObserver：用于监测 DOM 变化的 API，当 DOM 节点被添加、删除或修改时，会触发 MutationObserver 中注册的回调函数。</li><li>Object.observe（已废弃；Proxy 对象替代）：在 ECMAScript 6 中被引入的 API，用于监测对象的变化。但由于该 API 性能低下且易被滥用，已被废弃。</li><li>process.nextTick（Node.js 独有）：在 Node.js 中用于排队执行任务的 API，它会在当前执行栈执行完毕后立即执行，并且优先级高于 Promise。</li></ol><p>当执行一个微任务时，JavaScript 引擎会把它放在微任务队列的尾部。在当前宏任务执行完毕之后，JavaScript 引擎会立即执行微任务队列中的所有微任务。如果在执行微任务的过程中又产生了新的微任务，那么这些新的微任务会被添加到队列的末尾，等待下一轮的执行。</p><p>在实际开发中，可以利用宏任务和微任务的特性来实现一些复杂的异步操作，比如在渲染 UI 之前先进行一些数据计算和处理等。需要注意的是，在编写异步代码时，要充分考虑到宏任务和微任务之间的交互，以避免出现不可预期的结果。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;new Promise&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;then&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout(()</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject)</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;new Promise&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    resolve()</span></span>
<span class="line"><span style="color:#B392F0;">}).then(()</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;then&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">3</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>实际结果是：<code>1</code>=&gt;<code>&#39;new Promise&#39;</code>=&gt; <code>3</code> =&gt; <code>&#39;then&#39;</code> =&gt; <code>2</code></p><h2 id="在宏任务执行过程中产生的新的宏任务和微任务的执行顺序" tabindex="-1">在宏任务执行过程中产生的新的宏任务和微任务的执行顺序 <a class="header-anchor" href="#在宏任务执行过程中产生的新的宏任务和微任务的执行顺序" aria-hidden="true">#</a></h2><ol><li>首先，当前宏任务的同步任务执行完毕后，会检查该宏任务产生的微任务队列是否为空。如果不为空，会按照先进先出的顺序，依次取出微任务并执行它们，直到微任务队列为空。</li><li>接下来，会检查当前宏任务产生的宏任务队列是否为空。如果不为空，则会取出一个宏任务并执行它，执行完成后继续检查该宏任务的微任务队列和宏任务队列，直到两个队列都为空。</li><li>如果在执行新的宏任务过程中又产生了新的宏任务和微任务，就按照上述步骤依次执行，直到所有任务执行完成。</li></ol><p>需要注意的是，当产生新的宏任务时，新的宏任务会被添加到宏任务队列的末尾，而微任务则会被添加到微任务队列的末尾。因此，先产生的微任务会先被执行，而后产生的宏任务会后被执行。</p><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;3&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;4&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;7&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;8&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;5&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;6&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;1&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;2&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">.resolve().then(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;3&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;4&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;7&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">.resolve().then(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;8&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">.resolve().then(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;5&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;6&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">8</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F8F8F8;">6</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F8F8F8;">5</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F8F8F8;">3</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F8F8F8;">7</span><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F8F8F8;">8</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="事件循环-1" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环-1" aria-hidden="true">#</a></h2><p>事件循环的一个基本流程，可以简单地概括为以下几个步骤：</p><ol><li>任务进入执行栈，判断同步任务还是异步任务。</li><li>同步任务进入主线程（即主执行栈），异步任务进入任务队列。</li><li>主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。</li><li>上述过程不断重复，即形成了事件循环。</li></ol><p>需要注意的是，异步任务在执行完毕后，会被放入对应的任务队列中，等待 JavaScript 引擎的处理。其中，有两种类型的任务队列，分别是宏任务队列和微任务队列。当当前宏任务执行完毕后，JavaScript 引擎会首先处理微任务队列中的所有任务，然后再从宏任务队列中取出一个任务进行执行，这样不断地重复，直到任务队列中没有任务为止。</p><p>另外，需要注意的是，事件循环是单线程的，即 JavaScript 引擎只有一个主线程，所有的任务都在这个主线程上执行。由于 JavaScript 采用的是事件驱动模型，因此在执行过程中可能会出现一些异步操作，比如定时器、网络请求等，这些操作会在后台继续执行，等到它们所属的任务队列中的任务被执行时，才会被推入主线程执行。</p><h3 id="示例-首先处理微任务队列中的所有任务-然后再从宏任务队列中取出一个任务进行执行" tabindex="-1">示例-首先处理微任务队列中的所有任务，然后再从宏任务队列中取出一个任务进行执行 <a class="header-anchor" href="#示例-首先处理微任务队列中的所有任务-然后再从宏任务队列中取出一个任务进行执行" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;script start&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;setTimeout&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;promise1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;promise2&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;script end&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;script start&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;">() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;setTimeout&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">.resolve().then(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;">() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;promise1&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}).then(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;">() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;promise2&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;script end&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上述代码中，我们通过 <code>setTimeout</code> 和 <code>Promise</code> 分别创建了一个宏任务和一个微任务。在执行过程中，<code>console.log(&#39;script start&#39;)</code> 是同步任务，会先进入主线程执行，然后将异步任务推入任务队列，接着执行 <code>console.log(&#39;script end&#39;)</code>，同样也是同步任务，也会进入主线程执行，最后任务队列中有两个任务，分别是 <code>setTimeout</code> 和 <code>Promise</code>。</p><p>此时，JavaScript 引擎会先处理微任务队列中的任务，即 <code>Promise</code> 的两个 <code>then</code> 方法中的回调函数</p><p>接着，JavaScript 引擎会从宏任务队列中取出一个任务，也就是 <code>setTimeout</code> 的回调函数，执行完毕后，控制台会输出 <code>setTimeout</code>。因此，最终输出的结果是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">start</span></span>
<span class="line"><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">end</span></span>
<span class="line"><span style="color:#E06C75;">promise1</span></span>
<span class="line"><span style="color:#E06C75;">promise2</span></span>
<span class="line"><span style="color:#E06C75;">setTimeout</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">script start</span></span>
<span class="line"><span style="color:#B392F0;">script end</span></span>
<span class="line"><span style="color:#B392F0;">promise1</span></span>
<span class="line"><span style="color:#B392F0;">promise2</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>总的来说，JavaScript 引擎的执行顺序是先处理微任务队列中的任务，然后再处理宏任务队列中的任务。</p><h3 id="示例-当一个宏任务产生了多个新的微任务时" tabindex="-1">示例-当一个宏任务产生了多个新的微任务时 <a class="header-anchor" href="#示例-当一个宏任务产生了多个新的微任务时" aria-hidden="true">#</a></h3><p>当一个宏任务产生了多个新的微任务时，它们会按照产生的顺序被加入到微任务队列中，并且在当前宏任务执行完成后，JavaScript 引擎会依次处理这些微任务，直到微任务队列为空，才会去取下一个宏任务执行。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;start&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;setTimeout&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;setTimeout1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;promise1&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;promise2&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;end&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;start&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;setTimeout&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;setTimeout1&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">.resolve().then(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;promise1&#39;</span><span style="color:#B392F0;">));</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">.resolve().then(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;promise2&#39;</span><span style="color:#B392F0;">));</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;end&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在执行过程中，控制台输出的顺序是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E06C75;">start</span></span>
<span class="line"><span style="color:#E06C75;">end</span></span>
<span class="line"><span style="color:#E06C75;">setTimeout</span></span>
<span class="line"><span style="color:#E06C75;">promise1</span></span>
<span class="line"><span style="color:#E06C75;">promise2</span></span>
<span class="line"><span style="color:#E06C75;">setTimeout1</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">start</span></span>
<span class="line"><span style="color:#B392F0;">end</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span></span>
<span class="line"><span style="color:#B392F0;">promise1</span></span>
<span class="line"><span style="color:#B392F0;">promise2</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="如何理解settimeout-func-0" tabindex="-1">如何理解<code>setTimeout(func, 0) </code> <a class="header-anchor" href="#如何理解settimeout-func-0" aria-hidden="true">#</a></h2><p>setTimeout函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数，表示定时器的编号，以后可以用来取消这个定时器</p><p>在 JavaScript 中，<code>setTimeout()</code> 方法是一个异步函数，它的作用是在指定的时间后向任务队列中添加一个新的宏任务。当我们调用 <code>setTimeout()</code> 时，浏览器会将其注册到一个名为 &quot;Event Table&quot; 的数据结构中，并指定其需要等待的时间。当等待时间到达后，该函数会被移动到任务队列中，等待 JavaScript 引擎执行。</p><p>简单来说，<code>setTimeout()</code> 方法并不会立即执行传入的回调函数，而是会将其注册到 &quot;Event Table&quot; 中，并指定一个等待时间。只有当等待时间到达后，回调函数才会被添加到任务队列中，等待 JavaScript 引擎执行。因此，我们可以将 <code>setTimeout()</code> 视为一个将函数添加到宏任务队列中的定时器。</p><h3 id="参数" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a> <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h3><ul><li><p><code>function</code></p><p>function 是你想要在到期时间 (<code>delay</code>毫秒) 之后执行的函数</p></li><li><p><code>code</code></p><p>这是一个可选语法，你可以使用字符串而不是<code>function</code> ，在<code>delay</code>毫秒之后编译和执行字符串 (使用该语法是<strong>不推荐的，</strong> 原因和使用 <code>eval()</code>，在<code>delay</code>毫秒之后编译和执行字符串 (使用该语法是<strong>不推荐的，</strong> 原因和使用 <code>eval()</code>一样，有安全风险)</p></li><li><p><code>delay</code> 可选</p><p>延迟的毫秒数 (一秒等于 1000 毫秒)，函数的调用会在该延迟之后发生。如果省略该参数，delay 取默认值 0，意味着“马上”执行，或者尽快执行。不管是哪种情况，实际的延迟时间可能会比期待的 (delay 毫秒数) 值长，原因请查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout#%E5%AE%9E%E9%99%85%E5%BB%B6%E6%97%B6%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%80%BC%E6%9B%B4%E4%B9%85%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%9A%E6%9C%80%E5%B0%8F%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4" target="_blank" rel="noreferrer">实际延时比设定值更久的原因：最小延迟时间</a></p></li><li><p><code>arg1, ..., argN</code> 可选</p><p>附加参数，一旦定时器到期，它们会作为参数传递给<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer"><code>function</code></a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;calculating &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39; x &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;...&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 这里的第三个参数会传递给第一个函数，作为其参数</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;"> </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) {</span></span>
<span class="line"><span style="color:#B392F0;">        log(</span><span style="color:#FFAB70;">&#39;calculating &#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> input </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39; x &#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> input </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;...&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 这里的第三个参数会传递给第一个函数，作为其参数</span></span>
<span class="line"><span style="color:#B392F0;">        setTimeout(resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">500</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> input </span><span style="color:#F97583;">*</span><span style="color:#B392F0;"> input)</span></span>
<span class="line"><span style="color:#B392F0;">    })</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>setTimeout在指定的时间后向任务队列中添加一个新的宏任务，JavaScript在主线程上执行代码，立即执行同步代码，执行完同步代码，查看到任务队列有待执行的宏任务，进入宏任务执行阶段</p><p>所以输出结果是<code>acb</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;a&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;b&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;c&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="示例-settimeout在指定的时间后向任务队列中添加一个新的宏任务" tabindex="-1">示例-setTimeout在指定的时间后向任务队列中添加一个新的宏任务 <a class="header-anchor" href="#示例-settimeout在指定的时间后向任务队列中添加一个新的宏任务" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">3</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span><span style="color:#F8F8F8;">10</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">5</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span><span style="color:#F8F8F8;">100</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>输出结果是<code>14235</code> ，宏任务的顺序是<code>235</code></p><h2 id="event-table是什么" tabindex="-1">Event Table是什么 <a class="header-anchor" href="#event-table是什么" aria-hidden="true">#</a></h2><p>Event Table（事件表）是浏览器内部的一个数据结构，用于存储异步事件的相关信息。它包含了注册的事件的类型、回调函数等信息，并在事件触发时将事件信息传递给事件队列（Event Queue）。</p><p>当我们使用 <code>setTimeout</code>、<code>setInterval</code> 等定时器 API 时，浏览器会将相关信息添加到 Event Table 中，并在设定的时间到达后，将这些事件信息添加到宏任务队列中等待执行。因此，Event Table 是宏任务的来源之一。</p>`,69),e=[o];function c(t,r,B,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{d as __pageData,u as default};
