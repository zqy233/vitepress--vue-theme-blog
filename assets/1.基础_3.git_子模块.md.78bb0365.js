import{_ as s,o as a,c as n,a as l}from"./app.bfa9bd4b.js";const b=JSON.parse('{"title":"子模块","description":"","frontmatter":{},"headers":[{"level":2,"title":"如何使用 Git 子模块","slug":"如何使用-git-子模块","link":"#如何使用-git-子模块","children":[]},{"level":2,"title":".gitmodules","slug":"gitmodules","link":"#gitmodules","children":[]},{"level":2,"title":"submodule","slug":"submodule","link":"#submodule","children":[]}],"relativePath":"1.基础/3.git/子模块.md","lastUpdated":1720835436686}'),p={name:"1.基础/3.git/子模块.md"},e=l(`<h1 id="子模块" tabindex="-1">子模块 <a class="header-anchor" href="#子模块" aria-hidden="true">#</a></h1><p>Git 子模块是一种允许您在一个 Git 仓库中嵌套其他 Git 仓库的机制。</p><p>子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p><p>在一个仓库中包含其他项目作为子模块，以便在父项目中引用、管理和使用这些子项目的特定版本。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">submodule</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">https://github.com/chaconinc/DbConnector</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">submodule</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">https://github.com/chaconinc/DbConnector</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="如何使用-git-子模块" tabindex="-1">如何使用 Git 子模块 <a class="header-anchor" href="#如何使用-git-子模块" aria-hidden="true">#</a></h2><p>以下是如何使用 Git 子模块的基本步骤：</p><p><strong>添加子模块</strong>：首先，您需要将子模块添加到您的主项目中。假设您已经有一个主项目，可以使用以下命令添加子模块：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">submodule</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">URL_to_submodule_repositor</span><span style="color:#ABB2BF;">y&gt; </span><span style="color:#98C379;">path/to/submodule</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">submodule</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9DB1C5;">URL_to_submodule_repositor</span><span style="color:#B392F0;">y</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">path/to/submodule</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>&lt;URL_to_submodule_repository&gt;</code> 是子模块的远程仓库 URL。</li><li><code>path/to/submodule</code> 是子模块将存储在主项目中的路径。</li></ul><p><strong>初始化和更新子模块</strong>：一旦添加了子模块，您需要初始化它以拉取子模块的内容。在主项目目录下运行：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">submodule</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">init</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">submodule</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">update</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">submodule</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">init</span></span>
<span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">submodule</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">update</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>初始化子模块以及更新子模块是两个不同的步骤：</p><ol><li><strong>初始化子模块</strong>：使用 <code>git submodule init</code> 命令会告诉 Git 主项目，您打算在主项目中使用子模块。这个命令会读取主项目中的 <code>.gitmodules</code> 文件，该文件包含了有关子模块的信息，然后在主项目中创建一个与子模块相关的内部数据结构。这个操作仅需要在主项目中执行一次。</li><li><strong>更新子模块</strong>：使用 <code>git submodule update</code> 命令会将子模块的内容（即子模块的代码和历史记录）拉取到主项目中。这个命令会根据 <code>.gitmodules</code> 文件中指定的子模块的远程仓库 URL 和提交（commit）信息，从远程仓库中获取子模块的内容。这个操作可能需要多次运行，因为子模块可以有不同的提交，特别是如果您在主项目的不同分支中切换时，子模块可能需要更新到与主项目分支兼容的状态。</li></ol><p>总之，初始化子模块告诉主项目它将使用子模块，并更新子模块拉取实际的子模块内容。这两个命令通常会一起使用，但初始化通常只需要执行一次，而更新可能需要多次执行，以确保子模块中的内容与主项目中所期望的一致。</p><p>如果您想一次性初始化和更新所有的子模块，您可以运行：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">submodule</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">update</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--init</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--recursive</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">submodule</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">update</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">--init</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">--recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>切换到子模块目录</strong>：在主项目中，子模块只是指向子模块仓库的引用。要在子模块仓库中工作，您需要进入子模块目录：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">path/to/submodule</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">cd </span><span style="color:#9DB1C5;">path/to/submodule</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在子模块目录中，您可以像在普通 Git 仓库中一样执行 Git 命令，例如 <code>git checkout</code>、<code>git pull</code> 等。</p><p><strong>拉取更新</strong>：当子模块的代码发生变化并需要更新时，在子模块目录中运行 <code>git pull</code> 来获取最新代码：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">pull</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">pull</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>提交子模块的状态</strong>：在主项目中，当子模块的状态（即子模块的引用或版本）发生变化时，您需要提交这些变化。在主项目目录下运行：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">path/to/submodule</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">commit</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-m</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Update submodule to latest commit&quot;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">path/to/submodule</span></span>
<span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">commit</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-m</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Update submodule to latest commit&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>克隆包含子模块的仓库</strong>：如果其他人要克隆包含子模块的仓库，他们可以使用以下命令：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">clone</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">URL_to_main_repositor</span><span style="color:#ABB2BF;">y&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main_repository</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">submodule</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">init</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">submodule</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">update</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">clone</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9DB1C5;">URL_to_main_repositor</span><span style="color:#B392F0;">y</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">cd </span><span style="color:#9DB1C5;">main_repository</span></span>
<span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">submodule</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">init</span></span>
<span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">submodule</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">update</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这将克隆主项目并初始化和更新子模块。</p><p><strong>注意事项</strong>：</p><ul><li>子模块仓库是独立的 Git 仓库，需要自己管理提交、分支等。</li><li>当切换主项目分支时，子模块可能需要手动更新到与主项目分支兼容的状态。</li><li>如果不希望在主项目中跟踪子模块的特定版本，可以使用 <code>--depth 1</code> 参数来克隆子模块，以减小主项目的大小。</li><li>子模块的更新需要谨慎，以避免不必要的复杂性。通常，只有在确实需要子模块的特定版本时才会更新。</li></ul><h2 id="gitmodules" tabindex="-1">.gitmodules <a class="header-anchor" href="#gitmodules" aria-hidden="true">#</a></h2><p>.gitmodules 是 Git 用来管理子模块的文件，子模块是一个 Git 仓库中包含另一个 Git 仓库。</p><p>该文件存储在 Git 仓库的根目录下，用于记录当前仓库中使用的子模块信息，包括子模块的名称、URL、分支等信息。</p><p>在执行 <code>git clone</code> 命令时，子模块不会自动初始化和更新，需要手动执行 <code>git submodule init</code> 和 <code>git submodule update</code> 命令来完成子模块的初始化和更新。</p><p>如果要添加或删除子模块，需要修改 .gitmodules 文件并执行相应的命令来更新子模块。</p><h2 id="submodule" tabindex="-1">submodule <a class="header-anchor" href="#submodule" aria-hidden="true">#</a></h2><p>修改完 .gitmodules 文件后，需要使用以下命令更新 Git 仓库的子模块：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">submodule</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">update</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--init</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--recursive</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git </span><span style="color:#9DB1C5;">submodule</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">update</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">--init</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">--recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该命令会按照新的 .gitmodules 文件重新初始化子模块，并更新子模块所在的仓库</p>`,38),o=[e];function t(c,r,i,d,u,y){return a(),n("div",null,o)}const m=s(p,[["render",t]]);export{b as __pageData,m as default};
