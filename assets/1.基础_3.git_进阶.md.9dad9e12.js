import{_ as e,o as t,c as i,a as d}from"./app.bfa9bd4b.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"git reset --hard 和--soft区别","slug":"git-reset-hard-和-soft区别","link":"#git-reset-hard-和-soft区别","children":[]},{"level":2,"title":"分支指针有啥用","slug":"分支指针有啥用","link":"#分支指针有啥用","children":[]},{"level":2,"title":"git reset不传参的情况下使用hard 还是solft","slug":"git-reset不传参的情况下使用hard-还是solft","link":"#git-reset不传参的情况下使用hard-还是solft","children":[]},{"level":2,"title":"git提交什么情况下会进入游离态","slug":"git提交什么情况下会进入游离态","link":"#git提交什么情况下会进入游离态","children":[]}],"relativePath":"1.基础/3.git/进阶.md","lastUpdated":1720835436686}'),r={name:"1.基础/3.git/进阶.md"},a=d('<h2 id="git-reset-hard-和-soft区别" tabindex="-1">git reset --hard 和--soft区别 <a class="header-anchor" href="#git-reset-hard-和-soft区别" aria-hidden="true">#</a></h2><p><code>git reset</code> 命令用于将当前分支指针（HEAD）和工作区恢复到指定的提交状态。其中， <code>--hard</code> 和 <code>--soft</code> 是 reset 命令的两个选项。</p><ul><li><code>git reset --hard</code>: 这个命令将分支指针强制移动到指定的提交，并将工作区和暂存区强制更新为该提交的内容。使用这个选项会丢失所有未提交的更改，因此请小心使用。</li><li><code>git reset --soft</code>: 这个命令将分支指针移动到指定的提交，但不会更改工作区或暂存区的内容。这意味着所有更改都仍然存在于本地，并且可以重新提交或保存到一个新的分支上。</li></ul><p>因此，<code>--hard</code> 和 <code>--soft</code> 的主要区别在于是否强制更新工作区和暂存区。<code>--hard</code> 会丢失所有未提交的更改，而 <code>--soft</code> 会保留这些更改并允许重新提交。</p><h2 id="分支指针有啥用" tabindex="-1">分支指针有啥用 <a class="header-anchor" href="#分支指针有啥用" aria-hidden="true">#</a></h2><p>Git 的分支指针（branch pointer）是一个指向某个提交（commit）的指针。分支指针使得我们可以将代码库分成多个分支，并在这些分支上并行开发不同的特性、修复不同的 bug 等。</p><p>使用分支指针可以在不影响主线代码的同时，开发、测试新功能或修复 bug，并保证这些变更不会干扰主线代码。</p><p>在创建分支时，Git 会在本地创建一个指向当前提交的指针。当我们在分支上提交变更时，分支指针会自动向前移动，指向新的提交。因此，分支指针可以方便地跟踪每个分支上的工作进度，以及每个分支的代码状态。</p><p>在实际开发中，分支指针是 Git 中最重要的工具之一。它们可以帮助团队协同开发，同时保持代码库的稳定性和可靠性。</p><h2 id="git-reset不传参的情况下使用hard-还是solft" tabindex="-1">git reset不传参的情况下使用hard 还是solft <a class="header-anchor" href="#git-reset不传参的情况下使用hard-还是solft" aria-hidden="true">#</a></h2><p>如果不传递参数，则 <code>git reset</code> 默认使用 <code>--mixed</code> 选项。这意味着分支指针会移动到指定的提交，并且会取消暂存区的所有更改，但不会取消工作区的更改。这种行为相当于执行以下命令：</p><h2 id="git提交什么情况下会进入游离态" tabindex="-1">git提交什么情况下会进入游离态 <a class="header-anchor" href="#git提交什么情况下会进入游离态" aria-hidden="true">#</a></h2><p>在 Git 中，当一个提交（commit）不再被任何分支或标签引用时，它就会进入游离态（dangling state）。这种情况通常发生在以下几种情况下：</p><ol><li>分支被删除：如果您在合并分支或删除分支时出现问题，可能会导致某些提交没有任何分支或标签引用。</li><li>重置分支：使用 <code>git reset</code> 命令可以将分支指针移动到另一个提交，这可能会导致某些提交不再被分支或标签引用。</li><li>强制推送：如果您在本地撤消了某些提交并将更改强制推送到远程分支，可能会导致远程分支上的提交与本地分支不同步，从而导致某些提交游离。</li></ol><p>当一个提交进入游离态时，它不会立即被删除。Git 会保留这些提交，以便您可以通过使用 <code>git fsck</code> 命令查找它们并恢复它们，或者将它们重新引用到其他分支或标签上。如果您不想保留这些提交，可以使用 <code>git gc</code> 命令将它们清理掉，从而释放磁盘空间。</p>',15),o=[a];function s(c,l,h,n,g,p){return t(),i("div",null,o)}const u=e(r,[["render",s]]);export{f as __pageData,u as default};
