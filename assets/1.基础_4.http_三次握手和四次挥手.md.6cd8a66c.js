import{_ as s,o as l,c as n,a}from"./app.bfa9bd4b.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]},{"level":2,"title":"四次挥手","slug":"四次挥手","link":"#四次挥手","children":[]}],"relativePath":"1.基础/4.http/三次握手和四次挥手.md","lastUpdated":1720835436686}'),e={name:"1.基础/4.http/三次握手和四次挥手.md"},i=a(`<h2 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-hidden="true">#</a></h2><p>三次握手（Three-Way Handshake）是TCP协议在建立连接时使用的过程，用于确保客户端和服务器之间的连接是可靠的，并且双方都准备好发送和接收数据。具体过程如下：</p><ol><li><strong>第一次握手（SYN）：</strong><ul><li>客户端向服务器发送一个SYN（Synchronize）报文，表示客户端希望建立连接，并且告知客户端的初始序列号（Sequence Number）。</li></ul></li><li><strong>第二次握手（SYN-ACK）：</strong><ul><li>服务器收到SYN报文后，回复一个SYN-ACK报文，表示同意建立连接，并且告知服务器的初始序列号。同时，服务器确认收到客户端的SYN报文，将客户端的序列号加1作为ACK（Acknowledgment Number）。</li></ul></li><li><strong>第三次握手（ACK）：</strong><ul><li>客户端收到服务器的SYN-ACK报文后，回复一个ACK报文，确认收到服务器的SYN报文，将服务器的序列号加1作为ACK（Acknowledgment Number）。此时，连接建立完成，双方可以开始传输数据。</li></ul></li></ol><p>以下是三次握手的简化示意图：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">  客户端                             服务器</span></span>
<span class="line"><span style="color:#abb2bf;">  SYN ----------------------------&gt; </span></span>
<span class="line"><span style="color:#abb2bf;">                                     SYN-ACK</span></span>
<span class="line"><span style="color:#abb2bf;">  &lt;------------------------------</span></span>
<span class="line"><span style="color:#abb2bf;">  ACK ----------------------------&gt;</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#b392f0;">  客户端                             服务器</span></span>
<span class="line"><span style="color:#b392f0;">  SYN ----------------------------&gt; </span></span>
<span class="line"><span style="color:#b392f0;">                                     SYN-ACK</span></span>
<span class="line"><span style="color:#b392f0;">  &lt;------------------------------</span></span>
<span class="line"><span style="color:#b392f0;">  ACK ----------------------------&gt;</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>具体步骤如下：</p><ol><li><strong>第一次握手（客户端 -&gt; 服务器）：</strong><ul><li>客户端发送一个SYN报文，报文中包含一个初始序列号（例如，<code>seq = x</code>）。</li></ul></li><li><strong>第二次握手（服务器 -&gt; 客户端）：</strong><ul><li>服务器收到SYN报文后，发送一个SYN-ACK报文。报文中包含服务器的初始序列号（例如，<code>seq = y</code>）和对客户端SYN报文的确认号（<code>ack = x + 1</code>）。</li></ul></li><li><strong>第三次握手（客户端 -&gt; 服务器）：</strong><ul><li>客户端收到SYN-ACK报文后，发送一个ACK报文。报文中包含对服务器SYN报文的确认号（<code>ack = y + 1</code>）。</li></ul></li></ol><p>通过这三次握手，双方确认了彼此的初始序列号，并且确保了连接的可靠性。三次握手的设计使得TCP连接能够在不可靠的网络环境中可靠地建立连接，从而进行后续的数据传输。</p><h2 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-hidden="true">#</a></h2><p>TCP连接的断开需要四次挥手（Four-Way Handshake）来确保连接的两端都能优雅地关闭通信。具体过程如下：</p><ol><li><strong>第一次挥手（FIN）：</strong><ul><li>主机A（主动关闭方）发送一个FIN报文给主机B，表示主机A不再发送数据，但是可以接收数据。</li></ul></li><li><strong>第二次挥手（ACK）：</strong><ul><li>主机B收到FIN报文后，返回一个ACK报文，确认已经收到主机A的FIN请求。同时，主机B可以继续发送数据给主机A。</li></ul></li><li><strong>第三次挥手（FIN）：</strong><ul><li>主机B发送一个FIN报文给主机A，表示主机B也不再发送数据。</li></ul></li><li><strong>第四次挥手（ACK）：</strong><ul><li>主机A收到主机B的FIN报文后，发送一个ACK报文给主机B，确认已经收到主机B的FIN请求。此时，主机A和主机B都会等待一定的时间，以确保ACK报文能够被对方成功接收，然后再关闭连接。</li></ul></li></ol><p>TCP协议中的FIN（Finish）报文用于表示发送方已经完成了数据发送，不会再发送任何数据。具体来说，FIN报文的作用是告诉对方：“我这边的数据已经全部发送完毕了，不会再发送新的数据了。”</p><p>但是，收到FIN报文的一方仍然可以继续发送数据，直到它也发送一个FIN报文来表示它的数据发送也已经完成。</p><p>因此，TCP连接的关闭过程需要双方都发送和接收FIN报文，从而确保双方都能完成数据发送并确认连接的关闭。</p>`,14),p=[i];function o(t,r,c,d,b,u){return l(),n("div",null,p)}const _=s(e,[["render",o]]);export{g as __pageData,_ as default};
