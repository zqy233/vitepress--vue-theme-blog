import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const d=JSON.parse('{"title":"Ajax","description":"","frontmatter":{},"headers":[{"level":2,"title":"Ajax和XMLHttpRequest的关系","slug":"ajax和xmlhttprequest的关系","link":"#ajax和xmlhttprequest的关系","children":[]},{"level":2,"title":"fetch","slug":"fetch","link":"#fetch","children":[]},{"level":2,"title":"短/长轮询","slug":"短-长轮询","link":"#短-长轮询","children":[{"level":3,"title":"短轮询","slug":"短轮询","link":"#短轮询","children":[]},{"level":3,"title":"长轮询","slug":"长轮询","link":"#长轮询","children":[]}]}],"relativePath":"2.JS/1.基础/20.ajax.md","lastUpdated":1720835436686}'),p={name:"2.JS/1.基础/20.ajax.md"},e=l(`<h1 id="ajax" tabindex="-1">Ajax <a class="header-anchor" href="#ajax" aria-hidden="true">#</a></h1><blockquote><p>全称为 Asynchronous JavaScript And XML，并非编程语言，仅仅组合了浏览器内建的 XMLHttpRequest 对象（从 web 服务器请求数据）和 JavaScript 和 HTML DOM（显示或使用数据），ajax 其实是一个容易误导人的名称。因为目前更流行前后端分离，所以较少使用 XML 来传输数据，更多地使用 JSON 和 formdata，ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面</p></blockquote><h2 id="ajax和xmlhttprequest的关系" tabindex="-1">Ajax和XMLHttpRequest的关系 <a class="header-anchor" href="#ajax和xmlhttprequest的关系" aria-hidden="true">#</a></h2><p>ajax 是一种技术方案，但并不是一种新技术 ajax 最核心的依赖是浏览器提供的 XMLHttpRequest 对象 所以用一句话来总结两者的关系：使用 XMLHttpRequest 对象来发送一个Ajax请求</p><h2 id="fetch" tabindex="-1">fetch <a class="header-anchor" href="#fetch" aria-hidden="true">#</a></h2><p>fetch 是一种 HTTP 数据请求的方式，是 XMLHttpRequest 的一种替代方案</p><p>fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象</p><p>需要先返回一次，第二次才是想要的结果</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://localhost:3000/test/select&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;POST&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">response</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">222</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">fetch(</span><span style="color:#FFAB70;">&#39;http://localhost:3000/test/select&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  method</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;POST&#39;</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"><span style="color:#B392F0;">  .then(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (response) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> response</span></span>
<span class="line"><span style="color:#B392F0;">  })</span></span>
<span class="line"><span style="color:#B392F0;">  .then(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (res) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">res</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">200</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">11</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#F8F8F8;">222</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  })</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="短-长轮询" tabindex="-1">短/长轮询 <a class="header-anchor" href="#短-长轮询" aria-hidden="true">#</a></h2><h3 id="短轮询" tabindex="-1">短轮询 <a class="header-anchor" href="#短轮询" aria-hidden="true">#</a></h3><p><strong>定义</strong>：其实就是普通的轮询。指在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客户端的浏览器。</p><p><strong>应用场景</strong>：传统的web通信模式。后台处理数据，需要一定时间，前端想要知道后端的处理结果，就要不定时的向后端发出请求以获得最新情况。</p><p><strong>优点</strong>：前后端程序编写比较容易。</p><p><strong>缺点</strong>：请求中有大半是无用，难于维护，浪费带宽和服务器资源；响应的结果没有顺序（因为是异步请求，当发送的请求没有返回结果的时候，后面的请求又被发送。而此时如果后面的请求比前面的请 求要先返回结果，那么当前面的请求返回结果数据时已经是过时无效的数据了）。 实例：适于小型应用。</p><p><strong>前端实现：</strong></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">XMLHttpRequest</span><span style="color:#ABB2BF;">();    </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){        </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;/user&#39;</span><span style="color:#ABB2BF;">);        </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){  </span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">()    </span></span>
<span class="line"><span style="color:#ABB2BF;">     };       </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();    </span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> xhr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> XMLHttpRequest();    </span></span>
<span class="line"><span style="color:#B392F0;">  setInterval(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(){        </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.open(</span><span style="color:#FFAB70;">&#39;GET&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#FFAB70;">&#39;/user&#39;</span><span style="color:#B392F0;">);        </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.onreadystatechange </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(){  </span></span>
<span class="line"><span style="color:#B392F0;">      ajax()    </span></span>
<span class="line"><span style="color:#B392F0;">     };       </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.send();    </span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span><span style="color:#F8F8F8;">1000</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="长轮询" tabindex="-1">长轮询 <a class="header-anchor" href="#长轮询" aria-hidden="true">#</a></h3><p><strong>定义</strong>：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。</p><p><strong>优点</strong>：在无消息的情况下不会频繁的请求，耗费资源小。</p><p><strong>缺点</strong>：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护。</p><p><strong>实例</strong>：WebQQ、Hi网页版、Facebook IM。</p><p><strong>前端实现：</strong></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(){        </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;/user&#39;</span><span style="color:#ABB2BF;">);        </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){              </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">();        </span></span>
<span class="line"><span style="color:#ABB2BF;">   };        </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();    </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> ajax(){        </span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> xhr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> XMLHttpRequest();</span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.open(</span><span style="color:#FFAB70;">&#39;GET&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#FFAB70;">&#39;/user&#39;</span><span style="color:#B392F0;">);        </span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.onreadystatechange </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(){              </span></span>
<span class="line"><span style="color:#B392F0;">   ajax();        </span></span>
<span class="line"><span style="color:#B392F0;">   };        </span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.send();    </span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,24),o=[e];function r(t,c,B,y,F,i){return n(),a("div",null,o)}const h=s(p,[["render",r]]);export{d as __pageData,h as default};
