import{_ as s,o as n,c as a,a as l}from"./app.bfa9bd4b.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"rollup.config.ts","slug":"rollup-config-ts","link":"#rollup-config-ts","children":[]},{"level":2,"title":"package.json","slug":"package-json","link":"#package-json","children":[{"level":3,"title":"\\"//\\": \\"READ CONTRIBUTING.md to understand what to put under deps vs. devDeps!\\"","slug":"read-contributing-md-to-understand-what-to-put-under-deps-vs-devdeps","link":"#read-contributing-md-to-understand-what-to-put-under-deps-vs-devdeps","children":[]},{"level":3,"title":"peerDependencies","slug":"peerdependencies","link":"#peerdependencies","children":[]},{"level":3,"title":"peerDependenciesMeta","slug":"peerdependenciesmeta","link":"#peerdependenciesmeta","children":[]}]},{"level":2,"title":"bin/vite.js","slug":"bin-vite-js","link":"#bin-vite-js","children":[]}],"relativePath":"6.源码阅读/vite/vite.md","lastUpdated":1720835436706}'),p={name:"6.源码阅读/vite/vite.md"},o=l(`<h2 id="rollup-config-ts" tabindex="-1">rollup.config.ts <a class="header-anchor" href="#rollup-config-ts" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">readFileSync</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;node:fs&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;node:path&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">fileURLToPath</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;node:url&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nodeResolve</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@rollup/plugin-node-resolve&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">typescript</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@rollup/plugin-typescript&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">commonjs</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@rollup/plugin-commonjs&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">json</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@rollup/plugin-json&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">MagicString</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;magic-string&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Plugin</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">RollupOptions</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;rollup&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineConfig</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;rollup&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">licensePlugin</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./rollupLicensePlugin&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 读取当前模块所在的 package.json 文件，并将其解析为一个 JavaScript 对象，存储在变量 pkg 中。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// readFileSync 是 Node.js 提供的文件读取同步方法，可以同步地读取文件内容，并返回文件内容。它的用法类似于浏览器端的 XMLHttpRequest 或 fetch 方法中的读取本地文件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// i<wbr>mport.meta.url 表示当前模块的 URL 地址，new URL(&#39;./package.json&#39;, i<wbr>mport.meta.url) 表示当前模块所在目录下的 package.json 文件的 URL 地址。readFileSync 函数读取该文件的内容，返回一个 Buffer 对象，再使用 toString() 方法将其转换为字符串。最后使用 JSON.parse 方法将字符串解析为 JavaScript 对象，并将该对象赋值给变量 pkg。</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pkg</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">readFileSync</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">URL</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./package.json&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在ES模块中，__dirname不像CommonJS模块中一样被定义为模块的绝对路径。取而代之的是，ES模块中的i<wbr>mport.meta.url提供了模块的URL地址。而在Node.js中，使用fileURLToPath()方法将URL转换为路径，并赋值给__dirname，从而获取ES模块的目录路径。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 具体来说，new URL(&#39;.&#39;, i<wbr>mport.meta.url)中的.表示当前目录，i<wbr>mport.meta.url获取了当前模块的URL，fileURLToPath()将其转换为路径格式，最终得到的__dirname是当前ES模块的目录路径。</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__dirname</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fileURLToPath</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">URL</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这段代码是一个 Rollup 配置文件中的一个对象，用于将 TypeScript 源代码编译为 ES6 模块。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 具体来说，这个对象使用了 Rollup 的 defineConfig 函数，用于定义 Rollup 的配置信息。这个配置信息包含以下内容：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// input 属性指定了源代码的入口文件，即 TypeScript 文件的路径。在这个例子中，入口文件位于 src/client/env.ts。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// plugins 属性是一个插件数组，其中包含了需要使用的插件。在这个例子中，使用了 typescript 插件，用于编译 TypeScript 文件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// output 属性指定了输出文件的配置信息。具体来说，它包含以下属性：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// file 属性指定了输出文件的路径和文件名。在这个例子中，输出文件位于 dist/client/env.mjs。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// sourcemap 属性用于生成源代码映射文件。在这个例子中，开启了源代码映射。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// sourcemapPathTransform 属性是一个函数，用于将生成的源代码映射文件中的路径转换为相对路径。在这个例子中，这个函数将源代码映射文件中的路径转换为文件名。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// sourcemapIgnoreList 属性是一个函数，用于设置哪些源代码映射文件需要被忽略。在这个例子中，这个函数返回了 true，表示所有的源代码映射文件都应该被忽略。</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">envConfig</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/client/env.ts&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">typescript</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">tsconfig</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/client/tsconfig.json&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;dist/client&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;env.mjs&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">sourcemap</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">sourcemapPathTransform</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">relativeSourcePath</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// path.basename() 是 Node.js 中的一个方法，用于返回一个文件路径的最后一部分，也就是文件名（包括扩展名）。比如，path.basename(&#39;/home/user/file.txt&#39;) 返回的是 file.txt。如果指定第二个参数，可以去掉文件扩展名。例如，path.basename(&#39;/home/user/file.txt&#39;, &#39;.txt&#39;) 返回的是 file。在示例中，sourcemapPathTransform 函数使用 path.basename() 方法将相对源代码路径转换为文件名，用于生成 sourcemap。</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">basename</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">relativeSourcePath</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">sourcemapIgnoreList</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// input 属性指定了客户端代码入口文件的路径为 src/client/client.ts。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// external 属性指定了需要外部引入的模块，其中 ./env 和 @vite/env 是需要外部引入的模块。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在这个配置中，external 属性指定了一些模块，这些模块将不会被打包到最终的输出文件中，而是会被视为外部依赖，在运行时需要从其他地方引入。在这个配置中，external 属性指定了 ./env 和 @vite/env 两个模块，因此这些模块会被视为外部依赖，并且不会被打包到最终的输出文件中。这意味着在使用最终的输出文件时，这些模块必须从其他地方进行引入，否则会导致运行时错误。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// plugins 属性是一个数组，其中包含了 TypeScript 编译器的配置信息，指定了 TypeScript 配置文件的路径为 src/client/tsconfig.json。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// output 属性指定了输出文件的相关信息，包括输出文件的路径为 dist/client/client.mjs，开启了生成 sourcemap 功能并指定了源代码路径转换函数和忽略列表函数。</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">clientConfig</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/client/client.ts&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">external</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;./env&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;@vite/env&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">typescript</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">tsconfig</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/client/tsconfig.json&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;dist/client&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;client.mjs&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">sourcemap</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">sourcemapPathTransform</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">relativeSourcePath</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">basename</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">relativeSourcePath</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">sourcemapIgnoreList</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// treeshake 属性指定了打包时的 Tree-shaking 配置，包括禁用 tryCatchDeoptimization 选项，设置 propertyReadSideEffects 为 false，并且对于外部模块，使用 no-external 选项来进行 Tree-shaking，也就是只对模块内部的代码进行优化。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// output 属性指定了输出文件的相关信息，包括输出目录为 ./dist，入口文件的命名规则为 node/[name].js，chunk 文件的命名规则为 node/chunks/dep-[hash].js，使用 ESM 格式进行输出，并且禁用了 external live bindings。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// onwarn 属性指定了一个函数，用于处理警告信息。在这个函数中，如果警告信息中包含了 &quot;Circular dependency&quot; 字符串，就忽略这个警告，否则将调用默认的 warn 函数进行警告输出。</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sharedNodeOptions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">treeshake</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">moduleSideEffects</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;no-external&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">propertyReadSideEffects</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">tryCatchDeoptimization</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;./dist&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">entryFileNames</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`node/[name].js\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">chunkFileNames</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;node/chunks/dep-[hash].js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">exports</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;named&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">format</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;esm&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">externalLiveBindings</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">freeze</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">onwarn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">warning</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">warn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">warning</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">message</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Circular dependency&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">warning</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 nodeResolve 插件解析 Node.js 模块路径。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 typescript 插件编译 TypeScript 代码。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 shimDepsPlugin 插件解决一些依赖库的问题。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 commonjs 插件将 CommonJS 模块转换为 ES6 模块。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 json 插件将 JSON 文件转换为 ES6 模块。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 licensePlugin 插件添加许可证信息。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 cjsPatchPlugin 插件修复一些 CommonJS 模块的问题。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 其中，一些插件只在生产环境下生效，如 shimDepsPlugin 和 licensePlugin。函数最终返回的是一个包含这些插件的数组。</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createNodePlugins</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">isProduction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">sourceMap</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">declarationDir</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">): (</span><span style="color:#E5C07B;">Plugin</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">false</span><span style="color:#ABB2BF;">)[] {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// Rollup 构建工具中使用 @rollup/plugin-node-resolve 插件进行模块解析。解析模块依赖关系，并返回对应的模块路径，以便 Rollup 在打包过程中能够正确地将各个模块打包成一个或多个文件。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// nodeResolve({ preferBuiltins: true }) 是对该插件的配置，表示在解析模块时优先使用 Node.js 核心模块，这有助于提高打包的效率和稳定性。当然，如果某个模块不存在于核心模块中，该插件也会去查找项目中安装的第三方模块</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">nodeResolve</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">preferBuiltins</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">typescript</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">tsconfig</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/node/tsconfig.json&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">sourceMap</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">declaration</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">declarationDir</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">declarationDir</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">declarationDir</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">declarationDir</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// Some deps have try...catch require of optional deps, but rollup will</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// generate code that force require them upfront for side effects.</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// Shim them with eval() so rollup can skip these calls.</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">shimDepsPlugin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// chokidar -&gt; fsevents</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;fsevents-handler.js&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`require(&#39;fsevents&#39;)\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`__require(&#39;fsevents&#39;)\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// postcss-import -&gt; sugarss</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;process-content.js&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;require(&quot;sugarss&quot;)&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`__require(&#39;sugarss&#39;)\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;lilconfig/dist/index.js&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /: require,/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`: __require,\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// postcss-load-config calls require after register ts-node</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;postcss-load-config/src/index.js&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">/require(?=</span><span style="color:#56B6C2;">\\(</span><span style="color:#E06C75;">(configFile</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">&#39;ts-node&#39;)</span><span style="color:#56B6C2;">\\)</span><span style="color:#E06C75;">)/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`__require\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;json-stable-stringify/index.js&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">var json = typeof JSON.</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">require</span><span style="color:#56B6C2;">\\(</span><span style="color:#E06C75;">&#39;jsonify&#39;</span><span style="color:#56B6C2;">\\)</span><span style="color:#E06C75;">;</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">gm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;var json = JSON&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// postcss-import uses the \`resolve\` dep if the \`resolve\` option is not passed.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// However, we always pass the \`resolve\` option. Remove this import to avoid</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// bundling the \`resolve\` dep.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;postcss-import/index.js&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;const resolveId = require(&quot;./lib/resolve-id&quot;)&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;const resolveId = (id) =&gt; id&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      }),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// @rollup/plugin-commonjs 是 Rollup.js 打包工具的插件之一，它可以将 CommonJS 模块转换成 ES6 模块，以便在浏览器中使用。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 在这个代码段中，commonjs 插件被调用并传递了一个配置对象，该对象包括以下选项：</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// extensions：一个字符串数组，指定要解析的文件扩展名。在这里，.js 表示只解析 JavaScript 文件。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ignore：一个字符串数组，指定要忽略的依赖项。在这里，插件忽略了 bufferutil 和 utf-8-validate，这是 ws 模块的本机依赖项，但这些依赖项对于该项目的性能不是很重要。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">commonjs</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">extensions</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;.js&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// Optional peer deps of ws. Native deps that are mostly for performance.</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// Since ws is not that perf critical for us, just ignore these deps.</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">ignore</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;bufferutil&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;utf-8-validate&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">licensePlugin</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;LICENSE.md&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;Vite core license&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;Vite&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      ),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">cjsPatchPlugin</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createNodeConfig</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">isProduction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#E06C75;">sharedNodeOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/node/index.ts&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">cli</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/node/cli.ts&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">constants</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/node/constants.ts&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span><span style="color:#E5C07B;">sharedNodeOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">sourcemap</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">external</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&#39;fsevents&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pkg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dependencies</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...(</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> [] </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pkg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">devDependencies</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createNodePlugins</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// in production we use api-extractor for dts generation</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// in development we need to rely on the rollup ts plugin</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./dist/node&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ),</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createCjsConfig</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">isProduction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#E06C75;">sharedNodeOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">publicUtils</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;src/node/publicUtils.ts&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;./dist&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">entryFileNames</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`node-cjs/[name].cjs\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">chunkFileNames</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;node-cjs/chunks/dep-[hash].js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">exports</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;named&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">format</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;cjs&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">externalLiveBindings</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">freeze</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">sourcemap</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// fsevents 是 Node.js 中一个第三方的模块，主要用于监视文件系统中的变化。它是 macOS 系统下的一个专用模块，通过监听 macOS 上的 FSEvents API 实现了对文件和目录变化的实时监测，包括新建、修改、删除等。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 在一些 Node.js 应用程序或模块中，fsevents 被用于实现实时监测文件变化，从而在文件发生变化时自动执行某些操作，例如重新构建应用程序或重新加载模块等。fsevents 可以通过 Node.js 的包管理器 NPM 进行安装和使用，但需要注意的是，由于它是 macOS 专用的模块，因此在其他平台上可能会出现兼容性问题</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">external</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&#39;fsevents&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pkg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dependencies</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...(</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> [] </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pkg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">devDependencies</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [...</span><span style="color:#61AFEF;">createNodePlugins</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">bundleSizeLimit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">120</span><span style="color:#ABB2BF;">)],</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 根据传入的命令行参数（commandLineArgs）生成 Rollup 的配置信息，并将这些配置信息组合成一个 RollupOptions 数组进行输出</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// RollupOptions 是一个对象，包含了 Rollup 打包工具进行构建时所需要的各种配置信息。RollupOptions 对象中的配置信息包括输入（input）、输出（output）、插件（plugins）、外部依赖项（external）等，用于描述打包构建的过程和结果。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在这个代码示例中，生成了多个 RollupOptions 对象，分别对应不同的环境和构建目标，这些 RollupOptions 对象被放置在一个数组中，用于将这些不同的配置信息进行组合，以生成最终的构建结果。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 数组中的每个元素都是一个 RollupOptions 对象，表示了一个独立的 Rollup 打包任务，可以通过执行 rollup 命令来对其进行构建。最终生成的构建结果可能是一个或多个 JavaScript 文件，可以用于在浏览器或 Node.js 环境中运行相应的应用程序或库</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">commandLineArgs</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">RollupOptions</span><span style="color:#ABB2BF;">[] </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 通过解析 commandLineArgs 中的 watch 属性，判断当前是否为开发环境。</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">isDev</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">commandLineArgs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">watch</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">isProduction</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isDev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 根据当前环境（开发环境或生产环境）生成相应的 Rollup 配置信息，包括 envConfig（环境变量配置）、clientConfig（客户端配置）、createNodeConfig（Node.js 配置）和 createCjsConfig（CommonJS 配置）。</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 使用 defineConfig 函数将这些配置信息组合成一个 RollupOptions 数组，并返回该数组。</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">envConfig</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">clientConfig</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">createNodeConfig</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">createCjsConfig</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">isProduction</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ])</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这段注释是用来标记代码区域的，类似于一种标记或者提醒作用。在这段代码中，注释的内容是 Plugins，表示下面的代码段主要是关于 Rollup 插件的定义和配置。这种注释通常被称为 &quot;代码区域标记&quot; 或 &quot;代码区域分隔符&quot;，它可以帮助开发人员更快地浏览和理解代码，并提高代码的可读性和可维护性。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// region 是一种特殊的注释标记，它可以用来标记代码区域的开始和结束。这种标记通常与 endregion 配合使用，用于将代码分成不同的区域，使得开发人员可以更方便地阅读和理解代码。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在一些编程语言和开发工具中，如 Visual Studio Code，region 和 endregion 注释标记还可以折叠代码块，从而更方便地浏览和编辑代码。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #region ======== Plugins ========</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ShimOptions</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">src</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">pattern</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RegExp</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在编程中，shim（或 polyfill）指的是一个兼容性代码块，用于在旧版本的浏览器或其他环境中模拟缺少的新功能或 API。shim 通常是一小段代码，可以插入到应用程序中，以兼容不同的环境或浏览器。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在 Rollup 中，shimmed 指的是一个模块，在其导入或导出的依赖关系中有一个未解析的依赖项。Rollup 在打包时会将这些依赖项替换为一个 shimming 模块，以确保应用程序在运行时能够正确引用所需的依赖项。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这段代码是一个 Rollup 插件，用于在构建过程中替换特定依赖的代码。插件的作用是读取一个包含特定文件和替换选项的对象，然后在打包过程中查找这些文件并根据选项进行替换。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 具体来说，这个插件会在构建过程中遍历所有的源代码文件，对于指定的依赖文件，如果其路径与源文件路径匹配，则根据定义的选项对依赖文件进行替换。替换方式可以是简单的字符串替换（用 replacement 替换 src），也可以是正则表达式匹配（用 replacement 替换所有匹配 pattern 的字符串）。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换完成后，插件会返回一个新的代码字符串和 sourcemap，然后将其传递给下一个插件。如果有任何错误发生（例如无法找到文件或匹配模式），则插件会在构建结束时报告错误。</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">shimDepsPlugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">deps</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ShimOptions</span><span style="color:#ABB2BF;">&gt;): </span><span style="color:#E5C07B;">Plugin</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Record 是一个泛型类型，接收两个类型参数，第一个类型参数表示对象的键的类型，第二个类型参数表示对象的值的类型</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">transformed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;shim-deps&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 这是 JavaScript 中一种用于遍历对象属性的 for 循环语法。在这里，&quot;const file&quot; 是一个变量名，它用于在每次迭代时存储当前属性的名称，而 &quot;deps&quot; 则是一个对象，它包含需要遍历的属性。</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 因此，&quot;for (const file in deps)&quot; 可以理解为遍历对象 &quot;deps&quot; 中的每个属性，并将当前属性的名称存储在变量 &quot;file&quot; 中。在循环体中，您可以使用 &quot;file&quot; 变量访问当前属性的值。</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 请注意，由于这里使用了 const 关键字，因此 &quot;file&quot; 变量是一个常量，它的值不能在循环内更改。这种 for 循环语法通常用于遍历对象属性而不需要更改它们的值。</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">deps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 使用正则表达式 /\\/g 查找 &quot;id&quot; 字符串中的所有反斜杠，并将其替换为斜杠。这是因为在文件路径中，Windows 系统使用反斜杠作为路径分隔符，而 Unix 系统使用斜杠。因此，将所有反斜杠替换为斜杠可以确保代码在任何系统上都能正常工作。</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 使用字符串方法 endsWith() 检查经过替换后的 &quot;id&quot; 字符串是否以 &quot;file&quot; 字符串结尾。endsWith() 方法返回一个布尔值，表示字符串是否以指定的子字符串结尾。</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 为什么通过判断模块的文件路径（变量 id）是否以依赖项的名称（变量 file）结尾来判断是否是该依赖项?</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 这是因为该插件需要通过文件路径来判断当前的模块是否依赖于某个特定的模块。在 JavaScript 中，模块通常是通过 import 或 require 语句引入的。在这种情况下，模块的文件路径就是由这些语句指定的。</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 例如，假设有一个模块 &quot;a.js&quot;，它包含以下代码：</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// import foo from &#39;./foo.js&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 在这里，模块 &quot;a.js&quot; 依赖于模块 &quot;foo.js&quot;。模块 &quot;foo.js&quot; 的文件路径是 &quot;./foo.js&quot;。因此，当处理模块 &quot;a.js&quot; 时，该插件需要通过检查 &quot;a.js&quot; 的文件路径来判断它是否依赖于 &quot;foo.js&quot;。由于模块的文件路径以模块名结尾，因此可以通过检查模块的文件路径是否以依赖项的名称结尾来判断是否是该依赖项。如果是，则说明当前模块依赖于该模块</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\\\</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">endsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">replacement</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">pattern</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">deps</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// MagicString 是一个 JavaScript 库，用于在字符串上执行复杂的编辑操作，如插入、删除和替换。它最初是为了在 Rollup 中使用而创建的，用于处理 JavaScript 代码的转换和优化。</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// MagicString 的一个主要特点是它能够跟踪字符串中的每个字符的位置，并在编辑时保持相对位置不变。这意味着它可以进行更细粒度的编辑，而不会破坏代码的结构和语法。</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// 在代码中，MagicString 用于对源代码进行编辑，以实现对依赖项的替换。具体来说，它通过 overwrite() 方法在源代码中查找指定的字符串，并将其替换为另一个字符串。然后，toString() 方法用于将修改后的代码输出为字符串，以便返回给 Rollup 处理管道。</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">magicString</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MagicString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pos</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">code</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">\`Could not find expected src &quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">src</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot; in file &quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">file</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot;\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">              )</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">transformed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">magicString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">overwrite</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`shimmed: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">file</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">match</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">match</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pattern</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">))) {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E06C75;">transformed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">start</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">match</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">index</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">end</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">match</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">magicString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">overwrite</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">end</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">replacement</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">transformed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">\`Could not find expected pattern &quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">pattern</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot; in file &quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">file</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot;\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">              )</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`shimmed: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">file</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">magicString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// magicString.generateMap({ hires: true }) 是指生成一个 source map，其中 hires 表示生成的 source map 精度较高。</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// source map 是一种文件格式，它提供了一个映射关系，将转换后的代码映射回原始源代码的位置。这对于调试和开发非常有用，特别是在代码压缩和合并之后，可以帮助我们快速定位原始代码中的问题。</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// hires 是一个布尔型参数，当为 true 时，生成的 source map 精度更高，能够提供更准确的行列信息。但这也会导致生成的 source map 文件更大，因此在生产环境中建议设置为 false。</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">magicString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">generateMap</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">hires</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">buildEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">deps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">transformed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#98C379;">\`Did not find &quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">file</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot; which is supposed to be shimmed, was the file renamed?\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            )</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Inject CJS Context for each deps chunk</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 该插件的作用是在生成的 Chunk 文件中注入一段 CommonJS 模块的 polyfill，以确保这些文件可以在浏览器中正常运行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 具体来说，该插件会在每个以 chunks/dep- 开头的 Chunk 文件中，注入一段 CommonJS 模块的 polyfill 代码。这段代码通过 import 语句引入了 Node.js 的 url、path 和 module 模块，并在代码中定义了几个常量和函数，包括：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// __filename：当前模块的文件名，通过调用 fileURLToPath 函数得到；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// __dirname：当前模块的目录名，通过调用 dirname 函数得到；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// require：用于加载 CommonJS 模块的函数，通过调用 createRequire 函数得到；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// __require：require 函数的别名，用于避免和其他代码中的 require 变量重名。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 然后，插件通过 renderChunk 钩子来处理每个 Chunk 文件的代码。对于符合条件的 Chunk 文件，插件会在最后一个 import 语句后面插入上述的 CommonJS 模块的 polyfill 代码，并返回修改后的代码和 Source Map。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// cjsPatchPlugin 是一个自定义的函数名称，这里的命名方式是基于常见的 JavaScript 命名约定。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// cjsPatchPlugin 可以拆分为三部分：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// cjs：缩写，代表 CommonJS。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Patch：动词，代表修改、修补、打补丁等含义。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Plugin：名词，代表插件、扩展等含义。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 综合起来，cjsPatchPlugin 的含义就是 CommonJS 模块打补丁的插件，也就是为了解决 CommonJS 模块在浏览器环境下运行问题而编写的 Rollup.js 插件。函数名采用这种命名约定可以更清晰地表达函数的作用和用途，方便阅读和理解代码。</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">cjsPatchPlugin</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">Plugin</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cjsPatch</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">import { fileURLToPath as __cjs_fileURLToPath } from &#39;node:url&#39;;</span></span>
<span class="line"><span style="color:#98C379;">import { dirname as __cjs_dirname } from &#39;node:path&#39;;</span></span>
<span class="line"><span style="color:#98C379;">import { createRequire as __cjs_createRequire } from &#39;node:module&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">const __filename = __cjs_fileURLToPath(i<wbr>mport.meta.url);</span></span>
<span class="line"><span style="color:#98C379;">const __dirname = __cjs_dirname(__filename);</span></span>
<span class="line"><span style="color:#98C379;">const require = __cjs_createRequire(i<wbr>mport.meta.url);</span></span>
<span class="line"><span style="color:#98C379;">const __require = require;</span></span>
<span class="line"><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trimStart</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;cjs-chunk-patch&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">renderChunk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">chunk</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">chunk</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fileName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;chunks/dep-&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">match</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">code</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(?:import</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\s\\S</span><span style="color:#D19A66;">]*?</span><span style="color:#E06C75;">;\\s</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">index</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">match</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">match</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">match</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MagicString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// inject after the last \`import\`</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendRight</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cjsPatch</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;patched cjs context: &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">chunk</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fileName</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">generateMap</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">hires</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是一个 Rollup 插件函数，作用是限制打包后的代码体积不超过指定的大小限制 limit，如果超过限制则会抛出错误。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 该插件函数返回一个对象，对象包含了一个 name 属性和一个 generateBundle 方法。name 属性表示该插件的名称，generateBundle 方法是在 Rollup 生成 bundle 时被调用的钩子函数，用于在 bundle 生成完成后执行一些自定义的操作。具体来说，该插件在生成 bundle 时会计算 bundle 的大小，如果超过了指定的大小限制 limit，则会抛出一个错误，中断打包流程。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在 generateBundle 方法中，首先使用 Object.values 方法获取 bundle 对象中所有文件的代码字符串，然后通过 Buffer.byteLength 方法计算所有代码的字节数，最后将字节数转换为千字节（KB）并进行大小比较。如果超过了限制，则抛出一个错误，否则不执行任何操作。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Guard the bundle size</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">limit</span><span style="color:#7F848E;font-style:italic;"> size in KB</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bundleSizeLimit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">limit</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Plugin</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bundle-limit&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">generateBundle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">bundle</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">size</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">byteLength</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 检查对象 i 是否包含一个名为 code 的属性</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bundle</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&#39;code&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">i</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">kb</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1024</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">kb</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">limit</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#98C379;">\`Bundle size exceeded </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">limit</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">kb, current size is </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">kb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toFixed</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          )</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">kb.\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #endregion</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { readFileSync } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node:fs&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> path </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node:path&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { fileURLToPath } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node:url&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> nodeResolve </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;@rollup/plugin-node-resolve&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> typescript </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;@rollup/plugin-typescript&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> commonjs </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;@rollup/plugin-commonjs&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> json </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;@rollup/plugin-json&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> MagicString </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;magic-string&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">type</span><span style="color:#B392F0;"> { Plugin</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> RollupOptions } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;rollup&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;rollup&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> licensePlugin </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./rollupLicensePlugin&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 读取当前模块所在的 package.json 文件，并将其解析为一个 JavaScript 对象，存储在变量 pkg 中。</span></span>
<span class="line"><span style="color:#6B737C;">// readFileSync 是 Node.js 提供的文件读取同步方法，可以同步地读取文件内容，并返回文件内容。它的用法类似于浏览器端的 XMLHttpRequest 或 fetch 方法中的读取本地文件。</span></span>
<span class="line"><span style="color:#6B737C;">// i<wbr>mport.meta.url 表示当前模块的 URL 地址，new URL(&#39;./package.json&#39;, i<wbr>mport.meta.url) 表示当前模块所在目录下的 package.json 文件的 URL 地址。readFileSync 函数读取该文件的内容，返回一个 Buffer 对象，再使用 toString() 方法将其转换为字符串。最后使用 JSON.parse 方法将字符串解析为 JavaScript 对象，并将该对象赋值给变量 pkg。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">pkg</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.parse(</span></span>
<span class="line"><span style="color:#B392F0;">  readFileSync(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URL(</span><span style="color:#FFAB70;">&#39;./package.json&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">import</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#B392F0;">.url)).toString()</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 在ES模块中，__dirname不像CommonJS模块中一样被定义为模块的绝对路径。取而代之的是，ES模块中的i<wbr>mport.meta.url提供了模块的URL地址。而在Node.js中，使用fileURLToPath()方法将URL转换为路径，并赋值给__dirname，从而获取ES模块的目录路径。</span></span>
<span class="line"><span style="color:#6B737C;">// 具体来说，new URL(&#39;.&#39;, i<wbr>mport.meta.url)中的.表示当前目录，i<wbr>mport.meta.url获取了当前模块的URL，fileURLToPath()将其转换为路径格式，最终得到的__dirname是当前ES模块的目录路径。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">__dirname</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> fileURLToPath(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URL(</span><span style="color:#FFAB70;">&#39;.&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">import</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#B392F0;">.url))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 这段代码是一个 Rollup 配置文件中的一个对象，用于将 TypeScript 源代码编译为 ES6 模块。</span></span>
<span class="line"><span style="color:#6B737C;">// 具体来说，这个对象使用了 Rollup 的 defineConfig 函数，用于定义 Rollup 的配置信息。这个配置信息包含以下内容：</span></span>
<span class="line"><span style="color:#6B737C;">// input 属性指定了源代码的入口文件，即 TypeScript 文件的路径。在这个例子中，入口文件位于 src/client/env.ts。</span></span>
<span class="line"><span style="color:#6B737C;">// plugins 属性是一个插件数组，其中包含了需要使用的插件。在这个例子中，使用了 typescript 插件，用于编译 TypeScript 文件。</span></span>
<span class="line"><span style="color:#6B737C;">// output 属性指定了输出文件的配置信息。具体来说，它包含以下属性：</span></span>
<span class="line"><span style="color:#6B737C;">// file 属性指定了输出文件的路径和文件名。在这个例子中，输出文件位于 dist/client/env.mjs。</span></span>
<span class="line"><span style="color:#6B737C;">// sourcemap 属性用于生成源代码映射文件。在这个例子中，开启了源代码映射。</span></span>
<span class="line"><span style="color:#6B737C;">// sourcemapPathTransform 属性是一个函数，用于将生成的源代码映射文件中的路径转换为相对路径。在这个例子中，这个函数将源代码映射文件中的路径转换为文件名。</span></span>
<span class="line"><span style="color:#6B737C;">// sourcemapIgnoreList 属性是一个函数，用于设置哪些源代码映射文件需要被忽略。在这个例子中，这个函数返回了 true，表示所有的源代码映射文件都应该被忽略。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">envConfig</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineConfig({</span></span>
<span class="line"><span style="color:#B392F0;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/client/env.ts&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    typescript({</span></span>
<span class="line"><span style="color:#B392F0;">      tsconfig</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/client/tsconfig.json&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  output</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    file</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;dist/client&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;env.mjs&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    sourcemap</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    sourcemapPathTransform(relativeSourcePath) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// path.basename() 是 Node.js 中的一个方法，用于返回一个文件路径的最后一部分，也就是文件名（包括扩展名）。比如，path.basename(&#39;/home/user/file.txt&#39;) 返回的是 file.txt。如果指定第二个参数，可以去掉文件扩展名。例如，path.basename(&#39;/home/user/file.txt&#39;, &#39;.txt&#39;) 返回的是 file。在示例中，sourcemapPathTransform 函数使用 path.basename() 方法将相对源代码路径转换为文件名，用于生成 sourcemap。</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.basename(relativeSourcePath)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    sourcemapIgnoreList() {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// input 属性指定了客户端代码入口文件的路径为 src/client/client.ts。</span></span>
<span class="line"><span style="color:#6B737C;">// external 属性指定了需要外部引入的模块，其中 ./env 和 @vite/env 是需要外部引入的模块。</span></span>
<span class="line"><span style="color:#6B737C;">// 在这个配置中，external 属性指定了一些模块，这些模块将不会被打包到最终的输出文件中，而是会被视为外部依赖，在运行时需要从其他地方引入。在这个配置中，external 属性指定了 ./env 和 @vite/env 两个模块，因此这些模块会被视为外部依赖，并且不会被打包到最终的输出文件中。这意味着在使用最终的输出文件时，这些模块必须从其他地方进行引入，否则会导致运行时错误。</span></span>
<span class="line"><span style="color:#6B737C;">// plugins 属性是一个数组，其中包含了 TypeScript 编译器的配置信息，指定了 TypeScript 配置文件的路径为 src/client/tsconfig.json。</span></span>
<span class="line"><span style="color:#6B737C;">// output 属性指定了输出文件的相关信息，包括输出文件的路径为 dist/client/client.mjs，开启了生成 sourcemap 功能并指定了源代码路径转换函数和忽略列表函数。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">clientConfig</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineConfig({</span></span>
<span class="line"><span style="color:#B392F0;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/client/client.ts&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  external</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&#39;./env&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;@vite/env&#39;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    typescript({</span></span>
<span class="line"><span style="color:#B392F0;">      tsconfig</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/client/tsconfig.json&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  output</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    file</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;dist/client&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;client.mjs&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    sourcemap</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    sourcemapPathTransform(relativeSourcePath) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.basename(relativeSourcePath)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    sourcemapIgnoreList() {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// treeshake 属性指定了打包时的 Tree-shaking 配置，包括禁用 tryCatchDeoptimization 选项，设置 propertyReadSideEffects 为 false，并且对于外部模块，使用 no-external 选项来进行 Tree-shaking，也就是只对模块内部的代码进行优化。</span></span>
<span class="line"><span style="color:#6B737C;">// output 属性指定了输出文件的相关信息，包括输出目录为 ./dist，入口文件的命名规则为 node/[name].js，chunk 文件的命名规则为 node/chunks/dep-[hash].js，使用 ESM 格式进行输出，并且禁用了 external live bindings。</span></span>
<span class="line"><span style="color:#6B737C;">// onwarn 属性指定了一个函数，用于处理警告信息。在这个函数中，如果警告信息中包含了 &quot;Circular dependency&quot; 字符串，就忽略这个警告，否则将调用默认的 warn 函数进行警告输出。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sharedNodeOptions</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineConfig({</span></span>
<span class="line"><span style="color:#B392F0;">  treeshake</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    moduleSideEffects</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;no-external&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    propertyReadSideEffects</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    tryCatchDeoptimization</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  output</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    dir</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./dist&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    entryFileNames</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`node/[name].js\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    chunkFileNames</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node/chunks/dep-[hash].js&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    exports</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;named&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    format</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;esm&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    externalLiveBindings</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    freeze</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  onwarn(warning</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> warn) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">warning</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">message</span><span style="color:#B392F0;">.includes(</span><span style="color:#FFAB70;">&#39;Circular dependency&#39;</span><span style="color:#B392F0;">)) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    warn(warning)</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 使用 nodeResolve 插件解析 Node.js 模块路径。</span></span>
<span class="line"><span style="color:#6B737C;">// 使用 typescript 插件编译 TypeScript 代码。</span></span>
<span class="line"><span style="color:#6B737C;">// 使用 shimDepsPlugin 插件解决一些依赖库的问题。</span></span>
<span class="line"><span style="color:#6B737C;">// 使用 commonjs 插件将 CommonJS 模块转换为 ES6 模块。</span></span>
<span class="line"><span style="color:#6B737C;">// 使用 json 插件将 JSON 文件转换为 ES6 模块。</span></span>
<span class="line"><span style="color:#6B737C;">// 使用 licensePlugin 插件添加许可证信息。</span></span>
<span class="line"><span style="color:#6B737C;">// 使用 cjsPatchPlugin 插件修复一些 CommonJS 模块的问题。</span></span>
<span class="line"><span style="color:#6B737C;">// 其中，一些插件只在生产环境下生效，如 shimDepsPlugin 和 licensePlugin。函数最终返回的是一个包含这些插件的数组。</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createNodePlugins(</span></span>
<span class="line"><span style="color:#B392F0;">  isProduction</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  sourceMap</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  declarationDir</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (Plugin </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">)[] {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// Rollup 构建工具中使用 @rollup/plugin-node-resolve 插件进行模块解析。解析模块依赖关系，并返回对应的模块路径，以便 Rollup 在打包过程中能够正确地将各个模块打包成一个或多个文件。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// nodeResolve({ preferBuiltins: true }) 是对该插件的配置，表示在解析模块时优先使用 Node.js 核心模块，这有助于提高打包的效率和稳定性。当然，如果某个模块不存在于核心模块中，该插件也会去查找项目中安装的第三方模块</span></span>
<span class="line"><span style="color:#B392F0;">    nodeResolve({ preferBuiltins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;"> })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    typescript({</span></span>
<span class="line"><span style="color:#B392F0;">      tsconfig</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/node/tsconfig.json&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      sourceMap</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      declaration</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> declarationDir </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      declarationDir</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> declarationDir </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> declarationDir </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// Some deps have try...catch require of optional deps, but rollup will</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// generate code that force require them upfront for side effects.</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// Shim them with eval() so rollup can skip these calls.</span></span>
<span class="line"><span style="color:#B392F0;">    isProduction </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">      shimDepsPlugin({</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// chokidar -&gt; fsevents</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;fsevents-handler.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          src</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`require(&#39;fsevents&#39;)\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          replacement</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`__require(&#39;fsevents&#39;)\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// postcss-import -&gt; sugarss</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;process-content.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          src</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;require(&quot;sugarss&quot;)&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          replacement</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`__require(&#39;sugarss&#39;)\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;lilconfig/dist/index.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          pattern</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> /: require,/</span><span style="color:#F97583;">g</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          replacement</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`: __require,\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// postcss-load-config calls require after register ts-node</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;postcss-load-config/src/index.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          pattern</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">/require(?=\\((configFile</span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">&#39;ts-node&#39;)\\))/</span><span style="color:#F97583;">g</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          replacement</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`__require\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;json-stable-stringify/index.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          pattern</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> /</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">var json = typeof JSON.</span><span style="color:#F97583;">+</span><span style="color:#FFAB70;">require\\(&#39;jsonify&#39;\\);</span><span style="color:#F97583;">$</span><span style="color:#FFAB70;">/</span><span style="color:#F97583;">gm</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          replacement</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;var json = JSON&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// postcss-import uses the \`resolve\` dep if the \`resolve\` option is not passed.</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// However, we always pass the \`resolve\` option. Remove this import to avoid</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// bundling the \`resolve\` dep.</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;postcss-import/index.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          src</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;const resolveId = require(&quot;./lib/resolve-id&quot;)&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          replacement</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;const resolveId = (id) =&gt; id&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// @rollup/plugin-commonjs 是 Rollup.js 打包工具的插件之一，它可以将 CommonJS 模块转换成 ES6 模块，以便在浏览器中使用。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 在这个代码段中，commonjs 插件被调用并传递了一个配置对象，该对象包括以下选项：</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// extensions：一个字符串数组，指定要解析的文件扩展名。在这里，.js 表示只解析 JavaScript 文件。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// ignore：一个字符串数组，指定要忽略的依赖项。在这里，插件忽略了 bufferutil 和 utf-8-validate，这是 ws 模块的本机依赖项，但这些依赖项对于该项目的性能不是很重要。</span></span>
<span class="line"><span style="color:#B392F0;">    commonjs({</span></span>
<span class="line"><span style="color:#B392F0;">      extensions</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&#39;.js&#39;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// Optional peer deps of ws. Native deps that are mostly for performance.</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// Since ws is not that perf critical for us, just ignore these deps.</span></span>
<span class="line"><span style="color:#B392F0;">      ignore</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&#39;bufferutil&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;utf-8-validate&#39;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    json()</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    isProduction </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">      licensePlugin(</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;LICENSE.md&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;Vite core license&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;Vite&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      )</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    cjsPatchPlugin()</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createNodeConfig(isProduction</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> defineConfig({</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">sharedNodeOptions</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      index</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/node/index.ts&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      cli</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/node/cli.ts&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      constants</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/node/constants.ts&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    output</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">sharedNodeOptions</span><span style="color:#B392F0;">.output</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      sourcemap</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isProduction</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    external</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&#39;fsevents&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.keys(</span><span style="color:#79B8FF;">pkg</span><span style="color:#B392F0;">.dependencies)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">(isProduction </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> [] </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.keys(</span><span style="color:#79B8FF;">pkg</span><span style="color:#B392F0;">.devDependencies))</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> createNodePlugins(</span></span>
<span class="line"><span style="color:#B392F0;">      isProduction</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isProduction</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// in production we use api-extractor for dts generation</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// in development we need to rely on the rollup ts plugin</span></span>
<span class="line"><span style="color:#B392F0;">      isProduction </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./dist/node&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    )</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  })</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createCjsConfig(isProduction</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> defineConfig({</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">sharedNodeOptions</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      publicUtils</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.resolve(__dirname</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;src/node/publicUtils.ts&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    output</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      dir</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;./dist&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      entryFileNames</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`node-cjs/[name].cjs\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      chunkFileNames</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node-cjs/chunks/dep-[hash].js&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      exports</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;named&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      format</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;cjs&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      externalLiveBindings</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      freeze</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      sourcemap</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// fsevents 是 Node.js 中一个第三方的模块，主要用于监视文件系统中的变化。它是 macOS 系统下的一个专用模块，通过监听 macOS 上的 FSEvents API 实现了对文件和目录变化的实时监测，包括新建、修改、删除等。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 在一些 Node.js 应用程序或模块中，fsevents 被用于实现实时监测文件变化，从而在文件发生变化时自动执行某些操作，例如重新构建应用程序或重新加载模块等。fsevents 可以通过 Node.js 的包管理器 NPM 进行安装和使用，但需要注意的是，由于它是 macOS 专用的模块，因此在其他平台上可能会出现兼容性问题</span></span>
<span class="line"><span style="color:#B392F0;">    external</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&#39;fsevents&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.keys(</span><span style="color:#79B8FF;">pkg</span><span style="color:#B392F0;">.dependencies)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">(isProduction </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> [] </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.keys(</span><span style="color:#79B8FF;">pkg</span><span style="color:#B392F0;">.devDependencies))</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">createNodePlugins(</span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> bundleSizeLimit(</span><span style="color:#F8F8F8;">120</span><span style="color:#B392F0;">)]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  })</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 根据传入的命令行参数（commandLineArgs）生成 Rollup 的配置信息，并将这些配置信息组合成一个 RollupOptions 数组进行输出</span></span>
<span class="line"><span style="color:#6B737C;">// RollupOptions 是一个对象，包含了 Rollup 打包工具进行构建时所需要的各种配置信息。RollupOptions 对象中的配置信息包括输入（input）、输出（output）、插件（plugins）、外部依赖项（external）等，用于描述打包构建的过程和结果。</span></span>
<span class="line"><span style="color:#6B737C;">// 在这个代码示例中，生成了多个 RollupOptions 对象，分别对应不同的环境和构建目标，这些 RollupOptions 对象被放置在一个数组中，用于将这些不同的配置信息进行组合，以生成最终的构建结果。</span></span>
<span class="line"><span style="color:#6B737C;">// 数组中的每个元素都是一个 RollupOptions 对象，表示了一个独立的 Rollup 打包任务，可以通过执行 rollup 命令来对其进行构建。最终生成的构建结果可能是一个或多个 JavaScript 文件，可以用于在浏览器或 Node.js 环境中运行相应的应用程序或库</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> (commandLineArgs</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">any</span><span style="color:#B392F0;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> RollupOptions[] </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 通过解析 commandLineArgs 中的 watch 属性，判断当前是否为开发环境。</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">isDev</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">commandLineArgs</span><span style="color:#B392F0;">.watch</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">isProduction</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isDev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 根据当前环境（开发环境或生产环境）生成相应的 Rollup 配置信息，包括 envConfig（环境变量配置）、clientConfig（客户端配置）、createNodeConfig（Node.js 配置）和 createCjsConfig（CommonJS 配置）。</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 使用 defineConfig 函数将这些配置信息组合成一个 RollupOptions 数组，并返回该数组。</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> defineConfig([</span></span>
<span class="line"><span style="color:#B392F0;">    envConfig</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    clientConfig</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    createNodeConfig(isProduction)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    createCjsConfig(isProduction)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ])</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 这段注释是用来标记代码区域的，类似于一种标记或者提醒作用。在这段代码中，注释的内容是 Plugins，表示下面的代码段主要是关于 Rollup 插件的定义和配置。这种注释通常被称为 &quot;代码区域标记&quot; 或 &quot;代码区域分隔符&quot;，它可以帮助开发人员更快地浏览和理解代码，并提高代码的可读性和可维护性。</span></span>
<span class="line"><span style="color:#6B737C;">// region 是一种特殊的注释标记，它可以用来标记代码区域的开始和结束。这种标记通常与 endregion 配合使用，用于将代码分成不同的区域，使得开发人员可以更方便地阅读和理解代码。</span></span>
<span class="line"><span style="color:#6B737C;">// 在一些编程语言和开发工具中，如 Visual Studio Code，region 和 endregion 注释标记还可以折叠代码块，从而更方便地浏览和编辑代码。</span></span>
<span class="line"><span style="color:#6B737C;">// #region ======== Plugins ========</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ShimOptions {</span></span>
<span class="line"><span style="color:#B392F0;">  src</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#B392F0;">  replacement</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#B392F0;">  pattern</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> RegExp</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 在编程中，shim（或 polyfill）指的是一个兼容性代码块，用于在旧版本的浏览器或其他环境中模拟缺少的新功能或 API。shim 通常是一小段代码，可以插入到应用程序中，以兼容不同的环境或浏览器。</span></span>
<span class="line"><span style="color:#6B737C;">// 在 Rollup 中，shimmed 指的是一个模块，在其导入或导出的依赖关系中有一个未解析的依赖项。Rollup 在打包时会将这些依赖项替换为一个 shimming 模块，以确保应用程序在运行时能够正确引用所需的依赖项。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 这段代码是一个 Rollup 插件，用于在构建过程中替换特定依赖的代码。插件的作用是读取一个包含特定文件和替换选项的对象，然后在打包过程中查找这些文件并根据选项进行替换。</span></span>
<span class="line"><span style="color:#6B737C;">// 具体来说，这个插件会在构建过程中遍历所有的源代码文件，对于指定的依赖文件，如果其路径与源文件路径匹配，则根据定义的选项对依赖文件进行替换。替换方式可以是简单的字符串替换（用 replacement 替换 src），也可以是正则表达式匹配（用 replacement 替换所有匹配 pattern 的字符串）。</span></span>
<span class="line"><span style="color:#6B737C;">// 替换完成后，插件会返回一个新的代码字符串和 sourcemap，然后将其传递给下一个插件。如果有任何错误发生（例如无法找到文件或匹配模式），则插件会在构建结束时报告错误。</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> shimDepsPlugin(deps</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ShimOptions&gt;)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Plugin {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Record 是一个泛型类型，接收两个类型参数，第一个类型参数表示对象的键的类型，第二个类型参数表示对象的值的类型</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">transformed</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#B392F0;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {}</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;shim-deps&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    transform(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> id) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 这是 JavaScript 中一种用于遍历对象属性的 for 循环语法。在这里，&quot;const file&quot; 是一个变量名，它用于在每次迭代时存储当前属性的名称，而 &quot;deps&quot; 则是一个对象，它包含需要遍历的属性。</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 因此，&quot;for (const file in deps)&quot; 可以理解为遍历对象 &quot;deps&quot; 中的每个属性，并将当前属性的名称存储在变量 &quot;file&quot; 中。在循环体中，您可以使用 &quot;file&quot; 变量访问当前属性的值。</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 请注意，由于这里使用了 const 关键字，因此 &quot;file&quot; 变量是一个常量，它的值不能在循环内更改。这种 for 循环语法通常用于遍历对象属性而不需要更改它们的值。</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">file</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> deps) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 使用正则表达式 /\\/g 查找 &quot;id&quot; 字符串中的所有反斜杠，并将其替换为斜杠。这是因为在文件路径中，Windows 系统使用反斜杠作为路径分隔符，而 Unix 系统使用斜杠。因此，将所有反斜杠替换为斜杠可以确保代码在任何系统上都能正常工作。</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 使用字符串方法 endsWith() 检查经过替换后的 &quot;id&quot; 字符串是否以 &quot;file&quot; 字符串结尾。endsWith() 方法返回一个布尔值，表示字符串是否以指定的子字符串结尾。</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 为什么通过判断模块的文件路径（变量 id）是否以依赖项的名称（变量 file）结尾来判断是否是该依赖项?</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 这是因为该插件需要通过文件路径来判断当前的模块是否依赖于某个特定的模块。在 JavaScript 中，模块通常是通过 import 或 require 语句引入的。在这种情况下，模块的文件路径就是由这些语句指定的。</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 例如，假设有一个模块 &quot;a.js&quot;，它包含以下代码：</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// import foo from &#39;./foo.js&#39;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 在这里，模块 &quot;a.js&quot; 依赖于模块 &quot;foo.js&quot;。模块 &quot;foo.js&quot; 的文件路径是 &quot;./foo.js&quot;。因此，当处理模块 &quot;a.js&quot; 时，该插件需要通过检查 &quot;a.js&quot; 的文件路径来判断它是否依赖于 &quot;foo.js&quot;。由于模块的文件路径以模块名结尾，因此可以通过检查模块的文件路径是否以依赖项的名称结尾来判断是否是该依赖项。如果是，则说明当前模块依赖于该模块</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">id</span><span style="color:#B392F0;">.replace(</span><span style="color:#FFAB70;">/\\\\/</span><span style="color:#F97583;">g</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;/&#39;</span><span style="color:#B392F0;">).endsWith(file)) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">src</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">replacement</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">pattern</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> deps[file]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// MagicString 是一个 JavaScript 库，用于在字符串上执行复杂的编辑操作，如插入、删除和替换。它最初是为了在 Rollup 中使用而创建的，用于处理 JavaScript 代码的转换和优化。</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// MagicString 的一个主要特点是它能够跟踪字符串中的每个字符的位置，并在编辑时保持相对位置不变。这意味着它可以进行更细粒度的编辑，而不会破坏代码的结构和语法。</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// 在代码中，MagicString 用于对源代码进行编辑，以实现对依赖项的替换。具体来说，它通过 overwrite() 方法在源代码中查找指定的字符串，并将其替换为另一个字符串。然后，toString() 方法用于将修改后的代码输出为字符串，以便返回给 Rollup 处理管道。</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">magicString</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MagicString(code)</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (src) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">pos</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">code</span><span style="color:#B392F0;">.indexOf(src)</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (pos </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.error(</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#FFAB70;">\`Could not find expected src &quot;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">src</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&quot; in file &quot;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">file</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&quot;\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">              )</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">            transformed[file] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">magicString</span><span style="color:#B392F0;">.overwrite(pos</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> pos </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">src</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> replacement)</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`shimmed: </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">file</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (pattern) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> match</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">while</span><span style="color:#B392F0;"> ((match </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">pattern</span><span style="color:#B392F0;">.exec(code))) {</span></span>
<span class="line"><span style="color:#B392F0;">              transformed[file] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">start</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">match</span><span style="color:#B392F0;">.index</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">end</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> start </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> match[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">].</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">magicString</span><span style="color:#B392F0;">.overwrite(start</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> end</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> replacement)</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">transformed[file]) {</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.error(</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#FFAB70;">\`Could not find expected pattern &quot;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">pattern</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&quot; in file &quot;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">file</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&quot;\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">              )</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`shimmed: </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">file</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            code</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">magicString</span><span style="color:#B392F0;">.toString()</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">// magicString.generateMap({ hires: true }) 是指生成一个 source map，其中 hires 表示生成的 source map 精度较高。</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">// source map 是一种文件格式，它提供了一个映射关系，将转换后的代码映射回原始源代码的位置。这对于调试和开发非常有用，特别是在代码压缩和合并之后，可以帮助我们快速定位原始代码中的问题。</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">// hires 是一个布尔型参数，当为 true 时，生成的 source map 精度更高，能够提供更准确的行列信息。但这也会导致生成的 source map 文件更大，因此在生产环境中建议设置为 false。</span></span>
<span class="line"><span style="color:#B392F0;">            map</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">magicString</span><span style="color:#B392F0;">.generateMap({ hires</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;"> })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    buildEnd(err) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">err) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">file</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> deps) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">transformed[file]) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.error(</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#FFAB70;">\`Did not find &quot;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">file</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&quot; which is supposed to be shimmed, was the file renamed?\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">            )</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * Inject CJS Context for each deps chunk</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#6B737C;">// 该插件的作用是在生成的 Chunk 文件中注入一段 CommonJS 模块的 polyfill，以确保这些文件可以在浏览器中正常运行</span></span>
<span class="line"><span style="color:#6B737C;">// 具体来说，该插件会在每个以 chunks/dep- 开头的 Chunk 文件中，注入一段 CommonJS 模块的 polyfill 代码。这段代码通过 import 语句引入了 Node.js 的 url、path 和 module 模块，并在代码中定义了几个常量和函数，包括：</span></span>
<span class="line"><span style="color:#6B737C;">// __filename：当前模块的文件名，通过调用 fileURLToPath 函数得到；</span></span>
<span class="line"><span style="color:#6B737C;">// __dirname：当前模块的目录名，通过调用 dirname 函数得到；</span></span>
<span class="line"><span style="color:#6B737C;">// require：用于加载 CommonJS 模块的函数，通过调用 createRequire 函数得到；</span></span>
<span class="line"><span style="color:#6B737C;">// __require：require 函数的别名，用于避免和其他代码中的 require 变量重名。</span></span>
<span class="line"><span style="color:#6B737C;">// 然后，插件通过 renderChunk 钩子来处理每个 Chunk 文件的代码。对于符合条件的 Chunk 文件，插件会在最后一个 import 语句后面插入上述的 CommonJS 模块的 polyfill 代码，并返回修改后的代码和 Source Map。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// cjsPatchPlugin 是一个自定义的函数名称，这里的命名方式是基于常见的 JavaScript 命名约定。</span></span>
<span class="line"><span style="color:#6B737C;">// cjsPatchPlugin 可以拆分为三部分：</span></span>
<span class="line"><span style="color:#6B737C;">// cjs：缩写，代表 CommonJS。</span></span>
<span class="line"><span style="color:#6B737C;">// Patch：动词，代表修改、修补、打补丁等含义。</span></span>
<span class="line"><span style="color:#6B737C;">// Plugin：名词，代表插件、扩展等含义。</span></span>
<span class="line"><span style="color:#6B737C;">// 综合起来，cjsPatchPlugin 的含义就是 CommonJS 模块打补丁的插件，也就是为了解决 CommonJS 模块在浏览器环境下运行问题而编写的 Rollup.js 插件。函数名采用这种命名约定可以更清晰地表达函数的作用和用途，方便阅读和理解代码。</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> cjsPatchPlugin()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Plugin {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cjsPatch</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">import { fileURLToPath as __cjs_fileURLToPath } from &#39;node:url&#39;;</span></span>
<span class="line"><span style="color:#FFAB70;">import { dirname as __cjs_dirname } from &#39;node:path&#39;;</span></span>
<span class="line"><span style="color:#FFAB70;">import { createRequire as __cjs_createRequire } from &#39;node:module&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">const __filename = __cjs_fileURLToPath(i<wbr>mport.meta.url);</span></span>
<span class="line"><span style="color:#FFAB70;">const __dirname = __cjs_dirname(__filename);</span></span>
<span class="line"><span style="color:#FFAB70;">const require = __cjs_createRequire(i<wbr>mport.meta.url);</span></span>
<span class="line"><span style="color:#FFAB70;">const __require = require;</span></span>
<span class="line"><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">.trimStart()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;cjs-chunk-patch&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    renderChunk(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> chunk) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">chunk</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">fileName</span><span style="color:#B392F0;">.includes(</span><span style="color:#FFAB70;">&#39;chunks/dep-&#39;</span><span style="color:#B392F0;">)) </span><span style="color:#F97583;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">match</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">code</span><span style="color:#B392F0;">.match(</span><span style="color:#FFAB70;">/</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">(?:import[\\s\\S]</span><span style="color:#F97583;">*?</span><span style="color:#FFAB70;">;\\s</span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">)</span><span style="color:#F97583;">+</span><span style="color:#FFAB70;">/</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">index</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> match </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">match</span><span style="color:#B392F0;">.index</span><span style="color:#F97583;">!</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> match[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">].</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">s</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MagicString(code)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// inject after the last \`import\`</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">s</span><span style="color:#B392F0;">.appendRight(index</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cjsPatch)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;patched cjs context: &#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#B392F0;">.fileName)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        code</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">s</span><span style="color:#B392F0;">.toString()</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        map</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">s</span><span style="color:#B392F0;">.generateMap({ hires</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;"> })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 这是一个 Rollup 插件函数，作用是限制打包后的代码体积不超过指定的大小限制 limit，如果超过限制则会抛出错误。</span></span>
<span class="line"><span style="color:#6B737C;">// 该插件函数返回一个对象，对象包含了一个 name 属性和一个 generateBundle 方法。name 属性表示该插件的名称，generateBundle 方法是在 Rollup 生成 bundle 时被调用的钩子函数，用于在 bundle 生成完成后执行一些自定义的操作。具体来说，该插件在生成 bundle 时会计算 bundle 的大小，如果超过了指定的大小限制 limit，则会抛出一个错误，中断打包流程。</span></span>
<span class="line"><span style="color:#6B737C;">// 在 generateBundle 方法中，首先使用 Object.values 方法获取 bundle 对象中所有文件的代码字符串，然后通过 Buffer.byteLength 方法计算所有代码的字节数，最后将字节数转换为千字节（KB）并进行大小比较。如果超过了限制，则抛出一个错误，否则不执行任何操作。</span></span>
<span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * Guard the bundle size</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> limit size in KB</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> bundleSizeLimit(limit</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">number</span><span style="color:#B392F0;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Plugin {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;bundle-limit&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    generateBundle(options</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> bundle) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">size</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Buffer</span><span style="color:#B392F0;">.byteLength(</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 检查对象 i 是否包含一个名为 code 的属性</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.values(bundle)</span></span>
<span class="line"><span style="color:#B392F0;">          .map((i) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> (</span><span style="color:#FFAB70;">&#39;code&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> i </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">i</span><span style="color:#B392F0;">.code </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">))</span></span>
<span class="line"><span style="color:#B392F0;">          .join(</span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&#39;utf-8&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      )</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">kb</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> size </span><span style="color:#F97583;">/</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1024</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (kb </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> limit) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error(</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#FFAB70;">\`Bundle size exceeded </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">limit</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">kb, current size is </span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">kb</span><span style="color:#B392F0;">.toFixed(</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          )</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">kb.\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        )</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// #endregion</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br><span class="line-number">277</span><br><span class="line-number">278</span><br><span class="line-number">279</span><br><span class="line-number">280</span><br><span class="line-number">281</span><br><span class="line-number">282</span><br><span class="line-number">283</span><br><span class="line-number">284</span><br><span class="line-number">285</span><br><span class="line-number">286</span><br><span class="line-number">287</span><br><span class="line-number">288</span><br><span class="line-number">289</span><br><span class="line-number">290</span><br><span class="line-number">291</span><br><span class="line-number">292</span><br><span class="line-number">293</span><br><span class="line-number">294</span><br><span class="line-number">295</span><br><span class="line-number">296</span><br><span class="line-number">297</span><br><span class="line-number">298</span><br><span class="line-number">299</span><br><span class="line-number">300</span><br><span class="line-number">301</span><br><span class="line-number">302</span><br><span class="line-number">303</span><br><span class="line-number">304</span><br><span class="line-number">305</span><br><span class="line-number">306</span><br><span class="line-number">307</span><br><span class="line-number">308</span><br><span class="line-number">309</span><br><span class="line-number">310</span><br><span class="line-number">311</span><br><span class="line-number">312</span><br><span class="line-number">313</span><br><span class="line-number">314</span><br><span class="line-number">315</span><br><span class="line-number">316</span><br><span class="line-number">317</span><br><span class="line-number">318</span><br><span class="line-number">319</span><br><span class="line-number">320</span><br><span class="line-number">321</span><br><span class="line-number">322</span><br><span class="line-number">323</span><br><span class="line-number">324</span><br><span class="line-number">325</span><br><span class="line-number">326</span><br><span class="line-number">327</span><br><span class="line-number">328</span><br><span class="line-number">329</span><br><span class="line-number">330</span><br><span class="line-number">331</span><br><span class="line-number">332</span><br><span class="line-number">333</span><br><span class="line-number">334</span><br><span class="line-number">335</span><br><span class="line-number">336</span><br><span class="line-number">337</span><br><span class="line-number">338</span><br><span class="line-number">339</span><br><span class="line-number">340</span><br><span class="line-number">341</span><br><span class="line-number">342</span><br><span class="line-number">343</span><br><span class="line-number">344</span><br><span class="line-number">345</span><br><span class="line-number">346</span><br><span class="line-number">347</span><br><span class="line-number">348</span><br><span class="line-number">349</span><br><span class="line-number">350</span><br><span class="line-number">351</span><br><span class="line-number">352</span><br><span class="line-number">353</span><br><span class="line-number">354</span><br><span class="line-number">355</span><br><span class="line-number">356</span><br><span class="line-number">357</span><br><span class="line-number">358</span><br><span class="line-number">359</span><br><span class="line-number">360</span><br><span class="line-number">361</span><br><span class="line-number">362</span><br><span class="line-number">363</span><br><span class="line-number">364</span><br><span class="line-number">365</span><br><span class="line-number">366</span><br><span class="line-number">367</span><br><span class="line-number">368</span><br><span class="line-number">369</span><br><span class="line-number">370</span><br><span class="line-number">371</span><br><span class="line-number">372</span><br><span class="line-number">373</span><br><span class="line-number">374</span><br><span class="line-number">375</span><br><span class="line-number">376</span><br><span class="line-number">377</span><br><span class="line-number">378</span><br><span class="line-number">379</span><br><span class="line-number">380</span><br><span class="line-number">381</span><br><span class="line-number">382</span><br><span class="line-number">383</span><br><span class="line-number">384</span><br><span class="line-number">385</span><br><span class="line-number">386</span><br><span class="line-number">387</span><br><span class="line-number">388</span><br><span class="line-number">389</span><br><span class="line-number">390</span><br><span class="line-number">391</span><br><span class="line-number">392</span><br><span class="line-number">393</span><br><span class="line-number">394</span><br><span class="line-number">395</span><br><span class="line-number">396</span><br><span class="line-number">397</span><br><span class="line-number">398</span><br><span class="line-number">399</span><br><span class="line-number">400</span><br><span class="line-number">401</span><br><span class="line-number">402</span><br><span class="line-number">403</span><br><span class="line-number">404</span><br><span class="line-number">405</span><br><span class="line-number">406</span><br><span class="line-number">407</span><br><span class="line-number">408</span><br><span class="line-number">409</span><br><span class="line-number">410</span><br><span class="line-number">411</span><br><span class="line-number">412</span><br><span class="line-number">413</span><br><span class="line-number">414</span><br><span class="line-number">415</span><br><span class="line-number">416</span><br><span class="line-number">417</span><br><span class="line-number">418</span><br><span class="line-number">419</span><br><span class="line-number">420</span><br><span class="line-number">421</span><br><span class="line-number">422</span><br><span class="line-number">423</span><br><span class="line-number">424</span><br><span class="line-number">425</span><br><span class="line-number">426</span><br><span class="line-number">427</span><br><span class="line-number">428</span><br><span class="line-number">429</span><br><span class="line-number">430</span><br></div></div><h2 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-hidden="true">#</a></h2><h3 id="read-contributing-md-to-understand-what-to-put-under-deps-vs-devdeps" tabindex="-1"><code>&quot;//&quot;: &quot;READ CONTRIBUTING.md to understand what to put under deps vs. devDeps!&quot;</code> <a class="header-anchor" href="#read-contributing-md-to-understand-what-to-put-under-deps-vs-devdeps" aria-hidden="true">#</a></h3><p>&quot;//&quot; 是 JSON 格式中的注释，其作用是给代码添加注释说明，但并不会被解析器执行。在这个示例中，这个注释是用来提醒开发者要阅读 <a href="http://CONTRIBUTING.md" target="_blank" rel="noreferrer">CONTRIBUTING.md</a> 文件，以便了解该在 deps 还是 devDeps 下添加依赖项。这个注释并不会被 npm 解析器执行，也不会对依赖项的安装和使用产生任何影响。</p><h3 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-hidden="true">#</a></h3><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;peerDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;@types/node&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&gt;= 14&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;less&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;sass&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;stylus&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;sugarss&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;terser&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^5.4.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;peerDependencies&quot;</span><span style="color:#B392F0;">: {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;@types/node&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&gt;= 14&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;less&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;*&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;sass&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;*&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;stylus&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;*&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;sugarss&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;*&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;terser&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;^5.4.0&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  },</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这是一个 Node.js 模块的 package.json 文件中的 peerDependencies 字段，用于声明该模块所需要的运行时或编译时的 peer 依赖。</p><p>peerDependencies 字段中声明的依赖，是指当前模块运行或编译时需要依赖的其他模块，但这些依赖模块不会被当前模块直接安装。而是在安装当前模块的应用程序或库中，需要手动安装这些 peer 依赖模块的特定版本。</p><p>在这个示例中，peerDependencies 字段中声明了 &quot;@types/node&quot;、&quot;less&quot;、&quot;sass&quot;、&quot;stylus&quot;、&quot;sugarss&quot;、&quot;terser&quot; 这些 peer 依赖。其中 &quot;@types/node&quot; 是 TypeScript 对 Node.js 类型定义文件的依赖，而其他依赖是一些预处理器（Preprocessor）和代码压缩工具。通过声明这些 peer 依赖，可以确保应用程序或库的开发者，在使用当前模块时，需要安装这些依赖的特定版本，以避免可能出现的依赖冲突或版本不兼容问题。</p><p>在 <code>peerDependencies</code> 中，<code>*</code> 表示对应的依赖没有版本限制，也就是可以使用任意版本。这意味着安装该模块时可以使用已安装的任意版本或者安装最新版本。但需要注意，使用 <code>*</code> 可能会导致依赖不稳定，因为每次安装都可能得到不同版本的依赖。因此，最好是指定所需要的具体版本，以确保稳定性和可重复性。</p><h3 id="peerdependenciesmeta" tabindex="-1">peerDependenciesMeta <a class="header-anchor" href="#peerdependenciesmeta" aria-hidden="true">#</a></h3><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;peerDependenciesMeta&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;@types/node&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;optional&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;sass&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;optional&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;stylus&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;optional&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;less&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;optional&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;sugarss&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;optional&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;terser&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;optional&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;peerDependenciesMeta&quot;</span><span style="color:#B392F0;">: {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;@types/node&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F8F8F8;">&quot;optional&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;sass&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F8F8F8;">&quot;optional&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;stylus&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F8F8F8;">&quot;optional&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;less&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F8F8F8;">&quot;optional&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;sugarss&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F8F8F8;">&quot;optional&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;terser&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F8F8F8;">&quot;optional&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这是 <code>package.json</code> 文件中的 <code>&quot;peerDependenciesMeta&quot;</code> 字段，用于描述指定的对等依赖项的元数据，它的含义如下：</p><p>当一个包依赖另一个包时，如果这个依赖是一个对等依赖（peer dependency），那么它是一个不同于普通依赖的特殊类型的依赖。对等依赖是指两个包（或多个包）共享同一个依赖项，但这个依赖项不会被包含在这些包的 <code>node_modules</code> 目录中。相反，它被期望在它们的共享环境中存在，例如在一个应用程序的顶层 <code>node_modules</code> 目录中，或者在一个公共的库中。</p><p>在这里，<code>peerDependenciesMeta</code> 中列出了一些对等依赖项，例如 <code>sass</code>、<code>stylus</code>、<code>less</code> 等。对于每个对等依赖项，它们都有一个 <code>&quot;optional&quot;: true</code> 标记，表示这些依赖是可选的，如果没有安装，也不会影响到包的功能，但是如果安装了这些对等依赖，包的功能可能会得到增强或者优化。</p><p>在一些情况下，对等依赖会被用于共享一些全局的库，比如 <code>typescript</code>，如果多个包都依赖于 <code>typescript</code>，那么如果它们都依赖于不同的 <code>typescript</code> 版本，就会导致问题。因此，这些包可以将 <code>typescript</code> 列为对等依赖项，让它们共享同一个全局 <code>typescript</code> 版本。</p><h2 id="bin-vite-js" tabindex="-1">bin/vite.js <a class="header-anchor" href="#bin-vite-js" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#b392f0;"></span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,19),e=[o];function c(r,t,B,y,i,F){return n(),a("div",null,e)}const b=s(p,[["render",c]]);export{A as __pageData,b as default};
