import{_ as e,o as i,c as l,a}from"./app.bfa9bd4b.js";const S=JSON.parse('{"title":"概括","description":"","frontmatter":{},"headers":[{"level":2,"title":"扩展能做什么？","slug":"扩展能做什么","link":"#扩展能做什么","children":[]},{"level":2,"title":"声明性语言特征","slug":"声明性语言特征","link":"#声明性语言特征","children":[]},{"level":2,"title":"编程语言特性","slug":"编程语言特性","link":"#编程语言特性","children":[]},{"level":2,"title":"语言服务器协议","slug":"语言服务器协议","link":"#语言服务器协议","children":[]},{"level":2,"title":"特殊情况","slug":"特殊情况","link":"#特殊情况","children":[{"level":3,"title":"多根工作区支持主题","slug":"多根工作区支持主题","link":"#多根工作区支持主题","children":[]},{"level":3,"title":"嵌入式语言主题","slug":"嵌入式语言主题","link":"#嵌入式语言主题","children":[]}]}],"relativePath":"7.工具/vscode插件开发/1.概括.md","lastUpdated":1720835436710}'),r={name:"7.工具/vscode插件开发/1.概括.md"},d=a('<h1 id="概括" tabindex="-1">概括 <a class="header-anchor" href="#概括" aria-hidden="true">#</a></h1><p>VSCode的构建考虑了可扩展性。从UI到编辑体验，VSCode的几乎所有部分都可以通过插件API进行定制和增强。事实上，VSCode的许多核心功能都是作为插件构建的，并使用同样的插件API</p><p>本文档描述了：</p><ul><li>如何构建、运行、调试、测试和发布扩展</li><li>如何利用VSCode丰富的插件API</li><li>在哪可以找到帮助入门的指南和代码示例</li><li>遵循最佳实践扩展指南</li></ul><p>代码示例可在<a href="https://github.com/microsoft/vscode-extension-samples" target="_blank" rel="noreferrer">Microsoft/vscode extension samples</a>上获得</p><p>如果您正在寻找已发布的插件，请前往VSCode插件市场</p><h2 id="扩展能做什么" tabindex="-1">扩展能做什么？ <a class="header-anchor" href="#扩展能做什么" aria-hidden="true">#</a></h2><p>下面是一些使用插件API可以实现的示例：</p><ul><li>使用颜色或文件图标主题更改VSCode的外观-主题化</li><li>在UI中添加自定义组件和视图-扩展工作台</li><li>创建Webview以显示使用HTML/CSS/JS构建的自定义网页-Webview指南</li><li>支持新的编程语言-语言扩展概述</li><li>支持调试特定的运行时-调试器扩展指南</li></ul><h2 id="声明性语言特征" tabindex="-1">声明性语言特征 <a class="header-anchor" href="#声明性语言特征" aria-hidden="true">#</a></h2><p>声明性语言功能在配置文件中定义。示例包括与 VSCode 捆绑在一起的 html、css 和 typescript 基本扩展，它们提供了一部分以下声明性语言功能：</p><ul><li>语法高亮</li><li>代码片段补全</li><li>括号匹配</li><li>括号自动关闭</li><li>括号自动环绕</li><li>注释切换</li><li>自动缩进</li></ul><p>对于编写提供声明性语言特性的语言扩展，有三个指南</p><ul><li>语法高亮指南：VSCode 使用<code>TextMate</code>语法进行语法高亮。本指南将指导您编写一个简单的<code>TextMate</code>语法，并将其转换为 VSCode 扩展</li><li>代码片段补全指南：本指南介绍如何将一组代码片段捆绑到扩展中</li><li>语言配置指南：VSCode 允许扩展为任何编程语言定义语言配置。该文件控制基本编辑功能，如注释切换、括号匹配/环绕和区域折叠</li></ul><h2 id="编程语言特性" tabindex="-1">编程语言特性 <a class="header-anchor" href="#编程语言特性" aria-hidden="true">#</a></h2><p>编程语言功能包括自动补全、错误检查和跳转定义。这些功能通常由语言服务器提供支持，语言服务器是一个分析项目以提供动态功能的程序。一个例子是捆绑在 VSCode 中的 Typescript 语言特性扩展。它利用 TypeScript 语言服务提供编程语言功能，例如：</p><ul><li>悬停信息(vscode.languages.registerHoverProvider)</li><li>自动补全(vscode.languages.registerCompletionItemProvider)</li><li>跳转定义(vscode.languages.registerDefinitionProvider)</li><li>错误检查</li><li>格式化</li><li>重构</li><li>折叠</li></ul><h2 id="语言服务器协议" tabindex="-1">语言服务器协议 <a class="header-anchor" href="#语言服务器协议" aria-hidden="true">#</a></h2><p>通过标准化语言服务器（静态代码分析工具）和语言客户端（通常是源代码编辑器）之间的通信，语言服务器协议允许扩展作者编写一个代码分析程序，并在多个编辑器中复用。 在编程语言功能列表中，您可以找到所有 VSCode 语言功能的列表，以及它们如何映射到语言服务器协议规范 语言服务器扩展指南，将介绍如何在 VSCode 中实现语言服务器扩展：</p><h2 id="特殊情况" tabindex="-1">特殊情况 <a class="header-anchor" href="#特殊情况" aria-hidden="true">#</a></h2><h3 id="多根工作区支持主题" tabindex="-1">多根工作区支持主题 <a class="header-anchor" href="#多根工作区支持主题" aria-hidden="true">#</a></h3><p>当用户打开多根工作区(VSCode 编辑器包含多个项目)时，可能需要相应地调整语言服务器扩展。本主题讨论支持多根工作区的多种方法</p><h3 id="嵌入式语言主题" tabindex="-1">嵌入式语言主题 <a class="header-anchor" href="#嵌入式语言主题" aria-hidden="true">#</a></h3><p>嵌入式语言在 web 开发中很常见。例如，HTML 中的 CSS/JS 和 JavaScript/TypeScript 中的 GraphQL。本主题讨论如何使语言功能可用于嵌入式语言</p>',24),t=[d];function s(o,n,h,c,p,u){return i(),l("div",null,t)}const v=e(r,[["render",s]]);export{S as __pageData,v as default};
