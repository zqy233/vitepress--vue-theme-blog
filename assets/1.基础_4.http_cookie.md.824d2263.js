import{_ as o,o as e,c as t,a as i}from"./app.bfa9bd4b.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"cookie存在，但document.cookie获取为空","slug":"cookie存在-但document-cookie获取为空","link":"#cookie存在-但document-cookie获取为空","children":[]},{"level":2,"title":"cookie 的作用域","slug":"cookie-的作用域","link":"#cookie-的作用域","children":[]}],"relativePath":"1.基础/4.http/cookie.md","lastUpdated":1720835436686}'),c={name:"1.基础/4.http/cookie.md"},a=i('<h2 id="cookie存在-但document-cookie获取为空" tabindex="-1">cookie存在，但document.cookie获取为空 <a class="header-anchor" href="#cookie存在-但document-cookie获取为空" aria-hidden="true">#</a></h2><p>因为cookie设置为了http-only，不能通过js读取和删除，只能前端请求接口，发现过期后再做处理</p><blockquote><p>HttpOnly是2016年微软为IE6而新增了这一属性 HttpOnly是包含在http返回头Set-Cookie里面的一个附加的flag，所以它是后端服务器对cookie设置的一个附加的属性，在生成cookie时使用HttpOnly标志有助于减轻客户端脚本访问受保护cookie的风险（如果浏览器支持则会显示，若不支持则选择传统方式）</p></blockquote><p>也就是说HttpOnly的存在主要是为了防止用户通过前端来盗用cookie而产生的风险，例如XSS攻击就是对cookie进行盗窃，使用这一属性就可以防止客户端（前端）不可访问</p><h2 id="cookie-的作用域" tabindex="-1">cookie 的作用域 <a class="header-anchor" href="#cookie-的作用域" aria-hidden="true">#</a></h2><ul><li>Domain 指定哪些主机可以接受 Cookie，如果不指定，默认为 origin，<strong>不包含子域名</strong>。如果指定了 Domain，则包含子域名。</li><li>Path 指定主机下的哪些路径可以接受 cookie。（该 url 路径必须存在于请求 url 中）</li></ul>',6),n=[a];function l(k,r,d,s,_,p){return e(),t("div",null,n)}const m=o(c,[["render",l]]);export{u as __pageData,m as default};
