import{_ as e,o as a,c as l,a as t}from"./app.bfa9bd4b.js";const u=JSON.parse('{"title":"区别","description":"","frontmatter":{},"headers":[{"level":3,"title":"懒加载：","slug":"懒加载","link":"#懒加载","children":[]},{"level":3,"title":"虚拟滚动：","slug":"虚拟滚动","link":"#虚拟滚动","children":[]}],"relativePath":"2.JS/1.基础/懒加载和虚拟滚动.md","lastUpdated":1720835436686}'),o={name:"2.JS/1.基础/懒加载和虚拟滚动.md"},i=t('<h1 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-hidden="true">#</a></h1><h3 id="懒加载" tabindex="-1">懒加载： <a class="header-anchor" href="#懒加载" aria-hidden="true">#</a></h3><p>常见场景，滚动底部加载新的数据，缺点很明显，用户不能得知总数据量的高度，不能快速滚动</p><h3 id="虚拟滚动" tabindex="-1">虚拟滚动： <a class="header-anchor" href="#虚拟滚动" aria-hidden="true">#</a></h3><p>常见场景，只渲染可视区域的dom，用户进行滚动时js判断相应的数据，进行可视区域dom的更新，原理就是js运行速度远快于dom渲染的速度，用js的时间换dom渲染的时</p><blockquote><p>html渲染成千上万的dom会导致浏览器卡顿乃至卡死，虚拟滚动就是解决方案之一 页面只需要渲染可视区域的dom，当用户进行滚动时根据滚动高度进行可视区域dom的更新，从而达到无感滚动效果</p></blockquote><p>思路：</p><ul><li>根据数据条数计算相应高度，使用dom占位，从而生成相应高度滚动列表，用户可以自由滚动</li><li>监听滚动列表的scroll事件</li><li>根据scrollTop进行slice数组，取出相应下标数据</li><li>根据scrollTop值控制虚拟列表偏移，使其始终在用户可视区域内</li><li>上下需要预留一些dom，避免用户滚动过快出现白屏</li><li>使用fixed，absolute，transform避免页面回流</li></ul>',8),d=[i];function r(s,_,c,n,h,p){return a(),l("div",null,d)}const f=e(o,[["render",r]]);export{u as __pageData,f as default};
