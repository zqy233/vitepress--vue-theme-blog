import{_ as s,c as n,o as a,a as e}from"./app.a9997904.js";const F=JSON.parse('{"title":"使用","description":"","frontmatter":{},"headers":[{"level":2,"title":"npm包方式使用","slug":"npm包方式使用","link":"#npm包方式使用","children":[]}],"relativePath":"4.第三方库/待整理/prettier.md","lastUpdated":1676276426000}'),p={name:"4.第三方库/待整理/prettier.md"},l=e(`<h1 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h1><p>一般通过以下方式使用prettier</p><ul><li>使用vscode等代码编辑器的<code>prettier插件</code>：搭配快捷键如ctrl+s，保存时自动格式化，配置简单，使用方便，但是缺点是由于团队成员可能使用不同的编辑器，prettier版本、配置不同，从而格式化的风格迥异且难统一。所以这种使用方式个人使用没问题，团队推广不太适合</li><li>下载<code>prettier</code>npm 包，在项目中配置好，强制所有开发人员使用统一风格，优点是确实易于统一，缺点是所有开发人员必须按照指定风格来格式化代码了，剥夺了个人代码风格喜好</li></ul><p>所以我们可以结合第一种和第二种方式，搭配git集成，代码提交时候再进行格式化，从而实现开发时个人使用prettier插件自行格式化代码，git提交代码时再按指定的统一配置格式化项目代码</p><h2 id="npm包方式使用" tabindex="-1">npm包方式使用 <a class="header-anchor" href="#npm包方式使用" aria-hidden="true">#</a></h2><p>下载</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">npm </span><span style="color:#98C379;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">prettier</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm </span><span style="color:#9DB1C5;">i</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">prettier</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>新建test.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">uglyCode</span><span style="color:#ABB2BF;">(){</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;this is an ugly function!&quot;</span><span style="color:#ABB2BF;">)}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> uglyCode(){</span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;this is an ugly function!&quot;</span><span style="color:#B392F0;">)}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用命令格式化指定文件</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">npx </span><span style="color:#98C379;">prettier</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--write</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.</span><span style="color:#56B6C2;">\\t</span><span style="color:#98C379;">est.js</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npx </span><span style="color:#9DB1C5;">prettier</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">--write</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">.</span><span style="color:#B392F0;">\\t</span><span style="color:#9DB1C5;">est.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用命令格式化所有文件</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">npx </span><span style="color:#98C379;">prettier</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--write</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npx </span><span style="color:#9DB1C5;">prettier</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">--write</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>格式化后</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">uglyCode</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;this is an ugly function!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> uglyCode() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;this is an ugly function!&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>prettier默认不会处理<code>node_modules</code>里的文件，如果想忽略其他的文件或目录，可以在项目目录下新建<code>.prettierignore</code>文件，表示忽略某些文件或文件夹，具体格式跟<code>.gitignore</code>类似.</p><p>目前的代码格式化都是Prettier根据自己的默认配置帮我们做的，当然也可以通过Prettier的配置项实现自定义的格式化</p><p>新建一个<code>.prettierrc</code>的文件，格式为json，结构如下</p>`,18),o=[l];function t(r,c,i,d,B,y){return a(),n("div",null,o)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
