import{_ as s,c as n,o as a,a as l}from"./app.a9997904.js";const d=JSON.parse('{"title":"赋值与深浅拷贝","description":"","frontmatter":{},"headers":[{"level":2,"title":"赋值","slug":"赋值","link":"#赋值","children":[]},{"level":2,"title":"深浅拷贝定义","slug":"深浅拷贝定义","link":"#深浅拷贝定义","children":[]},{"level":2,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[{"level":3,"title":"对象浅拷贝","slug":"对象浅拷贝","link":"#对象浅拷贝","children":[]},{"level":3,"title":"解构赋值","slug":"解构赋值","link":"#解构赋值","children":[]},{"level":3,"title":"拓展运算符","slug":"拓展运算符","link":"#拓展运算符","children":[]},{"level":3,"title":"数组浅拷贝","slug":"数组浅拷贝","link":"#数组浅拷贝","children":[]}]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[{"level":3,"title":"常用的深拷贝方法","slug":"常用的深拷贝方法","link":"#常用的深拷贝方法","children":[]},{"level":3,"title":"JSON.parse(JSON.stringify())","slug":"json-parse-json-stringify","link":"#json-parse-json-stringify","children":[]}]},{"level":2,"title":"深浅拷贝区别","slug":"深浅拷贝区别","link":"#深浅拷贝区别","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[{"level":3,"title":"提问1，什么是深浅拷贝？","slug":"提问1-什么是深浅拷贝","link":"#提问1-什么是深浅拷贝","children":[]},{"level":3,"title":"提问2,为什么需要深浅拷贝？","slug":"提问2-为什么需要深浅拷贝","link":"#提问2-为什么需要深浅拷贝","children":[]},{"level":3,"title":"提问3.解构赋值属于深浅拷贝嘛？","slug":"提问3-解构赋值属于深浅拷贝嘛","link":"#提问3-解构赋值属于深浅拷贝嘛","children":[]},{"level":3,"title":"提问4.常见的浅拷贝对象有哪些方法？","slug":"提问4-常见的浅拷贝对象有哪些方法","link":"#提问4-常见的浅拷贝对象有哪些方法","children":[]},{"level":3,"title":"提问4.常见的浅拷贝数组有哪些方法？","slug":"提问4-常见的浅拷贝数组有哪些方法","link":"#提问4-常见的浅拷贝数组有哪些方法","children":[]},{"level":3,"title":"提问5.手写一个循环递归深拷贝","slug":"提问5-手写一个循环递归深拷贝","link":"#提问5-手写一个循环递归深拷贝","children":[]}]},{"level":2,"title":"Object.assign是浅拷贝","slug":"object-assign是浅拷贝","link":"#object-assign是浅拷贝","children":[]}],"relativePath":"2.javaScript/基础/深浅拷贝.md","lastUpdated":1676276426000}'),p={name:"2.javaScript/基础/深浅拷贝.md"},o=l(`<h1 id="赋值与深浅拷贝" tabindex="-1">赋值与深浅拷贝 <a class="header-anchor" href="#赋值与深浅拷贝" aria-hidden="true">#</a></h1><blockquote><p><code>JavaScript</code>中存在两大数据类型：</p><ul><li>基本类型，数据保存在在<code>栈内存</code>中</li><li>引用类型，数据保存在<code>堆内存</code>中，引用类型的变量是一个指向堆内存中实际对象的引用(<code>指针</code>)，存在<code>栈</code>中</li></ul></blockquote><h2 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-hidden="true">#</a></h2><p>赋值是将一个变量赋给另一个变量的操作</p><p>因为 <code>JavaScript</code>中的两大数据类型，所以赋值也分为两类：</p><p>1、<strong>基本类型</strong>：赋值，赋值之后两个变量互不影响</p><p>2、<strong>引用类型</strong>：赋址，实际上是把一个变量的地址赋给另一个变量，两个变量具有相同的引用，指向堆内存中同一个对象，修改其中一个变量的值，相互之间有影响</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 基本类型两个值不会互相影响</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;change&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// test change</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 引用类型的两个值会互相影响</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">c</span></span>
<span class="line"><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;change&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// { name: &quot;change&quot; } { name: &quot;change&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">e</span></span>
<span class="line"><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [4,1,2]</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// 基本类型两个值不会互相影响</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> a </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> b </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> a</span></span>
<span class="line"><span style="color:#B392F0;">b </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;change&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(a</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b)  </span><span style="color:#6B737C;">// test change</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 引用类型的两个值会互相影响</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> c </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> { name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span><span style="color:#B392F0;"> }</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> d </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> c</span></span>
<span class="line"><span style="color:#79B8FF;">d</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;change&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(c</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> d) </span><span style="color:#6B737C;">// { name: &quot;change&quot; } { name: &quot;change&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> e </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> f </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> e</span></span>
<span class="line"><span style="color:#B392F0;">f[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">4</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(e</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> f) </span><span style="color:#6B737C;">// [4,1,2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>很多时候，我们想要的结果是两个初始值相同的变量互不影响，由上可知我们其实只需要处理<code>引用类型</code>的变量</p><p>所以就要使用到拷贝（分为深浅两种）来处理<code>引用类型</code></p><h2 id="深浅拷贝定义" tabindex="-1">深浅拷贝定义 <a class="header-anchor" href="#深浅拷贝定义" aria-hidden="true">#</a></h2><p>综上，让我们整理一下深浅拷贝的定义：</p><p><code>基本类型没有深浅拷贝的概念</code>，从<code>内存堆栈</code>的角度来说，<code>深浅拷贝只针对引用类型</code></p><h2 id="浅拷贝" tabindex="-1">浅拷贝 <a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a></h2><p>浅拷贝，拷贝一个<code>引用类型</code>的<code>基本类型</code>, <code>该引用类型</code>中的<code>引用类型</code>则仍是<code>相同引用</code> 修改浅拷贝后的<code>引用类型</code>中的<code>基本类型</code>，不会影响<code>原引用类型</code>，修改浅拷贝后的<code>引用类型</code>中的<code>引用类型</code>，则会影响<code>原引用类型</code> 什么意思？举个例子，下方obj对象是一个<code>引用类型</code>，其<code>基本类型</code>为<code>name</code>,<code>num</code>，其<code>引用类型</code>为<code>fisrtObj,testArr</code> 浅拷贝后修改<code>name</code>，<code>num</code>基本类型不会影响原变量，而修改<code>fisrtObj</code>，<code>testArr</code>引用类型就会影响obj对象</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">const </span><span style="color:#98C379;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  name: </span><span style="color:#98C379;">&quot;name&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">  num:0,</span></span>
<span class="line"><span style="color:#ABB2BF;">  fisrtObj: </span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    name: </span><span style="color:#98C379;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  testArr:[1,2,3]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">const </span><span style="color:#9DB1C5;">obj</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">=</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">{</span></span>
<span class="line"><span style="color:#B392F0;">  name: </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#9DB1C5;">,</span></span>
<span class="line"><span style="color:#B392F0;">  num:0,</span></span>
<span class="line"><span style="color:#B392F0;">  fisrtObj: </span><span style="color:#9DB1C5;">{</span></span>
<span class="line"><span style="color:#B392F0;">    name: </span><span style="color:#FFAB70;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  testArr:[1,2,3]</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="对象浅拷贝" tabindex="-1">对象浅拷贝 <a class="header-anchor" href="#对象浅拷贝" aria-hidden="true">#</a></h3><p>分别使用</p><ul><li>遍历对象属性与值来新建对象</li><li>Object.assign</li><li>拓展运算符</li></ul><h4 id="遍历对象属性与值来新建对象" tabindex="-1">遍历对象属性与值来新建对象 <a class="header-anchor" href="#遍历对象属性与值来新建对象" aria-hidden="true">#</a></h4><p>实现一个方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">shallowClone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">newObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)){</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">newObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">newObj</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> shallowClone(obj) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">newObj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {}</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">for</span><span style="color:#B392F0;">(</span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> prop </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> obj) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;">(</span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.hasOwnProperty(prop)){</span></span>
<span class="line"><span style="color:#B392F0;">            newObj[prop] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> obj[prop]</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> newObj</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>由输出结果，可知只是拷贝<code>基本类型</code>，引用类型则仍是<code>相同引用</code>，属于浅拷贝</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">testObj</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">shallowClone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">testObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cloneObj</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印结果：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  {                  {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  name: &quot;name&quot;,       name: &quot;test&quot;, </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  testObj: {          testObj: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    name: &quot;test&quot;      name: &quot;test&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  }                     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }                    }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  testObj</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> shallowClone(obj)</span></span>
<span class="line"><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">testObj</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(obj</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cloneObj) </span></span>
<span class="line"><span style="color:#6B737C;">// 打印结果：</span></span>
<span class="line"><span style="color:#6B737C;">//  {                  {</span></span>
<span class="line"><span style="color:#6B737C;">//  name: &quot;name&quot;,       name: &quot;test&quot;, </span></span>
<span class="line"><span style="color:#6B737C;">//  testObj: {          testObj: {</span></span>
<span class="line"><span style="color:#6B737C;">//    name: &quot;test&quot;      name: &quot;test&quot;</span></span>
<span class="line"><span style="color:#6B737C;">//  }                     }</span></span>
<span class="line"><span style="color:#6B737C;">// }                    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="object-assign" tabindex="-1">Object.assign <a class="header-anchor" href="#object-assign" aria-hidden="true">#</a></h4><p>由输出结果，可知只是拷贝<code>基本类型</code>，引用类型则仍是<code>相同引用</code>，属于浅拷贝</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">({}, </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cloneObj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印结果：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  {                       {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    num: 0,                 num: 10, </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    arr: [&quot;test&quot;, &quot;two&quot;]    arr: [&quot;test&quot;, &quot;two&quot;]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }                         } </span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  num</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  arr</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;one&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;two&quot;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.assign({}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> obj)</span></span>
<span class="line"><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;">.num </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span></span>
<span class="line"><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;">.arr[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(obj</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cloneObj)</span></span>
<span class="line"><span style="color:#6B737C;">// 打印结果：</span></span>
<span class="line"><span style="color:#6B737C;">//  {                       {</span></span>
<span class="line"><span style="color:#6B737C;">//    num: 0,                 num: 10, </span></span>
<span class="line"><span style="color:#6B737C;">//    arr: [&quot;test&quot;, &quot;two&quot;]    arr: [&quot;test&quot;, &quot;two&quot;]</span></span>
<span class="line"><span style="color:#6B737C;">// }                         } </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-hidden="true">#</a></h3><p>解构赋值属于<code>赋值</code>的概念，<strong>不属于</strong><code>深浅拷贝</code>的概念</p><p>由输出结果，可知即使是<code>基本类型</code>的修改，也会影响原变量，因为<code>没有拷贝原引用类型</code>，所以<strong>不属于</strong><code>深浅拷贝</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#E06C75;">testObj</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">testObj</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span></span>
<span class="line"><span style="color:#E5C07B;">testObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">testObj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印结果：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  {                        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    testObj: {             {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      name: &quot;test&quot;            name: &quot;test&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    }                      }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }   </span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">   testObj</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">     name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">testObj</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> obj</span></span>
<span class="line"><span style="color:#79B8FF;">testObj</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(obj</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> testObj)</span></span>
<span class="line"><span style="color:#6B737C;">// 打印结果：</span></span>
<span class="line"><span style="color:#6B737C;">//  {                        </span></span>
<span class="line"><span style="color:#6B737C;">//    testObj: {             {</span></span>
<span class="line"><span style="color:#6B737C;">//      name: &quot;test&quot;            name: &quot;test&quot;</span></span>
<span class="line"><span style="color:#6B737C;">//    }                      }</span></span>
<span class="line"><span style="color:#6B737C;">// }   </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="拓展运算符" tabindex="-1">拓展运算符 <a class="header-anchor" href="#拓展运算符" aria-hidden="true">#</a></h3><p>由输出结果，可知只是拷贝<code>基本类型</code>，引用类型则仍是<code>相同引用</code>，属于浅拷贝</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#E06C75;">testObj</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 属于赋值，不属于深浅拷贝</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">testObj</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span></span>
<span class="line"><span style="color:#E5C07B;">testObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">testObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 拓展运算符，属于浅拷贝</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">testObj</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;last&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 修改基本类型不会影响原引用类型</span></span>
<span class="line"><span style="color:#E5C07B;">cloneObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]  </span><span style="color:#7F848E;font-style:italic;">// 浅拷贝修改引用类型仍是相同引用</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">testObj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cloneObj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印结果：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  {                        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    testObj: {        {                   {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      name: &quot;test&quot;,     name: &quot;test&quot;,       name: &quot;last&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      arr: [4, 5, 3]    arr: [4, 5, 3]      arr: [4, 5, 3]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    }                 }                   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">   testObj</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">     name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">     arr</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">3</span><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#6B737C;">// 属于赋值，不属于深浅拷贝</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">testObj</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> obj</span></span>
<span class="line"><span style="color:#79B8FF;">testObj</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">testObj</span><span style="color:#B392F0;">.arr[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#6B737C;">// 拓展运算符，属于浅拷贝</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> { </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">testObj }</span></span>
<span class="line"><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;last&quot;</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 修改基本类型不会影响原引用类型</span></span>
<span class="line"><span style="color:#79B8FF;">cloneObj</span><span style="color:#B392F0;">.arr[</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span><span style="color:#F8F8F8;">5</span><span style="color:#B392F0;">]  </span><span style="color:#6B737C;">// 浅拷贝修改引用类型仍是相同引用</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(obj</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> testObj</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cloneObj)</span></span>
<span class="line"><span style="color:#6B737C;">// 打印结果：</span></span>
<span class="line"><span style="color:#6B737C;">//  {                        </span></span>
<span class="line"><span style="color:#6B737C;">//    testObj: {        {                   {</span></span>
<span class="line"><span style="color:#6B737C;">//      name: &quot;test&quot;,     name: &quot;test&quot;,       name: &quot;last&quot;,</span></span>
<span class="line"><span style="color:#6B737C;">//      arr: [4, 5, 3]    arr: [4, 5, 3]      arr: [4, 5, 3]</span></span>
<span class="line"><span style="color:#6B737C;">//    }                 }                   }</span></span>
<span class="line"><span style="color:#6B737C;">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="数组浅拷贝" tabindex="-1">数组浅拷贝 <a class="header-anchor" href="#数组浅拷贝" aria-hidden="true">#</a></h3><blockquote><p>分别使用<code>slice</code>, <code>concat</code>,<code>拓展运算符</code></p></blockquote><h4 id="slice" tabindex="-1">slice <a class="header-anchor" href="#slice" aria-hidden="true">#</a></h4><p>由输出结果，可知只是拷贝<code>基本类型</code>，引用类型则仍是<code>相同引用</code>，属于浅拷贝</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cloneArr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;three&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [{ name: &quot;test&quot; }, &quot;one&quot;, &quot;two&quot;]  [{ name: &quot;test&quot; }, &quot;three&quot;, &quot;two&quot;]</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [{ name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#B392F0;"> }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;one&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;two&quot;</span><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cloneArr</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;">.slice(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">cloneArr[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">].name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#B392F0;">cloneArr[</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;three&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(arr</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cloneArr) </span><span style="color:#6B737C;">// [{ name: &quot;test&quot; }, &quot;one&quot;, &quot;two&quot;]  [{ name: &quot;test&quot; }, &quot;three&quot;, &quot;two&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="concat" tabindex="-1">concat <a class="header-anchor" href="#concat" aria-hidden="true">#</a></h4><p>由输出结果，可知只是拷贝<code>基本类型</code>，引用类型则仍是<code>相同引用</code>，属于浅拷贝</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cloneArr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">([])</span></span>
<span class="line"><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;three&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [{ name: &quot;test&quot; }, &quot;one&quot;, &quot;two&quot;]  [{ name: &quot;test&quot; }, &quot;three&quot;, &quot;two&quot;]</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [{ name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#B392F0;"> }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;one&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;two&quot;</span><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cloneArr</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;">.concat([])</span></span>
<span class="line"><span style="color:#B392F0;">cloneArr[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">].name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#B392F0;">cloneArr[</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;three&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(arr</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cloneArr) </span><span style="color:#6B737C;">// [{ name: &quot;test&quot; }, &quot;one&quot;, &quot;two&quot;]  [{ name: &quot;test&quot; }, &quot;three&quot;, &quot;two&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="拓展运算符-1" tabindex="-1">拓展运算符 <a class="header-anchor" href="#拓展运算符-1" aria-hidden="true">#</a></h4><p>由输出结果，可知只是拷贝<code>基本类型</code>，引用类型则仍是<code>相同引用</code>，属于浅拷贝</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cloneArr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;three&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cloneArr</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [{ name: &quot;test&quot; }, &quot;one&quot;, &quot;two&quot;]  [{ name: &quot;test&quot; }, &quot;three&quot;, &quot;two&quot;]</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [{ name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#B392F0;"> }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;one&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;two&quot;</span><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cloneArr</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">arr]</span></span>
<span class="line"><span style="color:#B392F0;">cloneArr[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">].name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#B392F0;">cloneArr[</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;three&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(arr</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cloneArr) </span><span style="color:#6B737C;">// [{ name: &quot;test&quot; }, &quot;one&quot;, &quot;two&quot;]  [{ name: &quot;test&quot; }, &quot;three&quot;, &quot;two&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a></h2><p>深拷贝完全拷贝一个<code>引用类型</code>，不但拷贝了这个<code>引用类型</code>中的所有<code>基本类型</code>，还为这个<code>引用类型</code>中的所有的<code>引用类型</code>开辟<code>新栈新堆新指针</code></p><p>所以修改一个深拷贝后的<code>引用类型</code>的属性或元素，不会影响<code>原引用类型</code>的属性或元素，无论是修改其属性或元素中的<code>基本类型</code>还是<code>引用类型</code></p><h3 id="常用的深拷贝方法" tabindex="-1">常用的深拷贝方法 <a class="header-anchor" href="#常用的深拷贝方法" aria-hidden="true">#</a></h3><ul><li>JSON.parse(JSON.stringify())</li><li>循环递归</li></ul><h3 id="json-parse-json-stringify" tabindex="-1">JSON.parse(JSON.stringify()) <a class="header-anchor" href="#json-parse-json-stringify" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj2</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj2</span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.parse(</span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.stringify(obj1))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>JSON.stringify()</code>：用于将JavaScript值转换为JSON字符串 <code>JSON.parse()</code>：用于将一个JSON字符串转换为JavaScript对象</p><p>但是这种方式存在局限性，会忽略<code>undefined</code>、<code>symbol</code>和<code>函数</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name1</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">name3</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name4</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// {name: &quot;A&quot;}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;A&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    name1</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    name3</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">() {}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    name4</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Symbol(</span><span style="color:#FFAB70;">&#39;A&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj2</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.parse(</span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.stringify(obj))</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(obj2) </span><span style="color:#6B737C;">// {name: &quot;A&quot;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="循环递归" tabindex="-1">循环递归 <a class="header-anchor" href="#循环递归" aria-hidden="true">#</a></h4><p>写法不是固定的，自行写得出一种即可</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deepClone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">source</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">targetObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">source</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Array</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> [] </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {} </span><span style="color:#7F848E;font-style:italic;">// 判断复制的目标是数组还是对象</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 遍历目标</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">source</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;object&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 如果值是对象，就递归一下</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">targetObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Array</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> [] </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">targetObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deepClone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 如果不是，就直接赋值</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">targetObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">targetObj</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">testObj</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">shallowobj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">deepobj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deepClone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 浅拷贝</span></span>
<span class="line"><span style="color:#E5C07B;">shallowobj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#E5C07B;">shallowobj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">testObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 深拷贝</span></span>
<span class="line"><span style="color:#E5C07B;">deepobj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#E5C07B;">deepobj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">testObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;last&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">shallowobj</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">deepobj</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印结果：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  {   </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    num:1,            num:1,              num:2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    testObj: {        {                   {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      name: &quot;test&quot;,     name: &quot;test&quot;,       name: &quot;last&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    }                 }                   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> deepClone(source) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">targetObj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">source</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> Array </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> [] </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {} </span><span style="color:#6B737C;">// 判断复制的目标是数组还是对象</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> keys </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> source) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 遍历目标</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">source</span><span style="color:#B392F0;">.hasOwnProperty(keys)) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (source[keys] </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> source[keys] </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;object&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 如果值是对象，就递归一下</span></span>
<span class="line"><span style="color:#B392F0;">        targetObj[keys] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> source[keys].</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> Array </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> [] </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {}</span></span>
<span class="line"><span style="color:#B392F0;">        targetObj[keys] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> deepClone(source[keys])</span></span>
<span class="line"><span style="color:#B392F0;">      } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 如果不是，就直接赋值</span></span>
<span class="line"><span style="color:#B392F0;">        targetObj[keys] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> source[keys]</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> targetObj</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  num</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  testObj</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">shallowobj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> obj</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">deepobj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> deepClone(obj)</span></span>
<span class="line"><span style="color:#6B737C;">// 浅拷贝</span></span>
<span class="line"><span style="color:#79B8FF;">shallowobj</span><span style="color:#B392F0;">.num </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span></span>
<span class="line"><span style="color:#79B8FF;">shallowobj</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">testObj</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#6B737C;">// 深拷贝</span></span>
<span class="line"><span style="color:#79B8FF;">deepobj</span><span style="color:#B392F0;">.num </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span></span>
<span class="line"><span style="color:#79B8FF;">deepobj</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">testObj</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;last&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(obj) </span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(shallowobj) </span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(deepobj) </span></span>
<span class="line"><span style="color:#6B737C;">// 打印结果：</span></span>
<span class="line"><span style="color:#6B737C;">//  {   </span></span>
<span class="line"><span style="color:#6B737C;">//    num:1,            num:1,              num:2</span></span>
<span class="line"><span style="color:#6B737C;">//    testObj: {        {                   {</span></span>
<span class="line"><span style="color:#6B737C;">//      name: &quot;test&quot;,     name: &quot;test&quot;,       name: &quot;last&quot;,</span></span>
<span class="line"><span style="color:#6B737C;">//    }                 }                   }</span></span>
<span class="line"><span style="color:#6B737C;">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="深浅拷贝区别" tabindex="-1">深浅拷贝区别 <a class="header-anchor" href="#深浅拷贝区别" aria-hidden="true">#</a></h2><p>深浅拷贝都拷贝了<code>引用类型</code>中<code>基本类型</code>，深浅拷贝后，修改<code>引用类型</code>中的<code>基本类型</code>，都不影响<code>原引用类型</code>中的<code>基本类型</code></p><p><strong>区别在于：</strong></p><p><strong>是否拷贝了<code>引用类型</code>中的<code>引用类型</code></strong></p><p>也就是修改拷贝后的<code>引用类型</code>中的<code>引用类型</code>的值，是否会影响<code>原引用类型</code>中的<code>引用类型</code>的值</p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-hidden="true">#</a></h2><p>加深印象，试着回答下问题吧</p><h3 id="提问1-什么是深浅拷贝" tabindex="-1">提问1，什么是深浅拷贝？ <a class="header-anchor" href="#提问1-什么是深浅拷贝" aria-hidden="true">#</a></h3><p>都用于拷贝<code>引用类型</code></p><p>浅拷贝是<code>拷贝了一层</code>, 拷贝了<code>引用类型</code>的 <code>基本类型</code>，而<code>引用类型</code>中的<code>引用类型</code>仍是<code>相同引用</code></p><p>深拷贝则是完全拷贝，即拷贝了<code>引用类型</code>的 <code>基本类型</code>，也拷贝<code>引用类型</code>中的<code>引用类型</code>（即开辟<code>新堆新栈新指针</code>）</p><h3 id="提问2-为什么需要深浅拷贝" tabindex="-1">提问2,为什么需要深浅拷贝？ <a class="header-anchor" href="#提问2-为什么需要深浅拷贝" aria-hidden="true">#</a></h3><p>因为<code>JavaScript</code>中引用类型的数据类型，数据保存在<code>堆内存</code>中，其变量是一个<code>指向堆内存中实际对象的引用</code>(指针)，存在<code>栈</code>中</p><p>所以引用类型的赋值操作，实际上是<code>赋址</code>，是把一个变量的地址赋给另一个变量，两个变量具有相同的引用，指向堆内存中同一个对象，修改其中一个变量的值，相互之间有影响</p><p>而很多时候，我们想要的结果是两个初始值相同的变量互不影响，需要处理<code>引用类型</code>的变量</p><p>所以就要使用到拷贝（分为深浅两种）来处理<code>引用类型</code></p><h3 id="提问3-解构赋值属于深浅拷贝嘛" tabindex="-1">提问3.解构赋值属于深浅拷贝嘛？ <a class="header-anchor" href="#提问3-解构赋值属于深浅拷贝嘛" aria-hidden="true">#</a></h3><p>不属于，属于赋值概念，既不属于浅拷贝，也不属于深拷贝</p><h3 id="提问4-常见的浅拷贝对象有哪些方法" tabindex="-1">提问4.常见的浅拷贝对象有哪些方法？ <a class="header-anchor" href="#提问4-常见的浅拷贝对象有哪些方法" aria-hidden="true">#</a></h3><ul><li>遍历对象属性与值来新建对象</li><li>Object.assign</li><li>拓展运算符</li></ul><h3 id="提问4-常见的浅拷贝数组有哪些方法" tabindex="-1">提问4.常见的浅拷贝数组有哪些方法？ <a class="header-anchor" href="#提问4-常见的浅拷贝数组有哪些方法" aria-hidden="true">#</a></h3><ul><li>slice</li><li>concat</li><li>拓展运算符</li></ul><h3 id="提问5-手写一个循环递归深拷贝" tabindex="-1">提问5.手写一个循环递归深拷贝 <a class="header-anchor" href="#提问5-手写一个循环递归深拷贝" aria-hidden="true">#</a></h3><p>是否能手写出来，不行的话再去上方背一背吧</p><h2 id="object-assign是浅拷贝" tabindex="-1">Object.assign是浅拷贝 <a class="header-anchor" href="#object-assign是浅拷贝" aria-hidden="true">#</a></h2>`,83),e=[o];function c(t,r,B,y,F,i){return a(),n("div",null,e)}const b=s(p,[["render",c]]);export{d as __pageData,b as default};
