import{_ as s,c as a,o as n,a as l}from"./app.a9997904.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"koa与express区别","slug":"koa与express区别","link":"#koa与express区别","children":[]},{"level":2,"title":"koa-multer","slug":"koa-multer","link":"#koa-multer","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"koa-helmet","slug":"koa-helmet","link":"#koa-helmet","children":[]},{"level":2,"title":"koa+ts","slug":"koa-ts","link":"#koa-ts","children":[{"level":3,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}]},{"level":2,"title":"koa2 使用 koa-body 代替 koa-bodyparser 和 koa-multer","slug":"koa2-使用-koa-body-代替-koa-bodyparser-和-koa-multer","link":"#koa2-使用-koa-body-代替-koa-bodyparser-和-koa-multer","children":[]}],"relativePath":"3.前端框架/8.koa/中间件.md","lastUpdated":1676276426000}'),e={name:"3.前端框架/8.koa/中间件.md"},o=l(`<h2 id="koa与express区别" tabindex="-1">koa与express区别 <a class="header-anchor" href="#koa与express区别" aria-hidden="true">#</a></h2><blockquote><p>这两个框架均出自 TJ 大神之手</p></blockquote><ul><li>Express 是对 Node 的增强，内置很多强大中间件</li><li>koa 对 Node 的修复和代替，只是对 http 模块的抽象</li><li>koa 支持 async/await ，在异步模式下处理事件也符合洋葱模型。</li><li>Koa 拥有更加简洁的 API，抛弃 request/response ，而使用 ctx</li><li>Koa 使用 Promise 来处理回调，能通过 try catch 捕获到程序错误；而 Express 通过 callback 回调的方式，可能无法捕获程序的运行抛出的错误</li></ul><p>综上，如果你想要更加简洁的 API、符合直觉的异步处理方式，我更推荐 Koa。如果，你不介意 express 对异步的处理，那它也是很不错的选择</p><h2 id="koa-multer" tabindex="-1"><strong>koa-multer</strong> <a class="header-anchor" href="#koa-multer" aria-hidden="true">#</a></h2><p>koa-multer 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据，它主要 用于上传文件。 注意: Multer 不会处理任何非 multipart/form-data 类型的表单数据，意思就是我们要上传图 片必须在 form 表单上面加 multipart/form-data</p><p>目前已不再维护，由官方@koa/multer进行维护</p><blockquote><ul><li>multer <a href="https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md" target="_blank" rel="noreferrer">https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md</a></li><li>koa-multer <a href="https://www.npmjs.com/package/koa-multer" target="_blank" rel="noreferrer">https://www.npmjs.com/package/koa-multer</a></li><li>@koa/multer <a href="https://www.npmjs.com/package/@koa/multer" target="_blank" rel="noreferrer">https://www.npmjs.com/package/@koa/multer</a></li></ul></blockquote><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Koa</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;koa&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Koa</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解决跨域</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cors</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@koa/cors&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cors</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;koa-router&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Router</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//引用multer实现文件上传与下载</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">multer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;koa-multer&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义文件上传的保存路径和文件名</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">storage</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">multer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">diskStorage</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 保存路径</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">destination</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">cb</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;./upload/&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 文件夹路径。如果不存在的话会自动创建一个路径</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//修改文件名</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">filename</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 使用时间戳+后缀名的方式命名</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// const fileFormat = file.originalname.split(&quot;.&quot;)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// cb(null, Date.now() + &quot;-&quot; + fileFormat[fileFormat.length - 1])</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 使用时间戳+文件名的方式命名</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">cb</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;-&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">originalname</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">upload</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multer</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">storage</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">storage</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/upload&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">upload</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">single</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">routes</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allowedMethods</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;服务器已开启在3000端口&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Koa</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;koa&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">app</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Koa()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 解决跨域</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cors</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;@koa/cors&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#79B8FF;">app</span><span style="color:#B392F0;">.use(cors())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Router</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;koa-router&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">router</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Router()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">//引用multer实现文件上传与下载</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">multer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;koa-multer&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#6B737C;">// 定义文件上传的保存路径和文件名</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">storage</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">multer</span><span style="color:#B392F0;">.diskStorage({</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 保存路径</span></span>
<span class="line"><span style="color:#B392F0;">  destination</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (req</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> file</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cb) {</span></span>
<span class="line"><span style="color:#B392F0;">    cb(</span><span style="color:#79B8FF;">null</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./upload/&quot;</span><span style="color:#B392F0;">) </span><span style="color:#6B737C;">// 文件夹路径。如果不存在的话会自动创建一个路径</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//修改文件名</span></span>
<span class="line"><span style="color:#B392F0;">  filename</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (req</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> file</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> cb) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 使用时间戳+后缀名的方式命名</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// const fileFormat = file.originalname.split(&quot;.&quot;)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// cb(null, Date.now() + &quot;-&quot; + fileFormat[fileFormat.length - 1])</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 使用时间戳+文件名的方式命名</span></span>
<span class="line"><span style="color:#B392F0;">    cb(</span><span style="color:#79B8FF;">null</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Date</span><span style="color:#B392F0;">.now() </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;-&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">file</span><span style="color:#B392F0;">.originalname)</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">upload</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> multer({ storage</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> storage })</span></span>
<span class="line"><span style="color:#79B8FF;">router</span><span style="color:#B392F0;">.post(</span><span style="color:#FFAB70;">&quot;/upload&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">upload</span><span style="color:#B392F0;">.single(</span><span style="color:#FFAB70;">&quot;file&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">async</span><span style="color:#B392F0;"> (ctx</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">ctx</span><span style="color:#B392F0;">.body </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    filename</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ctx</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">req</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">file</span><span style="color:#B392F0;">.filename</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"><span style="color:#79B8FF;">app</span><span style="color:#B392F0;">.use(</span><span style="color:#79B8FF;">router</span><span style="color:#B392F0;">.routes()).use(</span><span style="color:#79B8FF;">router</span><span style="color:#B392F0;">.allowedMethods())</span></span>
<span class="line"><span style="color:#79B8FF;">app</span><span style="color:#B392F0;">.listen(</span><span style="color:#F8F8F8;">3000</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;服务器已开启在3000端口&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="koa-helmet" tabindex="-1">koa-helmet <a class="header-anchor" href="#koa-helmet" aria-hidden="true">#</a></h2><p><code>koa-helmet</code> 主要是通过 npm 包 <code>helemt</code> 来实现开发者的应用程序更加安全。</p><p><code>helemt</code> 主要是与另一个著名的 node.js Web 应该框架 <code>Express</code> 搭配使用。</p><p>现在是通过一个函数 <code>koaHelmetPromisify</code> 来使用，具体的写法对我来说有点小惊讶，有兴趣的小伙伴可以去看看。</p><p><code>helment</code> 通过设置 Http 头来使应用程序更加安全:</p><p><code>Content-Security-Policy</code> : 内容安全策略 (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。(<a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2016%2F09%2Fcsp.html" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FCSP" target="_blank" rel="noreferrer">参考2</a>)</p><p><code>X-DNS-Prefetch-Control</code> : 控制着浏览器的 DNS 预读取功能。 DNS 预读取是一项使浏览器主动去执行域名解析的功能，其范围包括文档的所有链接，无论是图片的，CSS 的，还是 JavaScript 等其他用户能够点击的 URL。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudxns.net%2FSupport%2Fdetail%2Fid%2F1273.html" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FControlling_DNS_prefetching" target="_blank" rel="noreferrer">参考2</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fc3a14a853c79" target="_blank" rel="noreferrer">参考3</a>)</p><p><code>Expect-CT</code> : 允许站点选择性报告和/或执行证书透明度 (Certificate Transparency) 要求，来防止错误签发的网站证书的使用不被察觉。当站点启用 Expect-CT 头，就是在请求浏览器检查该网站的任何证书是否出现在公共证书透明度日志之中。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FExpect-CT" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fhttpwg.org%2Fhttp-extensions%2Fexpect-ct.html" target="_blank" rel="noreferrer">参考2</a>)</p><p><code>Feature-Policy</code> : 标头提供了一种机制，允许和拒绝在其自己的框架中以及嵌入的iframe中使用浏览器功能。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FFeature-Policy" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Fupdates%2F2018%2F06%2Ffeature-policy" target="_blank" rel="noreferrer">参考2</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fwicg.github.io%2Ffeature-policy%2F%23default-allowlists" target="_blank" rel="noreferrer">参考3</a>)</p><p><code>X-Frame-Options</code> : 用来给浏览器指示允许一个页面可否在frame, &lt; iframe &gt; 或者 &lt; object &gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FX-Frame-Options" target="_blank" rel="noreferrer">参考</a>)</p><p><code>X-Powered-By</code> : 表明用于支持当前网页应用程序的技术 (例如：PHP)。(<a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.qttc.net%2F201306340.html" target="_blank" rel="noreferrer">参考</a>)</p><p><code>Public-Key-Pins</code> : 是一种安全功能，它告诉 Web 客户端将特定加密公钥与某个 Web 服务器相关联，以降低使用伪造证书进行 MITM 攻击的风险。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FHTTP%2FPublic_Key_Pinning" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fimququ.com%2Fpost%2Fhttp-public-key-pinning.html" target="_blank" rel="noreferrer">参考2</a>)</p><p><code>Strict-Transport-Security</code> : 是一个安全功能，它告诉浏览器只能通过 HTTPS 访问当前资源，而不是 HTTP。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FSecurity%2FHTTP_Strict_Transport_Security" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fblog.wilddog.com%2F%3Fpage_id%3D1493" target="_blank" rel="noreferrer">参考2</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cnblogs.com%2Fxiewenming%2Fp%2F7298893.html" target="_blank" rel="noreferrer">参考3</a>)</p><p><code>X-Download-Options</code> : 设置 noopen 为阻止 IE8 以上的用户在您的站点上下文中执行下载，指示浏览器不要直接在浏览器中打开下载，而是仅提供“保存”选项。(<a href="https://link.juejin.cn?target=https%3A%2F%2Frorsecurity.info%2Fportfolio%2Fnew-http-headers-for-more-security" target="_blank" rel="noreferrer">参考</a>)</p><p><code>Cache-Control</code> : 通用消息头字段被用于在http 请求和响应中通过指定指令来实现缓存机制。缓存指令是单向的, 这意味着在请求设置的指令，在响应中不一定包含相同的指令。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FCache-Control" target="_blank" rel="noreferrer">参考</a>)</p><p><code>Pragma</code> : 是一个在 HTTP/1.0 中规定的通用首部，这个首部的效果依赖于不同的实现，所以在“请求-响应”链中可能会有不同的效果。它用来向后兼容只支持 HTTP/1.0 协议的缓存服务器，与 Cache-Control: no-cache 效果一致。强制要求缓存服务器在返回缓存的版本之前将请求提交到源头服务器进行验证。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FPragma" target="_blank" rel="noreferrer">参考</a>)</p><p><code>Expires</code> : 响应头包含日期/时间， 即在此时候之后，响应过期。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FExpires" target="_blank" rel="noreferrer">参考</a>)</p><p><code>Surrogate-Control</code> : 通过检查来自源服务器的响应中的缓存头来确定要缓存的内容。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.w3.org%2FTR%2Fedge-arch%2F" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.nuevocloud.com%2Fdocumentation%2Fgetting-started%2Fcache-headers-cache-control-surrogate-control-and-expires" target="_blank" rel="noreferrer">参考2</a>)</p><p><code>X-Content-Type-Options</code> : 被服务器用来提示客户端一定要遵循在 Content-Type 首部中对 MIME 类型 的设定，而不能对其进行修改。这就禁用了客户端的 MIME 类型嗅探行。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FX-Content-Type-Options" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fprevious-versions%2Fwindows%2Finternet-explorer%2Fie-developer%2Fcompatibility%2Fgg622941(v%3Dvs.85)" target="_blank" rel="noreferrer">参考2</a></p><p><code>X-Permitted-Cross-Domain-Policies</code> : 为Web客户端提供了跨域处理数据的权限 (如Adobe Flash或Adobe Acrobat)。(<a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.valencynetworks.com%2Fblogs%2Fx-permitted-cross-domain-policies%2F" target="_blank" rel="noreferrer">参考</a>)</p><p><code>Referrer-Policy</code> : 首部用来监管哪些访问来源信息，会在 Referer 中发送，应该被包含在生成的请求当中。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FReferrer-Policy" target="_blank" rel="noreferrer">参考1</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Flinux.cn%2Farticle-5808-1.html" target="_blank" rel="noreferrer">参考2</a>)</p><p><code>X-XSS-Protection</code> : 当检测到跨站脚本攻击 (XSS) 时，浏览器将停止加载页面。(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FX-XSS-Protection" target="_blank" rel="noreferrer">参考1</a>,<a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.freebuf.com%2Farticles%2Fweb%2F138769.html" target="_blank" rel="noreferrer">参考2</a>)</p><p>从这么多的 Http 头中看出，使用 <code>helemt</code> 对应用程序的安全性有了极大的保障。但也有一些不是必须的，就可以使用如 <code>helmet.contentSecurityPolicy</code> 单独来设置 Http 头</p><h2 id="koa-ts" tabindex="-1">koa+ts <a class="header-anchor" href="#koa-ts" aria-hidden="true">#</a></h2><h3 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-hidden="true">#</a></h3><ul><li><a href="https://blog.csdn.net/WJLcomeon/article/details/122811661" target="_blank" rel="noreferrer">https://blog.csdn.net/WJLcomeon/article/details/122811661</a></li></ul><h2 id="koa2-使用-koa-body-代替-koa-bodyparser-和-koa-multer" tabindex="-1">koa2 使用 koa-body 代替 koa-bodyparser 和 koa-multer <a class="header-anchor" href="#koa2-使用-koa-body-代替-koa-bodyparser-和-koa-multer" aria-hidden="true">#</a></h2><p>之前使用 koa2 的时候，处理 post 请求使用的是 <code>koa-bodyparser</code>，同时如果是图片上传使用的是 <code>koa-multer</code></p><p>这两者的组合没什么问题，不过 <code>koa-multer</code> 和 <code>koa-route</code>（注意不是 <code>koa-router</code>） 存在不兼容的问题</p>`,39),p=[o];function t(r,c,B,F,i,y){return n(),a("div",null,p)}const h=s(e,[["render",t]]);export{d as __pageData,h as default};
