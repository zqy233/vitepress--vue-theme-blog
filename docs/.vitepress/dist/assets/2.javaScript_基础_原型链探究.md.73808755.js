import{_ as s,c as n,o,a}from"./app.a9997904.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"person1.__proto__ === Person.prototype","slug":"person1-proto-person-prototype","link":"#person1-proto-person-prototype","children":[]},{"level":3,"title":"Person.__proto__ === Function.prototype","slug":"person-proto-function-prototype","link":"#person-proto-function-prototype","children":[]},{"level":2,"title":"对象的构造函数都是Object","slug":"对象的构造函数都是object","link":"#对象的构造函数都是object","children":[{"level":3,"title":"Person.prototype.__proto__ === Object.prototype","slug":"person-prototype-proto-object-prototype","link":"#person-prototype-proto-object-prototype","children":[]}]},{"level":2,"title":"Object是一切原型对象的构造函数（除了Function.proto）","slug":"object是一切原型对象的构造函数-除了function-proto","link":"#object是一切原型对象的构造函数-除了function-proto","children":[]}],"relativePath":"2.javaScript/基础/原型链探究.md","lastUpdated":1676276426000}'),p={name:"2.javaScript/基础/原型链探究.md"},l=a(`<h3 id="person1-proto-person-prototype" tabindex="-1"><code>person1.__proto__ === Person.prototype</code> <a class="header-anchor" href="#person1-proto-person-prototype" aria-hidden="true">#</a></h3><p>每个对象的<code>__proto__</code>属性指向它的原型对象，该对象构造函数的<code>prototype</code>属性也指向它的原型对象</p><p>两者指向的都是该对象的原型对象</p><p>所以也可以说，每个对象的<code>__proto__</code>指向它构造函数的<code>prototype</code></p><h3 id="person-proto-function-prototype" tabindex="-1"><code>Person.__proto__ === Function.prototype</code> <a class="header-anchor" href="#person-proto-function-prototype" aria-hidden="true">#</a></h3><p>函数也是对象，所以构造函数也是对象，所以构造函数也有<code>__proto__</code></p><p>函数的构造函数是<code> Function</code></p><p>它的<code>__proto__</code>属性指向的是<code>Function.prototype</code></p><p>Function和Object原型对象相同</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 控制台输出ƒ () { [native code] }</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 控制台输出ƒ () { [native code] }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// 控制台输出ƒ () { [native code] }</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// 控制台输出ƒ () { [native code] }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>是V8内部C++代码返回的结果，而不是真实的JS代码结果</p><p>第 1710 行附近的 FunctionSourceString 函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;function () { [native code] }&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;function () { [native code] }&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="对象的构造函数都是object" tabindex="-1">对象的构造函数都是Object <a class="header-anchor" href="#对象的构造函数都是object" aria-hidden="true">#</a></h2><p>原型对象本身是一个普通对象，而普通对象的构造函数都是<code>Object</code></p><h3 id="person-prototype-proto-object-prototype" tabindex="-1"><code>Person.prototype.__proto__ === Object.prototype</code> <a class="header-anchor" href="#person-prototype-proto-object-prototype" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 因为函数也是对象，即构造函数也是对象，所以构造函数也有__proto__属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数（构造函数）的构造函数是Function</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 它的__proto__属性指向的是Function.prototype</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 那么这就导致了，与Object是实例对象的构造函数，这条规律冲突了</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Function是它自己的构造函数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Object是一切实例对象的构造函数（除了Function.__proto__）</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Function和Object的原型对象相等</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Object不是它自己的构造函数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Function是Object的构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 所有的构造函数都是函数对象，函数对象都是Function构造产生的</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 说明Object是Function.__proto__的构造函数,说明Object是一切实例对象的构造函数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 说明Object是Function实例对象的实例对象的构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 说明Object是一切实例对象的构造函数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Object的原型对象也有__proto__属性指向null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 说明null是原型链的顶端,也说明只要是原型对象就有__proto__属性</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Function的原型对象也有__proto__属性指向null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 说明null是原型链的顶端,也说明只要是原型对象就有__proto__属性</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// 因为函数也是对象，即构造函数也是对象，所以构造函数也有__proto__属性</span></span>
<span class="line"><span style="color:#6B737C;">// 函数（构造函数）的构造函数是Function</span></span>
<span class="line"><span style="color:#6B737C;">// 它的__proto__属性指向的是Function.prototype</span></span>
<span class="line"><span style="color:#6B737C;">// 那么这就导致了，与Object是实例对象的构造函数，这条规律冲突了</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Function是它自己的构造函数</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Object是一切实例对象的构造函数（除了Function.__proto__）</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Function和Object的原型对象相等</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Object不是它自己的构造函数</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Function是Object的构造函数</span></span>
<span class="line"><span style="color:#6B737C;">// 所有的构造函数都是函数对象，函数对象都是Function构造产生的</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 说明Object是Function.__proto__的构造函数,说明Object是一切实例对象的构造函数</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 说明Object是Function实例对象的实例对象的构造函数</span></span>
<span class="line"><span style="color:#6B737C;">// 说明Object是一切实例对象的构造函数</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Object的原型对象也有__proto__属性指向null</span></span>
<span class="line"><span style="color:#6B737C;">// 说明null是原型链的顶端,也说明只要是原型对象就有__proto__属性</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// Function的原型对象也有__proto__属性指向null</span></span>
<span class="line"><span style="color:#6B737C;">// 说明null是原型链的顶端,也说明只要是原型对象就有__proto__属性</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="object是一切原型对象的构造函数-除了function-proto" tabindex="-1">Object是一切原型对象的构造函数（除了Function.<strong>proto</strong>） <a class="header-anchor" href="#object是一切原型对象的构造函数-除了function-proto" aria-hidden="true">#</a></h2><p>实例对象</p><p>下面作出总结：</p><ul><li>一切对象都是继承自<code>Object</code>对象，<code>Object</code> 对象直接继承根源对象<code>null</code></li><li>一切的函数对象（包括 <code>Object</code> 对象），都是继承自 <code>Function</code> 对象</li><li><code>Object</code> 对象直接继承自 <code>Function</code> 对象</li><li><code>Function</code>对象的<code>__proto__</code>会指向自己的原型对象，最终还是继承自<code>Object</code>对象</li></ul>`,22),e=[l];function t(c,r,B,y,F,i){return o(),n("div",null,e)}const b=s(p,[["render",t]]);export{u as __pageData,b as default};
