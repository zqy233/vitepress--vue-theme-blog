import{_ as s,c as n,o as a,a as e}from"./app.a9997904.js";const u=JSON.parse('{"title":"http","description":"","frontmatter":{},"headers":[{"level":2,"title":"Content-Type（内容类型）","slug":"content-type-内容类型","link":"#content-type-内容类型","children":[{"level":3,"title":"常见的媒体格式类型：","slug":"常见的媒体格式类型","link":"#常见的媒体格式类型","children":[]},{"level":3,"title":"application开头的格式类型：","slug":"application开头的格式类型","link":"#application开头的格式类型","children":[]}]},{"level":2,"title":"Request Payload与Form Data","slug":"request-payload与form-data","link":"#request-payload与form-data","children":[{"level":3,"title":"两者的区别","slug":"两者的区别","link":"#两者的区别","children":[]},{"level":3,"title":"GET请求","slug":"get请求","link":"#get请求","children":[]},{"level":3,"title":"POST请求","slug":"post请求","link":"#post请求","children":[]}]},{"level":2,"title":"cookie与token","slug":"cookie与token","link":"#cookie与token","children":[{"level":3,"title":"cookie","slug":"cookie","link":"#cookie","children":[]},{"level":3,"title":"cookie的特点","slug":"cookie的特点","link":"#cookie的特点","children":[]},{"level":3,"title":"cookie的缺点","slug":"cookie的缺点","link":"#cookie的缺点","children":[]},{"level":3,"title":"session","slug":"session","link":"#session","children":[]},{"level":3,"title":"token","slug":"token","link":"#token","children":[]},{"level":3,"title":"uuid","slug":"uuid","link":"#uuid","children":[]},{"level":3,"title":"jwt","slug":"jwt","link":"#jwt","children":[]},{"level":3,"title":"token和session区别","slug":"token和session区别","link":"#token和session区别","children":[]}]},{"level":2,"title":"js获取页面ip与端口","slug":"js获取页面ip与端口","link":"#js获取页面ip与端口","children":[]},{"level":2,"title":"WebRTC和WebSocket有什么关系和区别？","slug":"webrtc和websocket有什么关系和区别","link":"#webrtc和websocket有什么关系和区别","children":[]},{"level":2,"title":"withCredentials有什么作用","slug":"withcredentials有什么作用","link":"#withcredentials有什么作用","children":[]}],"relativePath":"1.前端基础/6.http/2.http.md","lastUpdated":1676276426000}'),o={name:"1.前端基础/6.http/2.http.md"},l=e(`<h1 id="http" tabindex="-1">http <a class="header-anchor" href="#http" aria-hidden="true">#</a></h1><h2 id="content-type-内容类型" tabindex="-1">Content-Type（内容类型） <a class="header-anchor" href="#content-type-内容类型" aria-hidden="true">#</a></h2><p>用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件</p><p>Content-Type 标头告诉客户端实际返回的内容的内容类型，示例：</p><p>Content-Type: text/html; charset=utf-8 Content-Type:application/json</p><h3 id="常见的媒体格式类型" tabindex="-1">常见的媒体格式类型： <a class="header-anchor" href="#常见的媒体格式类型" aria-hidden="true">#</a></h3><ul><li>text/html ： HTML格式</li><li>text/plain ：纯文本格式</li><li>text/xml ： XML格式</li><li>image/gif ：gif图片格式</li><li>image/jpeg ：jpg图片格式</li><li>image/png：png图片格式</li></ul><h3 id="application开头的格式类型" tabindex="-1">application开头的格式类型： <a class="header-anchor" href="#application开头的格式类型" aria-hidden="true">#</a></h3><ul><li>application/xhtml+xml ：XHTML格式</li><li>application/xml： XML数据格式</li><li>application/atom+xml ：Atom XML聚合格式</li><li>application/json： JSON数据格式</li><li>application/pdf：pdf格式</li><li>application/msword ： Word文档格式</li><li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li><li>application/x-www-form-urlencoded ：form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</li></ul><p>另外一种常见的媒体格式是上传文件之时使用的：</p><ul><li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li></ul><h2 id="request-payload与form-data" tabindex="-1">Request Payload与Form Data <a class="header-anchor" href="#request-payload与form-data" aria-hidden="true">#</a></h2><p>前端开发中经常会用到AJAX发送请求，随着传参方式的不同，控制台时常会见到两种参数显示方式：<code> Request Payload</code>和 <code>Form Data</code></p><h3 id="两者的区别" tabindex="-1">两者的区别 <a class="header-anchor" href="#两者的区别" aria-hidden="true">#</a></h3><p><code>Request Payload</code>，更准确的说是<code>http request</code>的<code>payload body</code>。一般用在数据通过<code>POST</code>请求或者<code>PUT</code>请求。它应该对应<code>请求体</code>。（http请求一般由请求行，请求头，空行，请求体组成，<code>payload body</code>应该对应请求体）</p><p>区别就是，只是因为<code>Content-Type</code>设置的不同，并不是数据提交方式的不同，这两种提交都会将数据放在<code>请求体</code>中。但是chrome浏览器的开发者工具会根据<code>ContentType</code>区分显示方式，即：</p><p><code>Content-Type:application/json</code>显示在<code>Request Payload</code>中</p><p><code>Content-Type:application/x-www-form-urlencoded</code>和<code>Content-Type:multipart/form-data</code>显示在<code>Form Data</code>中</p><h3 id="get请求" tabindex="-1">GET请求 <a class="header-anchor" href="#get请求" aria-hidden="true">#</a></h3><p>使用get请求时，参数会以key=value的形式拼接在请求的url后面。例如：</p><p><a href="http://m.baidu.com/address/getlist.html?limit=50&amp;offset=0&amp;t=1502345139870" target="_blank" rel="noreferrer">http://m.baidu.com/address/getlist.html?limit=50&amp;offset=0&amp;t=1502345139870</a></p><p>但是受限于请求URL的长度限制，一般参数较少时会使用get请求。</p><h3 id="post请求" tabindex="-1">POST请求 <a class="header-anchor" href="#post请求" aria-hidden="true">#</a></h3><p>当参数数量较多，且对数据有一定安全性要求时，会考虑用post请求传递参数数据。POST请求的参数数据是在请求体中</p><h4 id="方式一-form-data形式" tabindex="-1">方式一： Form Data形式 <a class="header-anchor" href="#方式一-form-data形式" aria-hidden="true">#</a></h4><p>当POST请求的请求头里设置<code>Content-Type: application/x-www-form-urlencoded</code>或<code> multipart/form-data</code>, 请求的参数会显示在<code>Form Data</code>中，以&amp;符号拼接，参数格式为key=value&amp;key=value&amp;key=value...</p><h4 id="方式二-request-payload形式" tabindex="-1">方式二：Request Payload形式 <a class="header-anchor" href="#方式二-request-payload形式" aria-hidden="true">#</a></h4><p>当POST请求的请求头里设置<code>Content-Type:application/json</code>，请求的参数会显示在<code>Request Payload</code>中，参数格式为JSON格式：{&quot;key&quot;:&quot;value&quot;,&quot;key&quot;:&quot;value&quot;...}，这种方式可读性会更好。</p><h2 id="cookie与token" tabindex="-1">cookie与token <a class="header-anchor" href="#cookie与token" aria-hidden="true">#</a></h2><blockquote><p>以下每行专业名词很多情况下是同义词</p><p><code>浏览器端</code>、<code>前端</code>、<code>客户端</code></p><p><code>服务器端</code>、<code>后端</code></p></blockquote><p><strong>HTTP协议是无状态的协议</strong>，客户端多次请求服务器，服务器它无法感知是不是同一用户的请求，这就不能实现常见的用户自动登录功能(用户选择&quot;记住我后&quot;，下次不用输入账户密码即可登录)</p><p>所以产生了以下两种技术：</p><ul><li>通过cookie在浏览器端记录状态，通过session在服务端记录状态</li><li>通过token方式维持状态</li></ul><h3 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-hidden="true">#</a></h3><p>Cookie（复数形态Cookies），中文名称为“小型文本文件”或“小甜饼”。指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</p><h3 id="cookie的特点" tabindex="-1">cookie的特点 <a class="header-anchor" href="#cookie的特点" aria-hidden="true">#</a></h3><ol><li>服务器通过设置<strong>Set-Cookie 响应头</strong>来设置 cookie</li><li>浏览器得到 cookie 后，每次<strong>同源的请求的请求头</strong>都会带上 cookie</li><li>服务器读取 cookie 就知道了登录用户的信息（如账户名等）</li><li>cookie 实际上存储在<strong>本地计算机的硬盘里</strong></li><li>cookie 的最大储存量一般只有<strong>4K</strong></li><li>cookie存储数据的格式：字符串key=value</li><li>cookie有效范围：当前域名下有效。所以<strong>session这种会话存储方式方式只适用于客户端代码和服务端代码运行在同一台服务器上</strong>（前后端项目协议、域名、端口号都一致，即在一个项目下）</li></ol><h3 id="cookie的缺点" tabindex="-1">cookie的缺点 <a class="header-anchor" href="#cookie的缺点" aria-hidden="true">#</a></h3><ol><li>Cookie<strong>很容易被用户篡改</strong>（ Session 可以解决这个问题，防止用户篡改）</li><li>Cookie 的默认有效期理论上在<strong>用户关闭页面后就失效</strong>，实际上在在20分钟左右，不同浏览器策略不同。但是后端可以强制设置有效期（如何设置见下文）。</li><li>Cookie 也有一定的<strong>同源策略</strong>，不过跟 AJAX 的同源策略稍微有些不同。如： <ul><li>当请求 <a href="http://qq.com" target="_blank" rel="noreferrer">qq.com</a> 下的资源时，浏览器会默认带上 <a href="http://qq.com" target="_blank" rel="noreferrer">qq.com</a> 对应的 Cookie，不会带上 <a href="http://baidu.com" target="_blank" rel="noreferrer">baidu.com</a> 对应的 Cookie</li><li>当请求 <a href="http://v.qq.com" target="_blank" rel="noreferrer">v.qq.com</a> 下的资源时，浏览器不仅会带上 <a href="http://v.qq.com" target="_blank" rel="noreferrer">v.qq.com</a> 的Cookie，还会带上 <a href="http://qq.com" target="_blank" rel="noreferrer">qq.com</a> 的 Cookie</li><li>另外 Cookie 还可以根据路径做限制，请自行了解，这个功能用得比较少</li></ul></li><li>Cookie不能跨域</li></ol><h3 id="session" tabindex="-1">session <a class="header-anchor" href="#session" aria-hidden="true">#</a></h3><p>Session是对于服务端来说的，客户端是没有Session一说的</p><p>Session中文意思为“回话”，代表服务器与浏览器的一次会话过程，这个过程是连续的，也可以时断时续的，它保存了本次客户端与服务端的通信信息</p><p>Session基于cookie，当浏览器第一次请求服务器，服务器会产生一个临时Cookie(Session)存放在服务器里，然后<strong>通过响应头的方式将SessionID返回给浏览器写入到Cookie中</strong>，浏览器下次请求就会将SessiondID以Cookie形式传递给服务器端，服务器端获取SessionID后再去寻找对应的Session。如果找到了则代表用户不是第一次访问，也就记住了用户</p><p>Session只适用于前端(客户端)代码和后端(服务器端)代码运行在同一台服务器上，协议，域名，端口一致的开发情况</p><p>若服务器做了负载均衡，用户的下一次请求可能会被定向到其它服务器节点，若那台节点上没有用户的Session信息，就会导致会话验证失败。所以Session默认机制下是不适合分布式部署的</p><p>服务器重启时，内存会被销毁，存储的用户信息也就消失了，为了解决重启服务器后session就消失的问题，可以在数据库中存储session，比如express服务器可以通过express-mysql-session这个包实现session持久化</p><p>当客户端存储的cookie失效后，服务端的session不会立即销毁，会有一个延时，服务端会定期清理无效session，不会造成无效数据占用存储空间的问题</p><h3 id="token" tabindex="-1">token <a class="header-anchor" href="#token" aria-hidden="true">#</a></h3><p>Token一般称为<strong>令牌，一般是通过MD5、SHA算法将密钥、公钥、时间戳等元素加密产生的加密字符串</strong></p><p>Token的出现是为了解决Session的弊端。如上方所讲，前端项目存在于一台服务器，后端项目运行另外一台服务器，协议，域名，端口号会不一致，这种情况下session不能用来实现记录状态</p><p>Token适用于前后端分离的项目</p><p>前端发起登录请求，后端校验登录的账户信息无误后，生成加密字符token，返回给客户端，客户端再次请求时在请求头添加token</p><p>具体来说就是为请求头的认证字段Authorization字段设置值为token，服务器端就可以通过token信息允许用户快捷登录</p><h3 id="uuid" tabindex="-1">uuid <a class="header-anchor" href="#uuid" aria-hidden="true">#</a></h3><p>生成token的一种方式</p><h3 id="jwt" tabindex="-1">jwt <a class="header-anchor" href="#jwt" aria-hidden="true">#</a></h3><p>生成token的一种方式， 全称是 <code>JSON Web Token</code></p><h3 id="token和session区别" tabindex="-1">token和session区别 <a class="header-anchor" href="#token和session区别" aria-hidden="true">#</a></h3><p>token和session都是<strong>用户身份验证的一种识别手段</strong>，都有过期时间的限制，本质上功能是相同的，但它们之间的还是有一些区别的：</p><ul><li>token是开发者采用算法自行生成的，session是http协议规定的</li><li><strong>Token是放在客户端存储的</strong>，采用了时间换空间策略，它<strong>也是无状态的</strong>，所以在分布式环境中应用广泛，<strong>Session是存放在服务器端的</strong>，可以保存在：内存、数据库、NoSQL中。它采用空间换时间的策略来进行身份识别，若Session没有持久化落地存储，一旦服务器重启，Session数据会丢失</li><li>token可以跨域，session不可以跨域，它是与域名绑定的</li></ul><h2 id="js获取页面ip与端口" tabindex="-1">js获取页面ip与端口 <a class="header-anchor" href="#js获取页面ip与端口" aria-hidden="true">#</a></h2><p>从window.location对象中可以获取相关值，返回值格式如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hash: </span><span style="color:#98C379;">&quot;#/home&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">host: </span><span style="color:#98C379;">&quot;127.0.0.1:8080&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">hostname: </span><span style="color:#98C379;">&quot;127.0.0.1&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">href: </span><span style="color:#98C379;">&quot;http://127.0.0.1:8080/#/home&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">origin: </span><span style="color:#98C379;">&quot;http://127.0.0.1:8080&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">pathname: </span><span style="color:#98C379;">&quot;/&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">port: </span><span style="color:#98C379;">&quot;8080&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">protocol: </span><span style="color:#98C379;">&quot;http:&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">search:</span><span style="color:#98C379;">&quot;&quot;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">hash</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;#/home&quot;</span></span>
<span class="line"><span style="color:#B392F0;">host</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;127.0.0.1:8080&quot;</span></span>
<span class="line"><span style="color:#B392F0;">hostname</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;127.0.0.1&quot;</span></span>
<span class="line"><span style="color:#B392F0;">href</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;http://127.0.0.1:8080/#/home&quot;</span></span>
<span class="line"><span style="color:#B392F0;">origin</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;http://127.0.0.1:8080&quot;</span></span>
<span class="line"><span style="color:#B392F0;">pathname</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;/&quot;</span></span>
<span class="line"><span style="color:#B392F0;">port</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;8080&quot;</span></span>
<span class="line"><span style="color:#B392F0;">protocol</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;http:&quot;</span></span>
<span class="line"><span style="color:#B392F0;">search</span><span style="color:#BBBBBB;">:</span><span style="color:#FFAB70;">&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>从而可以得出获取ip端口的方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">urlObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">location</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">localhostPath</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">urlObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">protocol</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;//&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">urlObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">host</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">urlObj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.location</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">localhostPath</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">urlObj</span><span style="color:#B392F0;">.protocol </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;//&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">urlObj</span><span style="color:#B392F0;">.host</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>示例：打开第三方页面，用于文件下载预览等需求</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">localhostPath</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">/downloadfile=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">fileId</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.open(</span><span style="color:#FFAB70;">\`</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">localhostPath</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">/downloadfile=</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">fileId</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：<a href="http://127.0.0.1:8080/index.html?userName=zhangsan&amp;passWord=123456" target="_blank" rel="noreferrer">http://127.0.0.1:8080/index.html?userName=zhangsan&amp;passWord=123456</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取ip地址和端口号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值：127.0.0.1:8080</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">host</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取ip地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值：127.0.0.1</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hostname</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取URL完整地址（地址栏的整个地址）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值：http://127.0.0.1:8080/index.html?userName=zhangsan&amp;passWord=123456</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取URL的路径部分(文件地址) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值：index.html</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathname</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取端口号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值：8080</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">port</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取URL的协议部分</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值：http:</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">protocol</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取参数部分（?后面的参数）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值：?userName=zhangsan&amp;passWord=123456</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">search</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// 获取ip地址和端口号</span></span>
<span class="line"><span style="color:#6B737C;">// 返回值：127.0.0.1:8080</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.host</span></span>
<span class="line"><span style="color:#6B737C;">// 获取ip地址</span></span>
<span class="line"><span style="color:#6B737C;">// 返回值：127.0.0.1</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.hostname</span></span>
<span class="line"><span style="color:#6B737C;">// 获取URL完整地址（地址栏的整个地址）</span></span>
<span class="line"><span style="color:#6B737C;">// 返回值：http://127.0.0.1:8080/index.html?userName=zhangsan&amp;passWord=123456</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.href</span></span>
<span class="line"><span style="color:#6B737C;">// 获取URL的路径部分(文件地址) </span></span>
<span class="line"><span style="color:#6B737C;">// 返回值：index.html</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.pathname</span></span>
<span class="line"><span style="color:#6B737C;">// 获取端口号</span></span>
<span class="line"><span style="color:#6B737C;">// 返回值：8080</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.port</span></span>
<span class="line"><span style="color:#6B737C;">// 获取URL的协议部分</span></span>
<span class="line"><span style="color:#6B737C;">// 返回值：http:</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.protocol</span></span>
<span class="line"><span style="color:#6B737C;">// 获取参数部分（?后面的参数）</span></span>
<span class="line"><span style="color:#6B737C;">// 返回值：?userName=zhangsan&amp;passWord=123456</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.search</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="webrtc和websocket有什么关系和区别" tabindex="-1">WebRTC和WebSocket有什么关系和区别？ <a class="header-anchor" href="#webrtc和websocket有什么关系和区别" aria-hidden="true">#</a></h2><p>这两种技术本质上就是半毛钱关系都没有，除了它们都可以在 web 中用之外</p><p>websocket 本质上就是借助于 http 建立一个 tcp 的连接，然后在这个 tcp 连接中传 websocket 这种特定协议格式的二进制分帧数据。简单点说，websocket 就是封装了 tcp 来给 web 的 JavaScript 用</p><p>webrtc 则主要是给 rtc 封装了个 web 的 JavaScript 接口。底层 webrtc 的库需要完成全部 rtc 相关的逻辑，包括 p2p 连接，音视频的，采集，处理，编码，解码，传输，拥塞控制等等等一大堆东西。另外，传输层协议，webrtc 主要在用 udp，而不是websocket 的 tcp</p><h2 id="withcredentials有什么作用" tabindex="-1">withCredentials有什么作用 <a class="header-anchor" href="#withcredentials有什么作用" aria-hidden="true">#</a></h2><p>withCredentials是XMLHttpRequest的一个属性，表示跨域请求是否提供凭据信息(cookie、HTTP认证及客户端SSL证明等)</p><p>实际中用途就是跨域请求是要不要携带cookie</p><blockquote><p><a href="https://www.jianshu.com/p/624718082e69" target="_blank" rel="noreferrer">https://www.jianshu.com/p/624718082e69</a></p></blockquote>`,77),p=[l];function t(c,r,i,d,B,y){return a(),n("div",null,p)}const F=s(o,[["render",t]]);export{u as __pageData,F as default};
