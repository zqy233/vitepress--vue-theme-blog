import{_ as o,c as a,o as p,a as n,b as s,d as l}from"./app.a9997904.js";const C=JSON.parse('{"title":"原型与原型链","description":"","frontmatter":{},"headers":[{"level":2,"title":"创建对象的方法","slug":"创建对象的方法","link":"#创建对象的方法","children":[]},{"level":2,"title":"什么是实例？原型对象？","slug":"什么是实例-原型对象","link":"#什么是实例-原型对象","children":[]},{"level":2,"title":"什么是构造函数？","slug":"什么是构造函数","link":"#什么是构造函数","children":[{"level":3,"title":"构造函数的__proto__","slug":"构造函数的-proto","link":"#构造函数的-proto","children":[]}]},{"level":2,"title":"什么是原型对象？","slug":"什么是原型对象","link":"#什么是原型对象","children":[{"level":3,"title":"prototype","slug":"prototype","link":"#prototype","children":[]}]},{"level":2,"title":"什么是原型链？","slug":"什么是原型链","link":"#什么是原型链","children":[{"level":3,"title":"为什么原型链的终点是null,而不是Object.prototype","slug":"为什么原型链的终点是null-而不是object-prototype","link":"#为什么原型链的终点是null-而不是object-prototype","children":[]}]},{"level":2,"title":"__proto__","slug":"proto","link":"#proto","children":[]},{"level":2,"title":"prototype","slug":"prototype-1","link":"#prototype-1","children":[]},{"level":2,"title":"constructor","slug":"constructor","link":"#constructor","children":[{"level":3,"title":"实例和原型","slug":"实例和原型","link":"#实例和原型","children":[]}]},{"level":2,"title":"实例、构造函数、原型对象之间的关系","slug":"实例、构造函数、原型对象之间的关系","link":"#实例、构造函数、原型对象之间的关系","children":[]},{"level":2,"title":"instanceof原理","slug":"instanceof原理","link":"#instanceof原理","children":[]},{"level":2,"title":"new运算符","slug":"new运算符","link":"#new运算符","children":[]},{"level":2,"title":"Function与Object","slug":"function与object","link":"#function与object","children":[]},{"level":2,"title":"根源对象null","slug":"根源对象null","link":"#根源对象null","children":[]},{"level":2,"title":"第二层原型对象","slug":"第二层原型对象","link":"#第二层原型对象","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"Person.__proto__ === Function.prototype","slug":"person-proto-function-prototype","link":"#person-proto-function-prototype","children":[]},{"level":3,"title":"Person.prototype.__proto__ === Object.prototype","slug":"person-prototype-proto-object-prototype","link":"#person-prototype-proto-object-prototype","children":[]}]},{"level":2,"title":"既然 Function instanceof Object === true，为什么Function.__proto__ !== Object.prototype ?","slug":"既然-function-instanceof-object-true-为什么function-proto-object-prototype","link":"#既然-function-instanceof-object-true-为什么function-proto-object-prototype","children":[]},{"level":2,"title":"ƒ ()","slug":"ƒ","link":"#ƒ","children":[{"level":3,"title":"","slug":"","link":"#","children":[]}]}],"relativePath":"2.javaScript/基础/原型与原型链.md","lastUpdated":1676276426000}'),e={name:"2.javaScript/基础/原型与原型链.md"},t=n(`<h1 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-hidden="true">#</a></h1><h2 id="创建对象的方法" tabindex="-1">创建对象的方法 <a class="header-anchor" href="#创建对象的方法" aria-hidden="true">#</a></h2><p>在了解原型链之前，先了解一下创建对象的几种方式，介绍以下三种</p><ul><li>字面量</li><li>构造函数</li><li>Object.create</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 第一种方式：字面量</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;o1&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;o2&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第二种方式：构造函数</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">M</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">M</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;o3&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第三种方式：Object.create</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o4</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">o1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">o2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">o3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">o4</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// 第一种方式：字面量</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> o1 </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> { name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;o1&quot;</span><span style="color:#B392F0;"> };</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> o2 </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Object({ name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;o2&quot;</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#6B737C;">// 第二种方式：构造函数</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> M </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (name) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> name;</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> o3 </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> M(</span><span style="color:#FFAB70;">&quot;o3&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#6B737C;">// 第三种方式：Object.create</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> p </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> { name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;p&quot;</span><span style="color:#B392F0;"> };</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> o4 </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.create(p);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(o1);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(o2);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(o3);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(o4)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="什么是实例-原型对象" tabindex="-1">什么是实例？原型对象？ <a class="header-anchor" href="#什么是实例-原型对象" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">M</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) { </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">; }</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">M</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;o3&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> M </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (name) { </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> name; }</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> o3 </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> M(</span><span style="color:#FFAB70;">&#39;o3&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>实例就是对象，在本例中o3就是实例，M就是构造函数</li><li>实例通过new一个构造函数生成的</li><li>原型对象的construor指向的是构造函数</li></ul><h2 id="什么是构造函数" tabindex="-1">什么是构造函数？ <a class="header-anchor" href="#什么是构造函数" aria-hidden="true">#</a></h2><p>通过 new 函数名 来实例化对象的函数叫构造函数。任何的函数都可以作为构造函数存在。构造函数首字母一般大写</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;"> , </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;"> , </span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Tony&quot;</span><span style="color:#ABB2BF;"> , </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;"> , </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// Tony</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> Person(name </span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> age </span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> sex) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> name;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.age </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> age;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.sex </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> sex;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> person </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Person(</span><span style="color:#FFAB70;">&quot;Tony&quot;</span><span style="color:#B392F0;"> </span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">18</span><span style="color:#B392F0;"> </span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;男&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">person</span><span style="color:#B392F0;">.name);  </span><span style="color:#6B737C;">// Tony</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面这段代码就是创建一个了Person 的构造函数，在Person 构造函数中，为每一个对象都添加了三个属性（name,age,sex），也就是说构造函数每执行一次就会创建一个新的Person对象</p><h3 id="构造函数的-proto" tabindex="-1">构造函数的<code>__proto__</code> <a class="header-anchor" href="#构造函数的-proto" aria-hidden="true">#</a></h3><p>构造函数本身也是一个函数对象，是一个js对象，是通过 <code>Function</code>构造器产生的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="什么是原型对象" tabindex="-1">什么是原型对象？ <a class="header-anchor" href="#什么是原型对象" aria-hidden="true">#</a></h2><p>原型对象本身是一个普通对象，而普通对象的构造函数都是<code>Object</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 构造函数的原型对象</span></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// 构造函数的原型对象</span></span>
<span class="line"><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="prototype" tabindex="-1">prototype <a class="header-anchor" href="#prototype" aria-hidden="true">#</a></h3><p>在JS中，每当定义一个函数时候，都会默认自带一个<code>prototype</code>属性，这个属性指向的是该构造函数创建的原型对象，并且这个属性是一个对象数据类型的值</p><p>原型：每一个JS对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型&quot;继承&quot;属性。</p><p>举个原型的Demo：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">() { }</span></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Tony&#39;</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// 注意:prototype是函数才会有的属性</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// Tony</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// Tony</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> Person() { }</span></span>
<span class="line"><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;Tony&#39;</span><span style="color:#B392F0;">;  </span><span style="color:#6B737C;">// 注意:prototype是函数才会有的属性</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> person1 </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Person();</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> person2 </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Person();</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">person1</span><span style="color:#B392F0;">.name);  </span><span style="color:#6B737C;">// Tony</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">person2</span><span style="color:#B392F0;">.name);  </span><span style="color:#6B737C;">// Tony</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>Person.prototype</code>表示实例原型。原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中</p><h2 id="什么是原型链" tabindex="-1">什么是原型链？ <a class="header-anchor" href="#什么是原型链" aria-hidden="true">#</a></h2><p>简单理解就是原型组成的链，对象的<code>__proto__</code>属性指向它的原型，而原型也是一个对象，也有<code>__proto__</code>属性，原型的<code>__proto__</code>又是原型的原型，就这样可以一直通过<code>__proto__</code>向上找，这就是原型链，当向上找找到Object的原型的时候，这条原型链就算到头了</p><p>原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法</p><h3 id="为什么原型链的终点是null-而不是object-prototype" tabindex="-1">为什么原型链的终点是null,而不是Object.prototype <a class="header-anchor" href="#为什么原型链的终点是null-而不是object-prototype" aria-hidden="true">#</a></h3><p>首先要明确一点，原型链上的所有节点都是对象，所以终点不能是字符串、数字、布尔值等原始类型</p><p>另外，规范要求原型链必须是有限长度的(从任一节点出发，经过有限步骤后必须到达一个终点，显然也不能有环)</p><p>那么，应该用什么对象作为终点呢？很显然应该用一个特殊的对象</p><p><code>Object.prototype</code>确实是个特殊对象，我们先假设用它做终点。那么考虑一下，当你取它的原型时应该怎么办？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>应该返回什么？</p><p>取一个对象的属性时，可能发生三种情况：</p><ol><li>如果属性存在，那么返回属性的值</li><li>如果属性不存在，那么返回undefined</li><li>不管属性存在还是不存在，有可能抛异常</li></ol><p>我们已经假设<code>Object.prototype</code>是终点了，所以看起来不能是情况1。另外，抛出异常也不是好的设计，所以也不是情况3。那么情况2呢，它不存在原型属性，返回undefined怎么样？也不好，因为返回undefined一种解释是原型不存在，但是也相当于原型就是undefined。这样，在原型链上就会存在一个非对象的值</p><p>所以，最佳选择就是null。一方面，你没法访问null的属性，所以起到了终止原型链的作用；另一方面，null在某种意义上也是一种对象，即空对象，因为null一开始就是为表示一个“空”的对象存在的。这样一来，就不会违反“原型链上只能有对象”的约定。</p><p>所以，“原型链的终点是null”虽然不是必须不可的，但是却是最合理的</p><h2 id="proto" tabindex="-1"><code>__proto__</code> <a class="header-anchor" href="#proto" aria-hidden="true">#</a></h2><p>每个JS对象都具有<code>__proto__</code>属性，这个属性指向该对象的原型对象</p><p>该对象的构造函数的<code>prototype</code>属性也指向该对象的原型对象</p><p>所以也可以这么说，每个对象的<code>__proto__</code>指向它构造函数的<code>prototype</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">person1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">person1</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>构造函数是一个函数对象，也是一个js对象，是通过 <code>Function</code>构造器产生的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>__proto__</code> 绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 <code>Person.prototype</code> 中，实际上，它是来自于<code>Object.prototype</code>，与其说是一个属性，不如说是一个<code>getter/setter</code>，当使用<code>obj.__proto__</code> 时，可以理解成返回了<code>Object.getPrototypeOf(obj)</code></p><h2 id="prototype-1" tabindex="-1">prototype <a class="header-anchor" href="#prototype-1" aria-hidden="true">#</a></h2><p>只有函数对象有<code>prototype</code>属性，对象是没有<code>prototype</code>属性的，因为函数对象也是对象，函数也有<code>__proto__</code>属性</p><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h2><p>每个原型对象都有一个<code>constructor</code>属性指向关联的构造函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E06C75;">Person</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#B392F0;">Person </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当获取<code>person.constructor</code>时，其实<code>person</code>中并没有<code>constructor</code>属性，当不能读取到<code>constructor</code>属性时，会从 <code>person</code>的原型也就是<code>Person.prototype</code>中读取，正好原型中有该属性，所以：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>原型链：在JS中，万物皆对象，对象和对象之间也是有关系的，并不是孤立存在的。对象之间的继承关系，在JS 中是通过prototype对象指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条，专业术语称之为原型链</p><h3 id="实例和原型" tabindex="-1">实例和原型 <a class="header-anchor" href="#实例和原型" aria-hidden="true">#</a></h3><p>当我们读取实例的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。如果没有则去原型的原型中寻找，一直找到最顶层Object为止，Object对象的原型没有原型（Object是JS中所有对象数据类型的基类(最顶层的类)在Object.prototype上没有__proto__这个属性），如果在Object原型中依然没有找到，则返回undefined。</p><p>function Person() {} <a href="http://Person.prototype.name" target="_blank" rel="noreferrer">Person.prototype.name</a> = &#39;Tony&#39;; var person = new Person();</p><p>// 当我们给实例对象person添加了name属性，打印 <a href="http://person.name" target="_blank" rel="noreferrer">person.name</a> 时，结果为name的值Ken。 <a href="http://person.name" target="_blank" rel="noreferrer">person.name</a> = &#39;Ken&#39;; console.log(<a href="http://person.name" target="_blank" rel="noreferrer">person.name</a>) // Ken</p><p>// 当我们删除了person的name属性时，<a href="http://xn--person-2t2j44mlp0e4w3d.name" target="_blank" rel="noreferrer">再次读取person.name</a>，从person 对象中找不到name属性就会从person的原型也就是person.__proto__和Person.prototype中查找name属性，因为之前我们给他添加了，所以找到了 name属性为 Tony。 delete <a href="http://person.name" target="_blank" rel="noreferrer">person.name</a>; console.log(<a href="http://person.name" target="_blank" rel="noreferrer">person.name</a>) // Tony 我们可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性，如果自身属性存在，则返回 true，否则为false；使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，则会返回true，如果都没有则返回false。</p><p>function Person() { <a href="http://this.name" target="_blank" rel="noreferrer">this.name</a> = &#39;Tony&#39; }</p><p>Person.prototype.age = 18;</p><p>var person = new Person();</p><p>console.log(person.hasOwnProperty(&#39;name&#39;)); // true console.log(person.hasOwnProperty(&#39;age&#39;)); // false</p><p>console.log(&#39;name&#39; in person); // true console.log(&#39;age&#39; in person); // true console.log(&#39;a&#39; in person); // false</p><p>最后，相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线：</p><p>用心读完上面的总结，应该会对 JS 的原型与原型链有了一个深层次的认识吧，其实这部分还是需要细心琢磨的，毕竟是比较底层的原理</p><h2 id="实例、构造函数、原型对象之间的关系" tabindex="-1">实例、构造函数、原型对象之间的关系 <a class="header-anchor" href="#实例、构造函数、原型对象之间的关系" aria-hidden="true">#</a></h2><ul><li>实例是对象</li><li>实例通过new一个构造函数生成的</li><li>实例的<code>__proto__</code>属性指向原型对象（又称是实例原型）</li><li>构造函数是函数，也是函数对象，也是对象</li><li>构造函数的<code>prototype</code>属性指向原型对象</li><li>原型对象的<code>construor</code>指向的是构造函数</li></ul><h2 id="instanceof原理" tabindex="-1">instanceof原理 <a class="header-anchor" href="#instanceof原理" aria-hidden="true">#</a></h2><blockquote><p>instanceof是判断实例对象的<code>__proto__</code>和生成该实例的构造函数的<code>prototype</code>是不是引用的同一个地址，即比较原型对象的地址是否相同</p><p>是返回true，否返回false</p></blockquote><h2 id="new运算符" tabindex="-1">new运算符 <a class="header-anchor" href="#new运算符" aria-hidden="true">#</a></h2><p>原理：</p><ul><li>一个新对象被创建。它继承自foo.prototype</li><li>构造函数返回一个对象。在执行的时候，相应的传参会被传入，同时上下文(this)会被指定为这个新的实例。</li><li>new foo等同于new foo(), 只能用在不传递任何参数的情况</li><li>如果构造函数反悔了一个对象，那个这个对象会取代整个new出来的结果。如果构造函数没有返回对象，那个new出来的结果为步骤1创建的对象</li></ul><p>实现：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">new2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">func</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); 　　 </span><span style="color:#7F848E;font-style:italic;">//创建对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">func</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">);　　　　　　　　　　　　　</span><span style="color:#7F848E;font-style:italic;">//改变this指向，把结果赋给k</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;object&#39;</span><span style="color:#ABB2BF;">) {　　　　　　　　　</span><span style="color:#7F848E;font-style:italic;">//判断k的类型是不是对象</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">;　　　　　　　　　　　　　　　　　 </span><span style="color:#7F848E;font-style:italic;">//是，返回k</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">;　　　　　　　　　　　　　　　　　 </span><span style="color:#7F848E;font-style:italic;">//不是返回返回构造函数的执行结果</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}   </span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> new2 </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (func) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> o </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.create(</span><span style="color:#79B8FF;">func</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); 　　 </span><span style="color:#6B737C;">//创建对象</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> k </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">func</span><span style="color:#B392F0;">.call(o);　　　　　　　　　　　　　</span><span style="color:#6B737C;">//改变this指向，把结果赋给k</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> k </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;object&#39;</span><span style="color:#B392F0;">) {　　　　　　　　　</span><span style="color:#6B737C;">//判断k的类型是不是对象</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> k;　　　　　　　　　　　　　　　　　 </span><span style="color:#6B737C;">//是，返回k</span></span>
<span class="line"><span style="color:#B392F0;">    } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> o;　　　　　　　　　　　　　　　　　 </span><span style="color:#6B737C;">//不是返回返回构造函数的执行结果</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}   </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="function与object" tabindex="-1">Function与Object <a class="header-anchor" href="#function与object" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// null</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// null</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// null</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Function</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// false</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// undefined</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// null</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// null</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// null</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> Function); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ol><li><code>Object.__proto__ === Function.prototype</code>说明<code>Function</code>是<code>Object</code>的构造函数</li><li><code>Function.__proto__ === Function.prototype</code>说明<code>Function</code>既是原型对象，同时自己是自己的构造函数(<code> Function.constructor === Function</code>)，既是鸡也是蛋，就是这么牛掰</li><li><code>Object</code>是<code>Function.__proto__</code>和<code>Function.prototype</code>指向的原型对象的构造函数</li></ol><h2 id="根源对象null" tabindex="-1">根源对象null <a class="header-anchor" href="#根源对象null" aria-hidden="true">#</a></h2><p>原型链最上层（第一层）的根源对象是<code>null</code>，并且它们彼此间也是完全相等的，说明根源对象<code>null</code>是同一个</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="第二层原型对象" tabindex="-1">第二层原型对象 <a class="header-anchor" href="#第二层原型对象" aria-hidden="true">#</a></h2><p>顾名思义，即原型链最上层（第一层）的根源对象<code>null</code>下面一层的原型对象</p><p>第二层的原型对象的<code>__proto__</code>指向最上层（第一层）的根源对象<code>null</code></p><p>表示方法</p><ul><li><code>Function.prototype.__proto__</code></li><li><code>Function.__proto__.__proto__</code></li><li><code> Object.prototype</code></li><li><code>Object.__proto__.__proto__</code></li></ul><p>因为<code>Function.prototype.prototype</code>和<code>Object.prototype.prototype</code>是undefined，说明第二层的原型对象不是构造函数</p><p>因为<code>Function.__proto__.__proto__</code> 、<code>Object.prototype</code>、<code> Object.prototype</code>完全相等，说明第二层的原型对象是同一个</p><p>因为<code>Object.__proto__.__proto__ === Object.prototype</code>，说明<code>Object</code>是第二层原型对象的构造函数</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><h3 id="person-proto-function-prototype" tabindex="-1"><code>Person.__proto__ === Function.prototype</code> <a class="header-anchor" href="#person-proto-function-prototype" aria-hidden="true">#</a></h3><p>函数也是对象，所以构造函数也是对象，所以构造函数也有<code>__proto__</code></p><p>函数的构造函数是<code> Function</code></p><p>它的<code>__proto__</code>属性指向的是<code>Function.prototype</code></p><h3 id="person-prototype-proto-object-prototype" tabindex="-1"><code>Person.prototype.__proto__ === Object.prototype</code> <a class="header-anchor" href="#person-prototype-proto-object-prototype" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 因为函数也是对象，即构造函数也是对象，所以构造函数也有__proto__属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数（构造函数）的构造函数是Function</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 它的__proto__属性指向的是Function.prototype</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 那么这就导致了，与Object是实例对象的构造函数，这条规律冲突了</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6B737C;">// 因为函数也是对象，即构造函数也是对象，所以构造函数也有__proto__属性</span></span>
<span class="line"><span style="color:#6B737C;">// 函数（构造函数）的构造函数是Function</span></span>
<span class="line"><span style="color:#6B737C;">// 它的__proto__属性指向的是Function.prototype</span></span>
<span class="line"><span style="color:#6B737C;">// 那么这就导致了，与Object是实例对象的构造函数，这条规律冲突了</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Person</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>下面作出总结：</p><ul><li><p>一切的函数对象和 <code>Object</code> 对象，继承自 <code>Function</code> 对象</p></li><li><p>一切对象都是继承自<code>Object</code>对象，<code>Object</code> 对象直接继承根源对象<code>null</code></p></li><li><p><code>Object</code> 对象直接继承自 <code>Function</code> 对象</p></li><li><p><code>Function</code>对象的<code>__proto__</code>会指向自己的原型对象，最终还是继承自<code>Object</code>对象</p></li></ul><h2 id="既然-function-instanceof-object-true-为什么function-proto-object-prototype" tabindex="-1">既然 <code>Function instanceof Object === true</code>，为什么<code>Function.__proto__ !== Object.prototype </code>? <a class="header-anchor" href="#既然-function-instanceof-object-true-为什么function-proto-object-prototype" aria-hidden="true">#</a></h2>`,100),c=s("h2",{"[native":"","code]":"",id:"ƒ",tabindex:"-1"},[l("ƒ () "),s("a",{class:"header-anchor",href:"#ƒ","aria-hidden":"true"},"#")],-1),r=n(`<p>Function和Object原型对象相同</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 控制台输出ƒ () { [native code] }</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 控制台输出ƒ () { [native code] }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Function</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// 控制台输出ƒ () { [native code] }</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// 控制台输出ƒ () { [native code] }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>ƒ () { [native code] }是V8内部C++代码返回的结果，而不是真实的JS代码结果</p><p>第 1710 行附近的 FunctionSourceString 函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;function () { [native code] }&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light" tabindex="0"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;function () { [native code] }&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3>`,6),B=[t,c,r];function y(F,i,d,_,u,A){return p(),a("div",null,B)}const E=o(e,[["render",y]]);export{C as __pageData,E as default};
